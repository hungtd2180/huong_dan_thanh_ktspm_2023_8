1
00:00:00,950 --> 00:00:03,330
Microservices are all the rage right now.

2
00:00:03,350 --> 00:00:08,870
You can't have an architecture discussion without this term coming up sooner or later, usually sooner.

3
00:00:08,900 --> 00:00:11,240
But what is actually microservices?

4
00:00:11,270 --> 00:00:17,870
Well, put simply, a microservices based architecture is an architecture in which the various functionalities

5
00:00:17,870 --> 00:00:23,780
are implemented as separate, loosely coupled services that interact with each other using standard

6
00:00:23,780 --> 00:00:24,980
lightweight protocol.

7
00:00:25,130 --> 00:00:30,230
To understand the motivation for microservices, let's go back to the pre microservices days.

8
00:00:30,440 --> 00:00:36,980
In these ancient times, applications were built as a monolith, meaning all the functionalities were

9
00:00:36,980 --> 00:00:41,120
run in a single process, usually built using the three layers architecture.

10
00:00:41,210 --> 00:00:47,360
For example, look at the following diagram depicting a typical HR system built as a monolith.

11
00:00:47,630 --> 00:00:51,890
As you can see, all the various modules are always part of the same layer.

12
00:00:51,920 --> 00:00:56,870
The Employees API and Salary API are both part of the same service interface.

13
00:00:56,900 --> 00:01:02,820
Similarly, the vacation business logic and salary business logic are in the same business logic layer

14
00:01:02,820 --> 00:01:03,930
and so on.

15
00:01:04,260 --> 00:01:10,740
Monolith systems were and still are extremely popular and are a great way of building small to medium

16
00:01:10,740 --> 00:01:11,730
applications.

17
00:01:11,730 --> 00:01:15,790
But there are some inherent problems with monolith systems.

18
00:01:15,810 --> 00:01:21,960
One because the application is executed in a single process, then if there is an exception in a single

19
00:01:21,960 --> 00:01:24,990
component, the whole process comes crashing down.

20
00:01:24,990 --> 00:01:29,220
Every bug, every edge case can render the application unusable.

21
00:01:29,790 --> 00:01:34,530
Two Every time we need to update the application, we need to update the whole code.

22
00:01:34,530 --> 00:01:41,010
We cannot replace just a single component because again, we run in a single process with a single executable.

23
00:01:41,370 --> 00:01:44,700
Three We are limited to one development platform.

24
00:01:44,700 --> 00:01:51,000
We cannot combine, say, Java and PHP in the same process, and that might pose a problem, especially

25
00:01:51,000 --> 00:01:56,340
in our organization, that have diverse development teams which expertise in different technologies.

26
00:01:56,580 --> 00:02:00,260
And last, our compute resources are not optimized.

27
00:02:00,270 --> 00:02:06,150
If our application performs some heavy duty calculations that require a lot of resources but also performs

28
00:02:06,150 --> 00:02:11,340
some lightweight querying, we cannot assign computing resources to the specific code that requires

29
00:02:11,340 --> 00:02:11,670
it.

30
00:02:11,700 --> 00:02:14,820
We have to assign those resources to the whole application.

31
00:02:14,910 --> 00:02:17,860
So what can be done with all these problems?

32
00:02:17,940 --> 00:02:20,640
Well, enter microservices.

33
00:02:20,850 --> 00:02:24,420
The microservices architecture claims to solve all these issues.

34
00:02:24,450 --> 00:02:29,550
Remember, with microservices, the application is actually a collection of small, lightweight and

35
00:02:29,550 --> 00:02:30,960
loosely coupled services.

36
00:02:30,960 --> 00:02:33,960
Each performs one and only one task.

37
00:02:34,140 --> 00:02:39,870
So let's see how this architecture solves the problems described first.

38
00:02:39,900 --> 00:02:45,390
Since each service runs in its own process and exception in a single service will not bring down the

39
00:02:45,390 --> 00:02:50,760
whole application, only the specific service will be impacted and the rest of the services will continue

40
00:02:50,760 --> 00:02:52,030
working as usual.

41
00:02:52,050 --> 00:02:53,610
And what about updates?

42
00:02:53,640 --> 00:02:58,550
Here again, we benefit from the fact that each service runs in its own process.

43
00:02:58,560 --> 00:03:03,450
We can update each service separately and do not need to update all of them at once.

44
00:03:03,480 --> 00:03:09,420
A side effect of that is that updates can occur much more frequently since their impact is limited and

45
00:03:09,420 --> 00:03:14,220
the testing required for each update is much less than that required for a whole application.

46
00:03:14,520 --> 00:03:20,430
The third problem also gets solved here We can mix and match the development platforms since the services

47
00:03:20,430 --> 00:03:24,570
communicate between them using platform agnostic protocols such as rest.

48
00:03:24,600 --> 00:03:29,910
Because of that, each service can be developed using different development platform, thus optimizing

49
00:03:29,910 --> 00:03:31,900
the overall execution of the application.

50
00:03:31,950 --> 00:03:38,540
And last, since each service runs in its own process, we can assign resources to each service separately.

51
00:03:38,550 --> 00:03:44,640
We can decide, for example, that one service will be developed on four virtual machines with 16 cores

52
00:03:44,640 --> 00:03:49,440
each, while another one will be deployed on only two VMs with eight cores.

53
00:03:49,890 --> 00:03:55,740
Now let's go back to the air application and see how it will look like if designed using the microservices

54
00:03:55,740 --> 00:03:56,190
pattern.

55
00:03:56,520 --> 00:04:02,100
As you can see, instead of a large, complex single process, we have many small lightweight services.

56
00:04:02,100 --> 00:04:04,410
Each focuses on a single task.

57
00:04:04,440 --> 00:04:08,750
Now, this diagram might look familiar to you, and that's not a coincidence.

58
00:04:08,760 --> 00:04:14,820
In our case study, we designed the IO2 application to implement the microservices pattern, and we

59
00:04:14,820 --> 00:04:17,360
ended up with four such services.

60
00:04:17,370 --> 00:04:21,000
Each performs a single task and communicates using rest.

61
00:04:21,000 --> 00:04:27,060
So microservices is a great pattern and should be considered seriously for almost every web application.

62
00:04:27,060 --> 00:04:32,670
But not all is rosy in the microservices world, and there are some drawbacks that should be taken into

63
00:04:32,670 --> 00:04:33,390
account.

64
00:04:33,480 --> 00:04:39,090
One microservices based system can have a lot of services, like hundreds of them.

65
00:04:39,090 --> 00:04:44,280
For example, Netflix, one of the leaders in the microservices world, after migrating its popular

66
00:04:44,280 --> 00:04:50,400
website from monolith to microservices, architecture has more than 700 microservices.

67
00:04:50,610 --> 00:04:55,140
When you have such a large amount of microservices, they should be monitored all the time.

68
00:04:55,140 --> 00:04:59,910
It's unrealistic to expect that when you have 700 services, everything will work.

69
00:04:59,940 --> 00:05:00,840
Find all the time.

70
00:05:01,080 --> 00:05:06,900
So if you intend to work on a microservices architecture, always include a monitoring solution.

71
00:05:06,930 --> 00:05:12,420
Netflix, for example, developed a tool called Eureka that does exactly that.

72
00:05:12,450 --> 00:05:18,600
It's an open source tool and you can use it to or you can use any other tool, but make sure the monitoring

73
00:05:18,600 --> 00:05:20,610
is an integral part of the solution.

74
00:05:20,910 --> 00:05:23,530
The second problem is the architecture itself.

75
00:05:23,550 --> 00:05:26,310
Designing distributed system is a complex feat.

76
00:05:26,340 --> 00:05:31,830
Monolithic systems are much simpler to design and implement, and you have to be laser focused on each

77
00:05:31,830 --> 00:05:36,180
service's functionality to make sure it integrates well in the overall architecture.

78
00:05:36,270 --> 00:05:41,700
For example, in one of the applications I've designed a couple of years ago, the development team

79
00:05:41,700 --> 00:05:47,100
wasn't familiar with the microservices pattern, so we worked together towards the design of the first

80
00:05:47,100 --> 00:05:47,670
service.

81
00:05:47,700 --> 00:05:54,240
The end result was a beautiful service that did exactly what we needed it to do, but it took more than

82
00:05:54,240 --> 00:06:00,640
three months to design, and the service itself contained only 500 lines of code, which is a ridiculous

83
00:06:00,640 --> 00:06:02,890
number for a dev team in three months.

84
00:06:03,070 --> 00:06:08,380
So prepare yourself for a lot of thinking about the design of a microservices based application.

85
00:06:09,010 --> 00:06:11,800
The third and last drawback is testing.

86
00:06:11,830 --> 00:06:16,790
Testing a microservices based application is more difficult than testing a monolith with monolith.

87
00:06:16,810 --> 00:06:19,870
You just call the API and set the expected result.

88
00:06:19,900 --> 00:06:26,260
With microservices, some services often depend on other services, so you have to first test the dependent

89
00:06:26,260 --> 00:06:29,140
services before testing the services using them.

90
00:06:29,650 --> 00:06:32,880
So that was a glimpse on the microservices architecture.

91
00:06:32,890 --> 00:06:37,450
It's a very popular architectural pattern and it should be in any architect's handbook.

92
00:06:37,480 --> 00:06:42,790
In the resources for this lecture, you can find references to some more materials about the microservices

93
00:06:42,790 --> 00:06:45,070
pattern and you are welcome to use them.

