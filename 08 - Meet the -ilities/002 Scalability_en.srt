1
00:00:00,380 --> 00:00:06,140
Scalability is the ability of the application to support adding computing resources in order to support

2
00:00:06,140 --> 00:00:10,410
additional load without any interruption to the application's activity.

3
00:00:10,430 --> 00:00:16,160
In other, more simple words, let's say an e-commerce application is deployed on a virtual machine.

4
00:00:16,160 --> 00:00:19,910
Everything works fine and the application is humming along happily.

5
00:00:19,910 --> 00:00:22,370
And then Black Friday arrives.

6
00:00:22,400 --> 00:00:27,920
A huge blow is expected and the CIO believes the current virtual machine won't be able to support the

7
00:00:27,920 --> 00:00:28,940
expected load.

8
00:00:29,420 --> 00:00:33,590
In systems that do not support scalability, the following will occur.

9
00:00:34,040 --> 00:00:39,650
The application's code will be examined for code pieces that will not support the expected load.

10
00:00:39,800 --> 00:00:45,830
Probably some code fragments will have to be rewritten and the VM will be reinforced.

11
00:00:45,830 --> 00:00:48,230
More CPU and more memory.

12
00:00:48,350 --> 00:00:54,110
As you can guess, this is a long, cumbersome process that is never fast enough to respond to actual

13
00:00:54,110 --> 00:00:54,920
challenges.

14
00:00:55,070 --> 00:01:01,830
On the other hand, in systems that do support scalability, the process is much simpler and faster.

15
00:01:02,340 --> 00:01:09,630
Add another virtual machine, notify the load balancer about the new virtual machine and that's it.

16
00:01:10,260 --> 00:01:13,260
As you can see, no changes were made to the code.

17
00:01:13,440 --> 00:01:17,520
It's important to notice the difference between the two types of scalability.

18
00:01:17,850 --> 00:01:23,150
In the first case, we took an existing VM and added CPU power and memory to it.

19
00:01:23,160 --> 00:01:25,470
This is called scale up.

20
00:01:25,980 --> 00:01:31,680
In the second case, we simply added new VMs and did not touch any existing one.

21
00:01:31,680 --> 00:01:33,600
This is called scale out.

22
00:01:33,630 --> 00:01:34,410
Now.

23
00:01:34,410 --> 00:01:37,170
We will always prefer scale out over scale up.

24
00:01:37,170 --> 00:01:38,250
And why is that?

25
00:01:38,280 --> 00:01:40,740
Because of two very important reasons.

26
00:01:40,890 --> 00:01:42,840
One redundancy.

27
00:01:42,870 --> 00:01:47,700
The more VMs we have, the more we are protected against the VMs crash situation.

28
00:01:47,790 --> 00:01:52,980
If you will have a single, very powerful VM, the application will still won't work if this single

29
00:01:52,980 --> 00:01:54,420
server will crash.

30
00:01:54,550 --> 00:02:01,050
Two There is a limit to the CPU and memory we can add to a server if the application consumes a large

31
00:02:01,050 --> 00:02:04,580
amount of memory, we will hit this limit somewhere along the road.

32
00:02:04,590 --> 00:02:09,720
On the other hand, there is virtually no limit to the number of VMs we can add to the load balancer,

33
00:02:09,750 --> 00:02:13,080
thus making the application grow infinitely.

34
00:02:13,860 --> 00:02:15,750
So the bottom line here is clear.

35
00:02:15,780 --> 00:02:18,690
Always opt for scaling out your application.

36
00:02:18,990 --> 00:02:24,450
Note that the scale out scenario includes load balancer, which is not part of the scale up scenario.

37
00:02:24,480 --> 00:02:29,230
Scale Out always uses load balancer to distribute the load between the VMs.

38
00:02:29,250 --> 00:02:34,530
One of the key architectural patterns for supporting scale out scenario is stateless, and we will discuss

39
00:02:34,530 --> 00:02:35,940
it later in this course.

