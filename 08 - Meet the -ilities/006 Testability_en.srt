1
00:00:00,530 --> 00:00:05,330
Testability is the attribute that defines how easy it to test the application.

2
00:00:05,360 --> 00:00:10,010
Now, when talking about testing, it's important to make the distinction between the various types

3
00:00:10,010 --> 00:00:10,910
of testing.

4
00:00:11,270 --> 00:00:14,340
The most familiar kind of testing is a manual testing.

5
00:00:14,360 --> 00:00:19,520
In this kind, as you can expect, the actual tester is sitting in front of the screen and tests various

6
00:00:19,520 --> 00:00:23,300
functions of the system using the user interface it provides.

7
00:00:23,330 --> 00:00:25,910
This type has nothing to do with testability.

8
00:00:26,000 --> 00:00:31,790
Other types of testing involve code that executes the application's code and not an actual person that

9
00:00:31,790 --> 00:00:33,260
executes the system functions.

10
00:00:33,290 --> 00:00:37,160
This happens with unit testing and integration testing.

11
00:00:38,680 --> 00:00:39,730
With unit testing.

12
00:00:39,730 --> 00:00:42,850
A programmer writes code that tests the application code.

13
00:00:42,880 --> 00:00:47,590
This code executes specific methods with specific parameters and checks.

14
00:00:47,590 --> 00:00:50,410
Whether the result returned from the method is expected.

15
00:00:50,410 --> 00:00:50,920
One.

16
00:00:50,950 --> 00:00:58,240
For example, let's say we have a method called Add that accepts two parameters an integer named X and

17
00:00:58,240 --> 00:00:59,740
an integer named Y.

18
00:00:59,860 --> 00:01:03,790
This method should add y to X and return the result.

19
00:01:03,960 --> 00:01:06,760
A typical unit test will call this method and pass it.

20
00:01:06,760 --> 00:01:09,580
Two numbers say five and nine.

21
00:01:09,610 --> 00:01:13,390
In this case, the unit test will expect to get back the number 14.

22
00:01:13,750 --> 00:01:16,380
If that's the case, the test is marked as passed.

23
00:01:16,390 --> 00:01:19,030
If not, it's marked as failed.

24
00:01:20,140 --> 00:01:23,110
An integration test is similar, but on larger scale.

25
00:01:23,110 --> 00:01:28,030
With integration tests, we don't test a specific method, but a whole module or flow.

26
00:01:28,060 --> 00:01:33,610
We execute a method that should trigger a chain of actions that will result in a specific outcome.

27
00:01:33,610 --> 00:01:36,160
For example, a new record in the database.

28
00:01:36,310 --> 00:01:42,950
And now back to the testability, i.e. a testable system is a system that is easy to test.

29
00:01:42,950 --> 00:01:50,410
Using unit test and integration tests and easy to test system can be identified by two characteristics.

30
00:01:50,420 --> 00:01:55,250
One its method and models are not dependent on other methods or models.

31
00:01:55,250 --> 00:02:00,380
And two, every method is responsible for one and only one action.

32
00:02:00,800 --> 00:02:06,410
By making methods independent from each other, we make it extremely easy to test each method in isolation,

33
00:02:06,410 --> 00:02:12,320
which is exactly what we are trying to achieve using unit tests and by ensuring each method is responsible

34
00:02:12,320 --> 00:02:14,960
for only one action, it's very easy to test.

35
00:02:15,080 --> 00:02:16,760
To test the specific action.

36
00:02:16,760 --> 00:02:22,280
For example, if the above mentioned Add method will check whether the given numbers are positive,

37
00:02:22,310 --> 00:02:26,170
we will have a problem isolating the Add action and testing it specifically.

38
00:02:26,180 --> 00:02:30,250
In this case, the correct path is to make the check in a separate method.

39
00:02:30,260 --> 00:02:34,130
Let's call it check for positive and test it separately.

40
00:02:34,160 --> 00:02:38,600
The most common techniques to achieve these two characteristics is with dependency injection.

41
00:02:38,630 --> 00:02:42,170
Often called die and the single responsibility concept.

42
00:02:42,200 --> 00:02:44,660
We will discuss these two later in this course.

