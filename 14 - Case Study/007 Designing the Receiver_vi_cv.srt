1
00:00:00,200 --> 00:00:02,390
Dịch vụ tiếp theo của chúng tôi là máy thu.

2
00:00:02,480 --> 00:00:04,430
Chúng ta hãy cùng ôn lại một chút nhé.

3
00:00:04,730 --> 00:00:10,700
Bộ thu là một dịch vụ nhận tin nhắn từ các thiết bị IoT và gửi chúng đến hàng đợi

4
00:00:10,700 --> 00:00:12,260
được người xử lý xử lý.

5
00:00:12,620 --> 00:00:15,860
Vậy trước tiên, dịch vụ này là loại ứng dụng gì?

6
00:00:15,890 --> 00:00:17,400
Vâng, đây là câu hỏi dễ.

7
00:00:17,420 --> 00:00:21,980
Chúng tôi đã nói rằng các thiết bị gửi tin nhắn qua Http bằng giao thức Rest.

8
00:00:21,980 --> 00:00:26,870
Vì vậy, kết luận hiển nhiên là dịch vụ này là một API web cung cấp các điểm cuối còn lại.

9
00:00:26,900 --> 00:00:27,470
Tốt.

10
00:00:27,650 --> 00:00:29,030
Việc đó thực sự dễ dàng.

11
00:00:29,060 --> 00:00:33,020
Chúng ta hãy tiếp tục bước tiếp theo là lựa chọn ngăn xếp công nghệ.

12
00:00:33,140 --> 00:00:36,180
Vâng, hóa ra đây cũng là một quyết định dễ dàng.

13
00:00:36,200 --> 00:00:41,420
Chúng tôi đã quyết định rằng dịch vụ đầu tiên sẽ dựa trên Dotnet core và chúng tôi sẽ thực sự cần một

14
00:00:41,420 --> 00:00:43,550
lý do chính đáng để thay đổi quyết định này.

15
00:00:43,550 --> 00:00:48,710
Việc sử dụng nhiều công nghệ trong một ứng dụng có thể gây ra nhiều đau đầu nếu thực hiện sai cách

16
00:00:48,710 --> 00:00:49,300
lý do.

17
00:00:49,310 --> 00:00:54,350
Vậy hãy cùng xem liệu có lý do chính đáng nào để không tiếp tục sử dụng Dotnet core trên dịch vụ này không.

18
00:00:54,470 --> 00:00:58,760
Vậy Dotnet Core có hỗ trợ tốt cho các ứng dụng API web không?

19
00:00:58,790 --> 00:01:01,440
Câu trả lời chắc chắn là có.

20
00:01:01,470 --> 00:01:06,210
Nó được xây dựng từ đầu để hỗ trợ các ứng dụng API web bằng ASP.

21
00:01:06,360 --> 00:01:09,210
Thư viện Net Core có hỗ trợ tuyệt vời cho nó.

22
00:01:09,210 --> 00:01:12,240
Ngoài ra, hiệu suất API web của nó cũng rất tuyệt vời.

23
00:01:12,570 --> 00:01:20,190
Được rồi, có vẻ như không có lý do gì để không sử dụng Dotnet core ở đây và đây là những gì chúng ta sẽ làm tiếp theo.

24
00:01:20,220 --> 00:01:22,740
Hãy cùng xem xét kiến trúc dịch vụ.

25
00:01:22,770 --> 00:01:25,500
Bạn còn nhớ kiến trúc phân lớp mà chúng ta đã thảo luận trước đó không?

26
00:01:25,530 --> 00:01:28,230
Hãy xem liệu nó có phù hợp với dịch vụ này không.

27
00:01:28,350 --> 00:01:34,170
Khi nhìn vào sơ đồ này cho thấy kiến trúc ba lớp cổ điển, có vẻ như nó đang diễn ra

28
00:01:34,170 --> 00:01:35,790
để phù hợp chính xác với dịch vụ của chúng tôi.

29
00:01:35,790 --> 00:01:38,610
Nhưng nếu nhìn kỹ hơn thì có thể thấy một vấn đề ở đây.

30
00:01:38,850 --> 00:01:41,790
Hãy xem lớp dưới cùng, lớp truy cập dữ liệu.

31
00:01:41,820 --> 00:01:44,520
Hãy nhớ mục đích của dịch vụ của chúng tôi khi gửi tin nhắn.

32
00:01:44,520 --> 00:01:46,350
Nó sẽ đưa họ vào hàng đợi.

33
00:01:46,380 --> 00:01:47,310
Đúng vậy.

34
00:01:47,310 --> 00:01:49,800
Không có kho dữ liệu cho dịch vụ này.

35
00:01:49,830 --> 00:01:54,960
Vâng, bạn có thể cho rằng hàng đợi là một loại kho lưu trữ dữ liệu, nhưng trên thực tế chúng ta không xử lý nó theo cách đó.

36
00:01:54,960 --> 00:01:58,560
Nhưng đây là phương pháp truyền tải thông điệp từ điểm này đến điểm khác.

37
00:01:58,590 --> 00:02:03,810
Vì vậy, trong khi dịch vụ của chúng tôi chắc chắn cần giao diện dịch vụ, đó là những gì các thiết bị sẽ giao tiếp và

38
00:02:03,810 --> 00:02:08,490
lớp logic kinh doanh, sẽ xác thực các thông điệp, chúng ta cần thay thế quyền truy cập dữ liệu

39
00:02:08,490 --> 00:02:10,050
lớp này chồng lên lớp khác.

40
00:02:10,410 --> 00:02:16,050
Trong trường hợp này, chúng ta sẽ tạo một lớp mới gọi là lớp xử lý hàng đợi, lớp này sẽ xử lý

41
00:02:16,050 --> 00:02:20,130
nhiều nhiệm vụ khác nhau khi làm việc với hàng đợi, chủ yếu là thêm tin nhắn vào hàng đợi.

42
00:02:20,130 --> 00:02:23,070
Và đây là hình ảnh sơ đồ đã cập nhật.

43
00:02:24,300 --> 00:02:27,990
Đây thực sự là một ví dụ tuyệt vời về sức mạnh của kiến trúc phân lớp.

44
00:02:28,020 --> 00:02:33,420
Chúng tôi phải thay thế toàn bộ chức năng của hệ thống bằng cách sử dụng hàng đợi thay vì kho dữ liệu và chỉ

45
00:02:33,420 --> 00:02:35,510
một lớp đã bị ảnh hưởng bởi điều này.

46
00:02:35,520 --> 00:02:39,420
Giao diện dịch vụ và lớp nghiệp vụ không biết có điều gì đó đã thay đổi.

47
00:02:39,450 --> 00:02:44,760
Giao diện dịch vụ vẫn hoạt động với lớp nghiệp vụ theo đúng cách thức như trước đây.

48
00:02:44,760 --> 00:02:49,800
Sự thay đổi và lớp kinh doanh sẽ tiếp tục hoạt động với các giao diện đại diện cho lớp dữ liệu

49
00:02:49,800 --> 00:02:52,860
và sẽ không biết được việc triển khai cụ thể đã thay đổi.

50
00:02:53,040 --> 00:02:56,840
Vậy nếu bạn tự hỏi tại sao tôi lại cần kiến trúc lớp?

51
00:02:56,850 --> 00:02:58,590
Tôi hy vọng bây giờ bạn đã có câu trả lời.

52
00:02:59,010 --> 00:03:04,530
Cuối cùng nhưng không kém phần quan trọng, chúng tôi sẽ thêm một lớp ghi nhật ký để cho phép dịch vụ ghi lại mọi thứ

53
00:03:04,530 --> 00:03:06,860
xảy ra trong quá trình nhận tin nhắn.

54
00:03:06,870 --> 00:03:10,440
Bây giờ hãy xem cách ghi nhật ký được thể hiện trong sơ đồ.

55
00:03:10,440 --> 00:03:14,420
Đây không phải là một lớp bình thường và nó không nằm giữa các lớp khác.

56
00:03:14,430 --> 00:03:20,280
Nó trông giống như một lớp dọc hoặc theo thuật ngữ chuyên môn hơn là mối quan tâm xuyên suốt.

57
00:03:20,460 --> 00:03:25,860
Loại lớp này, không hẳn là một lớp, có sẵn cho tất cả các lớp, điều này là hợp lý

58
00:03:25,860 --> 00:03:28,170
vì tất cả các lớp đều phải có khả năng ghi nhật ký.

59
00:03:28,170 --> 00:03:30,540
Những gì đang diễn ra với các tin nhắn đang được quan tâm.

60
00:03:30,570 --> 00:03:36,450
Vì vậy, tất cả các lớp sẽ có tham chiếu đến cơ chế ghi nhật ký và sẽ tận dụng mối quan tâm xuyên suốt này.

61
00:03:37,260 --> 00:03:38,070
Được rồi.

62
00:03:38,310 --> 00:03:43,770
Bây giờ là thời điểm tốt để xem lại các yêu cầu không chức năng được xác định cho hệ thống và thực hiện

63
00:03:43,770 --> 00:03:46,110
chắc chắn kiến trúc của chúng tôi tương thích với chúng.

64
00:03:46,230 --> 00:03:50,580
Trên thực tế có hai yêu cầu không mang tính chức năng liên quan đến dịch vụ này.

65
00:03:50,730 --> 00:03:57,840
Yêu cầu tải không chức năng, được thiết lập cho 540 yêu cầu đồng thời, trong khi 500 trong số đó là

66
00:03:57,840 --> 00:04:04,800
từ các thiết bị và tin nhắn bị mất các yêu cầu không chức năng ở mức cho phép mất tin nhắn là 1%.

67
00:04:05,070 --> 00:04:09,600
Chúng ta hãy bắt đầu với yêu cầu tải ở mức 500 yêu cầu đồng thời.

68
00:04:09,630 --> 00:04:11,450
Chúng tôi khá hài lòng với thiết kế của mình.

69
00:04:11,460 --> 00:04:14,760
Kiến trúc này hoàn toàn không có trạng thái và có thể dễ dàng mở rộng quy mô.

70
00:04:14,790 --> 00:04:20,060
Thêm vào đó, thực tế là dịch vụ này không làm được gì nhiều ngoài việc thêm tin nhắn vào hàng đợi

71
00:04:20,070 --> 00:04:24,870
vì mục đích hiệu suất và có vẻ như dịch vụ này sẽ không gặp vấn đề gì khi tuân thủ điều này

72
00:04:24,870 --> 00:04:25,500
con số.

73
00:04:25,650 --> 00:04:27,990
Vậy còn yêu cầu về mất tin nhắn thì sao?

74
00:04:28,020 --> 00:04:34,080
Vâng, nếu bạn còn nhớ, chúng tôi đã nói trước đó rằng thực tế là yêu cầu là 99% chứ không phải 100%

75
00:04:34,080 --> 00:04:35,070
là một sự khác biệt lớn.

76
00:04:35,070 --> 00:04:42,420
Và đây là nơi chúng ta thấy rằng vì 1% tin nhắn có thể bị mất nên một API nghỉ ngơi tiêu chuẩn là đủ tốt.

77
00:04:42,510 --> 00:04:49,530
Xác suất hơn 1% yêu cầu bị mất trong API như vậy là cực kỳ thấp và vì một lần nữa

78
00:04:49,530 --> 00:04:54,060
dịch vụ ban đầu không mang lại nhiều lợi ích, chúng ta có thể thoải mái với yêu cầu này.

79
00:04:54,150 --> 00:04:59,550
Nếu chúng ta phải đảm bảo rằng bất kể thế nào, không có thông điệp nào bị mất, chúng ta sẽ ở trong một tình thế khó khăn hơn nhiều.

80
00:04:59,550 --> 00:04:59,940
khó hơn.

81
00:04:59,980 --> 00:05:03,940
Vị trí và có lẽ chúng ta sẽ phải triển khai cơ chế an toàn phức tạp để thực hiện.

82
00:05:03,970 --> 00:05:06,370
Chắc chắn tin nhắn sẽ luôn được nhận.

83
00:05:06,910 --> 00:05:10,210
Và như vậy là kết thúc kiến trúc công vụ của chúng ta.

84
00:05:10,240 --> 00:05:14,950
Bây giờ chúng ta có một kiến trúc hoàn chỉnh cho dịch vụ quan trọng này, bao gồm loại ứng dụng của nó

85
00:05:14,950 --> 00:05:18,850
công nghệ và kiến trúc nội bộ, bao gồm cơ chế ghi nhật ký.

86
00:05:19,030 --> 00:05:19,990
Thật tuyệt vời.

87
00:05:19,990 --> 00:05:22,750
Và bây giờ chúng ta có thể tiếp tục buổi lễ tiếp theo.

