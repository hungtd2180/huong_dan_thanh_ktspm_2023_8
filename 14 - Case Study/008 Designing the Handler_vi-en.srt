00:00:00,350 --> 00:00:02,540
Our next service is the handler.
Dịch vụ tiếp theo của chúng tôi là người xử lý.


00:00:02,630 --> 00:00:08,690
As you probably remember, the handler is responsible for validating the messages, passing them and
Như bạn có thể nhớ, trình xử lý có trách nhiệm xác thực các thông báo, chuyển chúng và


00:00:08,690 --> 00:00:10,910
storing them in the system's data store.
lưu trữ chúng trong kho dữ liệu của hệ thống.


00:00:11,060 --> 00:00:16,580
One of the major factors that will influence the handlers design is the fact that the messages to be
Một trong những yếu tố chính ảnh hưởng đến thiết kế trình xử lý là thực tế là các thông điệp sẽ là


00:00:16,580 --> 00:00:21,110
handled are waiting in a queue after being placed there by the receiver.
đã xử lý đang chờ trong hàng đợi sau khi được người nhận đặt vào đó.


00:00:21,170 --> 00:00:24,950
This fact dictates the type of application of the handler service.
Thực tế này quyết định loại ứng dụng của dịch vụ xử lý.


00:00:24,980 --> 00:00:27,920
Remember how we selected the type of logging service?
Bạn còn nhớ cách chúng ta chọn loại dịch vụ ghi nhật ký không?


00:00:27,950 --> 00:00:31,890
Well, the handler service is quite similar in the logging service.
Vâng, dịch vụ xử lý khá giống với dịch vụ ghi nhật ký.


00:00:31,910 --> 00:00:37,100
The log records were pulled from a queue by the service and then stored in a data store.
Các bản ghi nhật ký được dịch vụ kéo từ hàng đợi và sau đó được lưu trữ trong kho dữ liệu.


00:00:37,130 --> 00:00:39,170
The handler service works the same.
Dịch vụ xử lý hoạt động giống nhau.


00:00:39,170 --> 00:00:45,800
It pulls the messages from a queue, handles them, and store them in a data store in the logging service.
Nó kéo các tin nhắn từ hàng đợi, xử lý chúng và lưu trữ chúng trong kho dữ liệu trong dịch vụ ghi nhật ký.


00:00:45,830 --> 00:00:51,680
This fact caused us to decide it's going to be a Windows service because there is no request response
Thực tế này khiến chúng tôi quyết định rằng nó sẽ là một dịch vụ Windows vì không có yêu cầu phản hồi


00:00:51,680 --> 00:00:55,940
execution model here, but a service that is always on and pulls the queue.
mô hình thực thi ở đây, nhưng một dịch vụ luôn bật và kéo hàng đợi.


00:00:56,690 --> 00:01:00,000
And the same goes for the handler service.
Và điều tương tự cũng xảy ra với dịch vụ xử lý.


00:01:00,030 --> 00:01:02,310
It is not a request response service.
Đây không phải là dịch vụ phản hồi yêu cầu.


00:01:02,340 --> 00:01:05,190
It's always active and is busy pulling the queue.
Nó luôn hoạt động và bận rộn kéo hàng đợi.


00:01:05,220 --> 00:01:09,240
So the handler service is going to be a Windows service too.
Vì vậy, dịch vụ xử lý cũng sẽ là dịch vụ Windows.


00:01:09,330 --> 00:01:10,050
Good.
Tốt.


00:01:10,320 --> 00:01:12,810
Next, the technology stack.
Tiếp theo là công nghệ.


00:01:12,840 --> 00:01:17,280
By now we already have two services for which we determined the technology stack.
Cho đến nay chúng tôi đã có hai dịch vụ mà chúng tôi đã xác định được công nghệ.


00:01:17,310 --> 00:01:19,350
The logging service and the receiver.
Dịch vụ ghi nhật ký và người nhận.


00:01:19,380 --> 00:01:21,750
In both we went for Dotnet core.
Trong cả hai trường hợp, chúng tôi đều sử dụng Dotnet core.


00:01:21,900 --> 00:01:27,240
Since it looks like there is no real reason to select other technology for the handler service since
Vì có vẻ như không có lý do thực sự nào để lựa chọn công nghệ khác cho dịch vụ xử lý kể từ năm


00:01:27,240 --> 00:01:32,460
there are no special requirements and it will be developed by the same teams who developed the other
không có yêu cầu đặc biệt nào và nó sẽ được phát triển bởi cùng nhóm đã phát triển 25 cái còn lại


00:01:32,460 --> 00:01:36,570
services, we can be quite comfortable in using Dotnet core here too.
dịch vụ, chúng ta có thể khá thoải mái khi sử dụng Dotnet core ở đây.


00:01:36,840 --> 00:01:38,190
Okay, good.
Được rồi, tốt.


00:01:38,280 --> 00:01:40,140
And now to the architecture.
Và bây giờ đến phần kiến trúc.


00:01:40,140 --> 00:01:44,670
We are going to use the traditional layered architecture pattern here, same as in other services.
Chúng tôi sẽ sử dụng mô hình kiến trúc phân lớp truyền thống ở đây, giống như trong các dịch vụ khác.


00:01:44,700 --> 00:01:47,550
Let's examine what layers are relevant here.
Chúng ta hãy xem xét những lớp nào có liên quan ở đây.


00:01:47,580 --> 00:01:49,860
First service interface.
Giao diện dịch vụ đầu tiên.


00:01:50,100 --> 00:01:52,050
Well, we don't have one.
Vâng, chúng tôi không có cái nào cả.


00:01:52,080 --> 00:01:54,930
This service does not expose any API.
Dịch vụ này không cung cấp bất kỳ API nào.


00:01:54,960 --> 00:01:58,170
It is always active and initiates the calls to the queue.
Nó luôn hoạt động và khởi tạo các cuộc gọi đến hàng đợi.


00:01:58,200 --> 00:02:01,110
It's not waiting for request from other services.
Không chờ yêu cầu từ các dịch vụ khác.


00:02:01,140 --> 00:02:06,220
So this layer instead of exposing API will orchestrate the work against the queue.
Vì vậy, lớp này thay vì hiển thị API sẽ sắp xếp công việc theo hàng đợi.


00:02:06,240 --> 00:02:11,520
Specifically, this layer is responsible for timing the polling of the queue and executing the actual
Cụ thể, lớp này chịu trách nhiệm tính thời gian thăm dò hàng đợi và thực hiện 37 thực tế


00:02:11,520 --> 00:02:12,130
polling.
thăm dò.


00:02:12,150 --> 00:02:15,750
Let's call this layer polling same as in the logging service.
Chúng ta hãy gọi lớp thăm dò này giống như trong dịch vụ ghi nhật ký.


00:02:16,050 --> 00:02:16,650
Good.
Tốt.


00:02:16,860 --> 00:02:19,080
Next layer is the business logic layer.
Lớp tiếp theo là lớp logic nghiệp vụ.


00:02:19,080 --> 00:02:22,440
And yes, the handler service definitely needs such a layer.
Và đúng vậy, dịch vụ xử lý chắc chắn cần một lớp như vậy.


00:02:22,470 --> 00:02:27,780
This layer is responsible for validating and processing the messages which are typical jobs for business
Lớp này chịu trách nhiệm xác thực và xử lý các thông điệp, đây là công việc điển hình của doanh nghiệp


00:02:27,780 --> 00:02:28,620
logic layer.
lớp logic.


00:02:28,710 --> 00:02:34,830
Now note that in a real world app we would have discussed a plugin mechanism to allow dynamic loading
Bây giờ hãy lưu ý rằng trong một ứng dụng thực tế, chúng ta sẽ thảo luận về cơ chế plugin để cho phép tải động


00:02:34,830 --> 00:02:40,890
of validators and parcels for specific message types, and this is definitely the recommended approach
của trình xác thực và bưu kiện cho các loại tin nhắn cụ thể và đây chắc chắn là cách tiếp cận được khuyến nghị


00:02:40,890 --> 00:02:41,210
here.
ở đây.


00:02:41,220 --> 00:02:46,770
But for the sake of simplicity, I'll leave that out for now and assume that the validation and parsing
Nhưng vì mục đích đơn giản, tôi sẽ bỏ qua điều đó ngay bây giờ và cho rằng việc xác thực và phân tích cú pháp


00:02:46,770 --> 00:02:48,940
are coded right into the business logic.
được mã hóa ngay vào logic kinh doanh.


00:02:48,960 --> 00:02:51,660
And last but not least, the data access layer.
Và cuối cùng nhưng không kém phần quan trọng, lớp truy cập dữ liệu.


00:02:51,690 --> 00:02:57,330
This is an extremely important layer in this service and it's responsible for saving the handled messages
Đây là một lớp cực kỳ quan trọng trong dịch vụ này và nó có trách nhiệm lưu các tin nhắn đã xử lý


00:02:57,330 --> 00:02:58,560
into the data store.
vào kho dữ liệu.


00:02:58,590 --> 00:03:03,150
This is very relevant here and we will leave it as part of our layered architecture.
Điều này rất có liên quan ở đây và chúng tôi sẽ để nó như một phần của kiến trúc phân lớp của chúng tôi.


00:03:03,300 --> 00:03:08,730
And of course, let's add the logging engine, which similar to the one we used in the receiver, is
Và tất nhiên, chúng ta hãy thêm công cụ ghi nhật ký, tương tự như công cụ chúng ta sử dụng trong máy thu, là


00:03:08,730 --> 00:03:11,310
vertical and accessible by all the layers.
theo chiều dọc và có thể tiếp cận được bằng tất cả các lớp.


00:03:11,520 --> 00:03:12,390
Great.
Tuyệt vời.


00:03:12,390 --> 00:03:15,660
So now we have the architecture for the handler service.
Vì vậy, bây giờ chúng ta có kiến trúc cho dịch vụ xử lý.


00:03:15,690 --> 00:03:17,970
Let's move on to the next service.
Chúng ta hãy chuyển sang dịch vụ tiếp theo.


