1
00:00:00,580 --> 00:00:05,860
So as you probably guessed, the first thing you should do as an architect is to define the requirements.

2
00:00:05,890 --> 00:00:11,080
These requirements are very important for your work, and they dictate what the architecture will look

3
00:00:11,080 --> 00:00:11,620
like.

4
00:00:11,710 --> 00:00:13,600
Okay, so let's do that.

5
00:00:13,630 --> 00:00:16,700
You probably remember there are two types of requirements.

6
00:00:16,720 --> 00:00:20,320
Functional requirements and non-functional requirements.

7
00:00:20,680 --> 00:00:26,290
The functional requirements state what the system should do while the non-functional requirements define

8
00:00:26,290 --> 00:00:28,270
what the system should deal with.

9
00:00:28,450 --> 00:00:30,880
Now, the functional requirements are well defined.

10
00:00:30,880 --> 00:00:36,100
In this case, it looks like the system analysts did a good job and it's quite clear what the system

11
00:00:36,100 --> 00:00:36,800
should do.

12
00:00:36,850 --> 00:00:40,510
Let's summarize the functional requirements in a short bulleted list.

13
00:00:40,540 --> 00:00:49,630
One Receive status updates from Iot devices to store these updates for future use, and three, allow

14
00:00:49,630 --> 00:00:53,710
end users to query the updates and present them with relevant information.

15
00:00:54,490 --> 00:00:56,020
So far, so good.

16
00:00:56,050 --> 00:01:00,140
Now let's go to the more interesting part the non-functional requirements.

17
00:01:00,770 --> 00:01:06,260
Now, before we continue, I would like you to take a moment and think what are the relevant, non-functional

18
00:01:06,260 --> 00:01:07,680
requirements for this system?

19
00:01:07,700 --> 00:01:11,930
What we must know as architects that can influence the architecture.

20
00:01:12,140 --> 00:01:14,750
So I'll give you a few seconds to think about it.

21
00:01:14,780 --> 00:01:19,850
I'll even put some relaxing music for you, and I want you to write down the questions you need to ask

22
00:01:19,850 --> 00:01:23,060
the customer in order to figure out the non-functional requirements.

23
00:01:23,180 --> 00:01:27,100
Feel free to pause the lecture and take as much time as you need.

24
00:01:27,110 --> 00:01:30,320
Write down the questions and then hit resume.

25
00:01:42,160 --> 00:01:43,080
Okay, great.

26
00:01:43,090 --> 00:01:44,140
Welcome back.

27
00:01:44,290 --> 00:01:47,130
So what are the questions we need to ask the customer?

28
00:01:47,140 --> 00:01:53,440
Well, here they are, first and foremost, since the system is going to receive messages from an Iot

29
00:01:53,440 --> 00:01:57,760
devices, we should expect there will be a lot of messages.

30
00:01:57,910 --> 00:02:03,460
Now, the number of messages has great effect on the system design, and it will help us know these

31
00:02:03,460 --> 00:02:05,440
crucial non-functional factors.

32
00:02:06,490 --> 00:02:07,280
The load.

33
00:02:07,300 --> 00:02:09,729
How many concurrent messages we should expect?

34
00:02:09,940 --> 00:02:11,220
Data volume.

35
00:02:11,230 --> 00:02:14,680
How many messages should be stored in the system's data store.

36
00:02:15,070 --> 00:02:18,910
These factors are translated into two questions we need to ask.

37
00:02:18,970 --> 00:02:23,950
First, how many concurrent messages should the system expect in peak time?

38
00:02:24,040 --> 00:02:28,950
And second, what is the total number of expected messages per month?

39
00:02:29,020 --> 00:02:35,290
In addition to make our calculations more accurate, we should also ask what is the average size of

40
00:02:35,290 --> 00:02:36,050
a message?

41
00:02:36,070 --> 00:02:40,690
Now we can assume the client will need some time to figure out the answer to these questions.

42
00:02:40,690 --> 00:02:47,710
So let's skip a few days forward and then we will get a response, which is this Max Concurrent messages,

43
00:02:47,740 --> 00:02:52,750
500 total number of messages per month, 15 million.

44
00:02:53,500 --> 00:02:56,560
Average message size 300 bytes.

45
00:02:57,040 --> 00:02:58,120
Okay, great.

46
00:02:58,150 --> 00:03:00,220
Now we have something to work with.

47
00:03:00,490 --> 00:03:02,830
Let's open a calculator and do some math.

48
00:03:03,730 --> 00:03:11,320
15 million messages per month with average size of 300 bytes per message gives us roughly 4500MB per

49
00:03:11,320 --> 00:03:11,890
month.

50
00:03:11,920 --> 00:03:18,070
Let's multiply this by 12 to get the yearly number and we are looking at 54GB per year.

51
00:03:18,100 --> 00:03:25,240
This is good since 54GB in today's storage is not a lot and almost every database can handle it easily.

52
00:03:25,600 --> 00:03:32,140
And by that we calculating the data volume non-functional requirements, which is 54GB annually.

53
00:03:32,260 --> 00:03:39,550
Now note that I assume the retention policy here is infinite, meaning data is never archived or deleted

54
00:03:39,550 --> 00:03:41,260
in data intensive application.

55
00:03:41,260 --> 00:03:44,560
This is usually not the case and the data can expire.

56
00:03:44,590 --> 00:03:46,990
In our application this is not the case.

57
00:03:47,170 --> 00:03:51,370
So the data volume non-functional requirement looks like a non-issue.

58
00:03:51,670 --> 00:03:56,980
The load, however, is a completely different story with 500 concurrent messages.

59
00:03:56,980 --> 00:03:58,900
This is a quite busy system.

60
00:03:58,900 --> 00:04:01,660
We will have to find a way to cope with this number.

61
00:04:01,660 --> 00:04:05,450
Since a regular web application will have a hard time under this load.

62
00:04:05,480 --> 00:04:11,270
Of course we can always scale out and add dozens of servers, but that's not always possible.

63
00:04:11,270 --> 00:04:17,000
We will prefer to design the system such that the software itself will be able to work properly under

64
00:04:17,000 --> 00:04:17,870
such a load.

65
00:04:18,980 --> 00:04:24,080
So the load non-functional requirement is set and it is 500 concurrent messages.

66
00:04:24,530 --> 00:04:25,640
As we will see later.

67
00:04:25,640 --> 00:04:29,480
The number is slightly higher, but we will leave it this way for now.

68
00:04:29,720 --> 00:04:35,810
Okay, next next thing we need to know is how tolerant is the system for message loss?

69
00:04:35,840 --> 00:04:41,720
In other words, if not every message is received and some are lost due to network problems or other

70
00:04:41,720 --> 00:04:43,700
errors, is that a problem?

71
00:04:44,030 --> 00:04:47,030
Now, the first instinct is always to answer.

72
00:04:47,030 --> 00:04:50,360
Sure, we cannot lose any message, but let's think about it.

73
00:04:50,360 --> 00:04:52,610
This system receives status updates.

74
00:04:52,640 --> 00:04:55,460
Each device sends update every few seconds.

75
00:04:55,460 --> 00:04:57,950
What really happens when a message is lost?

76
00:04:57,980 --> 00:04:59,330
Not much, actually.

77
00:04:59,360 --> 00:05:04,610
A few seconds later, another message will arrive with new update, which will anyway make the previous

78
00:05:04,610 --> 00:05:05,690
message obsolete.

79
00:05:05,690 --> 00:05:10,160
So when thinking about it, the system is quite tolerant for messages loss.

80
00:05:10,190 --> 00:05:11,330
No harm is done.

81
00:05:11,330 --> 00:05:15,140
If a message is lost and chances are the user will not even feel that.

82
00:05:15,170 --> 00:05:20,600
Now, of course, we are not talking here on a system wide catastrophe that drops all messages, but

83
00:05:20,600 --> 00:05:26,360
on a rare cases that might result a single loss for every 1000 successfully received messages.

84
00:05:26,720 --> 00:05:31,400
So the message loss non-functional requirement can be defined as 99%.

85
00:05:31,430 --> 00:05:38,380
Note that in this kind of non-functional requirement, there is a huge difference between 100% and 99%.

86
00:05:38,390 --> 00:05:43,880
It may look like a small difference, only a single digit, but it actually makes all the difference,

87
00:05:43,880 --> 00:05:45,170
as we will see later.

88
00:05:45,650 --> 00:05:46,310
Okay.

89
00:05:46,310 --> 00:05:54,470
Next, the next question we need to ask is how many users will the system have and how many concurrent

90
00:05:54,470 --> 00:05:56,000
users should we expect?

91
00:05:56,030 --> 00:06:01,190
These questions are similar to the first questions asked about the messages, and they serve the same

92
00:06:01,190 --> 00:06:01,700
purpose.

93
00:06:01,700 --> 00:06:05,330
They help us assess the expected load and data volume of the system.

94
00:06:05,330 --> 00:06:10,970
However, we can expect the numbers to be much lower than the number of the messages, since there are

95
00:06:10,970 --> 00:06:16,970
much more devices than users and the users do not query the system every few seconds, and the numbers

96
00:06:16,970 --> 00:06:19,400
we get from the client reflect just that.

97
00:06:19,490 --> 00:06:25,700
The client expects the system to have a total of 2 million users three years from now with no more than

98
00:06:25,700 --> 00:06:27,320
40 concurrent users.

99
00:06:27,350 --> 00:06:31,130
Now it's important to understand what concurrent users mean.

100
00:06:31,310 --> 00:06:37,580
It does not mean how many users are currently using the system, but rather how many users are actively

101
00:06:37,580 --> 00:06:38,990
accessing the server.

102
00:06:39,170 --> 00:06:41,060
This distinction is important.

103
00:06:41,060 --> 00:06:47,000
When a user looks at the dashboard, he uses the system but does not access the server.

104
00:06:47,030 --> 00:06:53,270
The dashboard is already on the user's screen so the server does nothing when calculating load.

105
00:06:53,270 --> 00:06:59,780
We are interested only in the actual work the server is doing, so we define concurrent users as a number

106
00:06:59,780 --> 00:07:03,410
of users that actually access the server on the same time.

107
00:07:04,280 --> 00:07:10,310
And since most users won't just sit by their PC or phone and hammer the server in their free time,

108
00:07:10,310 --> 00:07:14,000
we can comfortably assume quite a low number of concurrent users.

109
00:07:14,000 --> 00:07:20,330
And that's the reason the concurrent user number is only 40, and that makes the load non-functional

110
00:07:20,330 --> 00:07:22,670
requirement to be 540.

111
00:07:22,700 --> 00:07:26,810
That's a 500 concurrent messages plus the 40 user's actions.

112
00:07:27,260 --> 00:07:32,330
The last question we need to ask is what is the SLA required for this system?

113
00:07:32,330 --> 00:07:37,390
Or in other words, what is the maximum downtime allowed for this system?

114
00:07:37,400 --> 00:07:43,060
Now, instinctively most clients will say that they expect 100% uptime.

115
00:07:43,070 --> 00:07:45,440
Problem is, this is not possible.

116
00:07:45,440 --> 00:07:52,670
Even the largest, most sophisticated data centers in the world do not commit to 100% uptime crashes

117
00:07:52,670 --> 00:07:55,730
are part of the software world and we should accept that.

118
00:07:55,730 --> 00:07:58,250
So we need to have a more realistic figure.

119
00:07:58,430 --> 00:08:03,230
Now, it's also important to note that an SLA is comprised from not only software.

120
00:08:03,570 --> 00:08:09,270
There are a lot of factors that affect it, such as hardware, network, database servers, virtualization

121
00:08:09,270 --> 00:08:10,470
engines and more.

122
00:08:10,500 --> 00:08:15,930
Usually you, the architect, will have no control over these factors and you have to clarify this to

123
00:08:15,930 --> 00:08:16,560
the customer.

124
00:08:16,590 --> 00:08:20,550
I remember one client of mine that always talked about the high SLA, he demanded.

125
00:08:20,580 --> 00:08:26,460
I then asked for a meeting with a database team to find out what is the SLA, the commit to to my.

126
00:08:26,460 --> 00:08:27,550
And his surprise.

127
00:08:27,570 --> 00:08:33,090
Not only the team could not commit to any SLA, they didn't even know what an SLA is.

128
00:08:33,120 --> 00:08:36,510
Remember this when discussing SLA figures with a client.

129
00:08:36,659 --> 00:08:44,190
What I usually do is define three levels of SLA, silver, gold and platinum and ask the client which

130
00:08:44,190 --> 00:08:50,340
level he requires for the software platinum level, which is what most of the clients choose, dictates

131
00:08:50,340 --> 00:08:56,560
that the system should be fully stateless, easily scaled out, and utilize extensive logging and monitoring.

132
00:08:56,580 --> 00:09:02,340
There is no point in discussing specific uptime numbers such as 97% versus 99%.

133
00:09:02,370 --> 00:09:06,340
There are so many other factors that make this number meaningless.

134
00:09:06,790 --> 00:09:11,260
I highly recommend adopting the three Levels method and using it with your client.

135
00:09:11,260 --> 00:09:16,300
It is up to you to decide what is included in each level and what is the impact on the development time

136
00:09:16,300 --> 00:09:16,960
and cost.

137
00:09:16,960 --> 00:09:19,750
But make sure you have this definition in place.

138
00:09:19,960 --> 00:09:26,770
So in our case, since the system shows live status updates, the client defined it as a platinum system,

139
00:09:26,770 --> 00:09:31,360
which means it should have all the characteristics of a reliable and redundant system.

140
00:09:31,900 --> 00:09:37,170
So to conclude, here are the non-functional requirements defined for this system.

141
00:09:37,180 --> 00:09:42,190
We walked through the exact flow of figuring them out and they are now fully documented.

142
00:09:42,220 --> 00:09:46,450
I want to emphasize again the importance of accurate, non-functional requirements.

143
00:09:46,480 --> 00:09:48,330
As we will see later in this section.

144
00:09:48,340 --> 00:09:53,680
These requirements have great influence on the architecture and should be thoroughly discussed and documented.

145
00:09:53,710 --> 00:09:59,110
Modifying non-functional requirements after the project has begun is always a bad idea.

146
00:09:59,620 --> 00:10:00,550
Okay, great.

147
00:10:00,550 --> 00:10:02,700
So we have the requirements of the project.

148
00:10:02,710 --> 00:10:04,360
Let's move on.

