1
00:00:00,230 --> 00:00:04,100
The next task after mapping the requirements is mapping the components.

2
00:00:04,130 --> 00:00:09,740
In this task, we decide what are the components that take part in our application while remembering

3
00:00:09,740 --> 00:00:15,080
that a component is an autonomous piece of code that runs in its own process and has its own compute

4
00:00:15,080 --> 00:00:15,920
resources.

5
00:00:16,070 --> 00:00:20,300
The best way to define the components is to look back at the functional requirements.

6
00:00:20,480 --> 00:00:22,970
We see there are three main requirements.

7
00:00:23,000 --> 00:00:29,480
One receive status updates from Iot devices to store these updates for future use.

8
00:00:29,480 --> 00:00:30,530
And three.

9
00:00:30,560 --> 00:00:35,420
Allow end users to query the updates and present them with the relevant information.

10
00:00:35,780 --> 00:00:39,230
And also, let's remind ourselves the expected load.

11
00:00:39,230 --> 00:00:43,820
We are talking here about 500 concurrent messages and 40 concurrent users.

12
00:00:43,940 --> 00:00:46,720
Now, there is an important distinction here.

13
00:00:46,730 --> 00:00:52,760
We are looking at two completely different tasks, receiving messages and responding to client requests.

14
00:00:52,790 --> 00:00:58,700
These two tasks perform separate actions, have different non-functional requirements and work against

15
00:00:58,700 --> 00:01:00,150
separate entities.

16
00:01:00,240 --> 00:01:06,210
Because of this, the natural choice here is to separate these two tasks to two separate components

17
00:01:06,210 --> 00:01:13,230
one that is responsible for receiving the messages, let's call it receiver and one that waits for user

18
00:01:13,230 --> 00:01:17,710
requests which will be called info provider or simply info.

19
00:01:17,730 --> 00:01:20,430
Since info provider is a little bit too long.

20
00:01:20,970 --> 00:01:23,520
So two components it is.

21
00:01:23,700 --> 00:01:25,440
But wait, that's not all.

22
00:01:25,650 --> 00:01:28,890
There is a very important aspect that is hiding here.

23
00:01:28,920 --> 00:01:31,920
We know the receiver is going to work under a heavy load.

24
00:01:31,920 --> 00:01:33,940
500 concurrent requests.

25
00:01:33,960 --> 00:01:39,570
That means that one of the important aspects of the receiver is that it needs to release the message

26
00:01:39,570 --> 00:01:45,690
update request as fast as possible because for every millisecond it works on a specific message, there

27
00:01:45,690 --> 00:01:51,360
are more messages waiting to be processed and we don't want to reach a thread starvation situation,

28
00:01:51,360 --> 00:01:56,790
meaning the service will not have enough resources to handle the waiting requests and it will start

29
00:01:56,790 --> 00:01:58,020
throwing exceptions.

30
00:01:58,650 --> 00:02:01,550
So we need to answer request as fast as possible.

31
00:02:01,560 --> 00:02:06,150
But that begs a question what should be done with the request once it received?

32
00:02:06,180 --> 00:02:08,320
There are basically two options here.

33
00:02:08,340 --> 00:02:12,570
First, simply insert the request to a data store as is.

34
00:02:12,870 --> 00:02:18,180
No processing or validation is needed or the messages have the same format and we all live happily ever

35
00:02:18,180 --> 00:02:18,780
after.

36
00:02:18,810 --> 00:02:21,270
This, as you can guess, is quite rare.

37
00:02:21,600 --> 00:02:27,690
The second option Every message needs to be validated and processed and just then can be stored for

38
00:02:27,690 --> 00:02:28,560
later use.

39
00:02:28,710 --> 00:02:33,890
Now this choice is dictated by the way the Iot devices send their messages.

40
00:02:33,900 --> 00:02:39,390
We will need to go to the client and ask her what is the exact format of the messages and what processing

41
00:02:39,390 --> 00:02:40,540
is required on them.

42
00:02:40,560 --> 00:02:42,300
So let's go ask her.

43
00:02:42,450 --> 00:02:45,510
Two days later, she comes back with the following answer.

44
00:02:45,750 --> 00:02:48,230
There are four types of Iot devices.

45
00:02:48,240 --> 00:02:50,830
Each one of them has its own message format.

46
00:02:50,850 --> 00:02:56,700
Three of them use Json format and one which is an old one uses a fixed format string.

47
00:02:56,730 --> 00:03:02,820
In addition, most of the messages must be validated because the devices software must might be buggy

48
00:03:02,820 --> 00:03:04,860
and we cannot trust it blindly.

49
00:03:06,330 --> 00:03:07,800
That's going to be fun.

50
00:03:08,100 --> 00:03:11,770
So we now know the receiver has the following tasks.

51
00:03:11,790 --> 00:03:16,850
One receives a message obviously to validate the message.

52
00:03:16,860 --> 00:03:24,000
Three pass the message and convert it to a unified format and four save it to the data store.

53
00:03:24,360 --> 00:03:26,740
Let's talk a little on the third task.

54
00:03:26,760 --> 00:03:34,020
This task is super important as it makes our data independent of its source, meaning when we will query

55
00:03:34,020 --> 00:03:39,900
the data, it will always look the same and be of the same format regardless of its source, no matter

56
00:03:39,900 --> 00:03:42,570
from which device the status update was received.

57
00:03:42,600 --> 00:03:48,090
The data is fully accessible to the client and there is no need to format it while querying.

58
00:03:49,020 --> 00:03:54,360
This concept is extremely important in systems that receive data from different sources, each with

59
00:03:54,360 --> 00:03:55,210
its own format.

60
00:03:55,230 --> 00:04:02,040
The data must be stored in a unified format regardless of its origin, to allow fast and efficient query.

61
00:04:02,340 --> 00:04:04,650
Okay, so back to the components.

62
00:04:04,680 --> 00:04:07,860
We should perform these tasks to decide on this.

63
00:04:07,890 --> 00:04:13,620
We have to remember that the receiver must release the request as fast as possible so we wouldn't want

64
00:04:13,620 --> 00:04:15,050
it to perform additional tasks.

65
00:04:15,060 --> 00:04:19,820
We want it to get the message, save it for later use and end the request.

66
00:04:19,829 --> 00:04:24,960
So the receiver is going to be responsible for receiving the message and that's all we are going to

67
00:04:24,960 --> 00:04:25,290
handle.

68
00:04:25,290 --> 00:04:26,490
The other tasks.

69
00:04:26,520 --> 00:04:29,310
Well, obviously not the info service.

70
00:04:29,340 --> 00:04:32,220
It has nothing to do with handling incoming messages.

71
00:04:32,220 --> 00:04:34,770
It handles only users requests.

72
00:04:34,860 --> 00:04:38,280
So it looks like we are looking here at additional components.

73
00:04:38,640 --> 00:04:43,230
Okay, so we have a new component that will handle the validation.

74
00:04:43,350 --> 00:04:49,140
Do we want another one to handle the parsing or will we give this responsibility to the same component?

75
00:04:49,350 --> 00:04:53,600
Well, that's a good question and actually there is no definite answer to it.

76
00:04:53,610 --> 00:04:58,620
Some will say that a component must be responsible for one and only one task.

77
00:04:58,620 --> 00:04:59,700
And therefore.

78
00:04:59,860 --> 00:05:03,010
This should be separate component for validation and processing.

79
00:05:03,160 --> 00:05:09,100
Others will say that since validation is quite a small task and it's not an atomic one, there is no

80
00:05:09,100 --> 00:05:10,120
value for validation.

81
00:05:10,120 --> 00:05:11,320
If there is no parsing.

82
00:05:11,350 --> 00:05:14,470
Then they can both be performed by the same component.

83
00:05:14,620 --> 00:05:18,130
In this case, I think the latter approach is the right one.

84
00:05:18,160 --> 00:05:23,590
Validation and parsing always go hand in hand and from a higher point of view they are part of the same

85
00:05:23,590 --> 00:05:24,160
service.

86
00:05:24,190 --> 00:05:29,950
In addition, any additional component is another process we need to maintain and there is no justification

87
00:05:29,950 --> 00:05:32,380
for this in this specific scenario.

88
00:05:32,410 --> 00:05:39,190
So to summarize, we have three components receiver that receives the message handler that validates

89
00:05:39,190 --> 00:05:45,820
and processes it and then stores it for later use and info that allows users to query the data.

90
00:05:45,970 --> 00:05:47,920
But wait, that's not all.

91
00:05:48,100 --> 00:05:52,870
Remember when we talked about logging and monitoring that it's always a good idea to have a central

92
00:05:52,870 --> 00:05:53,860
logging service.

93
00:05:53,860 --> 00:05:55,150
So let's add one.

94
00:05:56,270 --> 00:06:01,970
This service is where all the logs are sent to, and it enables us to have a complete view of the applications

95
00:06:01,970 --> 00:06:02,660
activity.

96
00:06:02,690 --> 00:06:08,210
This is extremely important, especially in applications like ours where there are several components

97
00:06:08,210 --> 00:06:10,460
and each one has its own responsibility.

98
00:06:10,490 --> 00:06:16,070
Using a central logging service gives us a coherent view of all the flows in the system, regardless

99
00:06:16,070 --> 00:06:18,500
of the specific components they were run in.

100
00:06:18,950 --> 00:06:22,010
Okay, so we have the components of the application.

101
00:06:22,040 --> 00:06:23,720
One last thing.

102
00:06:24,050 --> 00:06:27,210
Obviously the status updates should be saved somewhere.

103
00:06:27,230 --> 00:06:32,900
We need some kind of data store where the handler will save the past updates and the info will be able

104
00:06:32,900 --> 00:06:33,860
to query for them.

105
00:06:33,890 --> 00:06:38,360
So let's add a data store shared between those services.

106
00:06:38,510 --> 00:06:39,680
Okay, great.

107
00:06:39,710 --> 00:06:42,950
Next, let's talk about the messaging between them.

