1
00:00:00,350 --> 00:00:02,540
Our next service is the handler.

2
00:00:02,630 --> 00:00:08,690
As you probably remember, the handler is responsible for validating the messages, passing them and

3
00:00:08,690 --> 00:00:10,910
storing them in the system's data store.

4
00:00:11,060 --> 00:00:16,580
One of the major factors that will influence the handlers design is the fact that the messages to be

5
00:00:16,580 --> 00:00:21,110
handled are waiting in a queue after being placed there by the receiver.

6
00:00:21,170 --> 00:00:24,950
This fact dictates the type of application of the handler service.

7
00:00:24,980 --> 00:00:27,920
Remember how we selected the type of logging service?

8
00:00:27,950 --> 00:00:31,890
Well, the handler service is quite similar in the logging service.

9
00:00:31,910 --> 00:00:37,100
The log records were pulled from a queue by the service and then stored in a data store.

10
00:00:37,130 --> 00:00:39,170
The handler service works the same.

11
00:00:39,170 --> 00:00:45,800
It pulls the messages from a queue, handles them, and store them in a data store in the logging service.

12
00:00:45,830 --> 00:00:51,680
This fact caused us to decide it's going to be a Windows service because there is no request response

13
00:00:51,680 --> 00:00:55,940
execution model here, but a service that is always on and pulls the queue.

14
00:00:56,690 --> 00:01:00,000
And the same goes for the handler service.

15
00:01:00,030 --> 00:01:02,310
It is not a request response service.

16
00:01:02,340 --> 00:01:05,190
It's always active and is busy pulling the queue.

17
00:01:05,220 --> 00:01:09,240
So the handler service is going to be a Windows service too.

18
00:01:09,330 --> 00:01:10,050
Good.

19
00:01:10,320 --> 00:01:12,810
Next, the technology stack.

20
00:01:12,840 --> 00:01:17,280
By now we already have two services for which we determined the technology stack.

21
00:01:17,310 --> 00:01:19,350
The logging service and the receiver.

22
00:01:19,380 --> 00:01:21,750
In both we went for Dotnet core.

23
00:01:21,900 --> 00:01:27,240
Since it looks like there is no real reason to select other technology for the handler service since

24
00:01:27,240 --> 00:01:32,460
there are no special requirements and it will be developed by the same teams who developed the other

25
00:01:32,460 --> 00:01:36,570
services, we can be quite comfortable in using Dotnet core here too.

26
00:01:36,840 --> 00:01:38,190
Okay, good.

27
00:01:38,280 --> 00:01:40,140
And now to the architecture.

28
00:01:40,140 --> 00:01:44,670
We are going to use the traditional layered architecture pattern here, same as in other services.

29
00:01:44,700 --> 00:01:47,550
Let's examine what layers are relevant here.

30
00:01:47,580 --> 00:01:49,860
First service interface.

31
00:01:50,100 --> 00:01:52,050
Well, we don't have one.

32
00:01:52,080 --> 00:01:54,930
This service does not expose any API.

33
00:01:54,960 --> 00:01:58,170
It is always active and initiates the calls to the queue.

34
00:01:58,200 --> 00:02:01,110
It's not waiting for request from other services.

35
00:02:01,140 --> 00:02:06,220
So this layer instead of exposing API will orchestrate the work against the queue.

36
00:02:06,240 --> 00:02:11,520
Specifically, this layer is responsible for timing the polling of the queue and executing the actual

37
00:02:11,520 --> 00:02:12,130
polling.

38
00:02:12,150 --> 00:02:15,750
Let's call this layer polling same as in the logging service.

39
00:02:16,050 --> 00:02:16,650
Good.

40
00:02:16,860 --> 00:02:19,080
Next layer is the business logic layer.

41
00:02:19,080 --> 00:02:22,440
And yes, the handler service definitely needs such a layer.

42
00:02:22,470 --> 00:02:27,780
This layer is responsible for validating and processing the messages which are typical jobs for business

43
00:02:27,780 --> 00:02:28,620
logic layer.

44
00:02:28,710 --> 00:02:34,830
Now note that in a real world app we would have discussed a plugin mechanism to allow dynamic loading

45
00:02:34,830 --> 00:02:40,890
of validators and parcels for specific message types, and this is definitely the recommended approach

46
00:02:40,890 --> 00:02:41,210
here.

47
00:02:41,220 --> 00:02:46,770
But for the sake of simplicity, I'll leave that out for now and assume that the validation and parsing

48
00:02:46,770 --> 00:02:48,940
are coded right into the business logic.

49
00:02:48,960 --> 00:02:51,660
And last but not least, the data access layer.

50
00:02:51,690 --> 00:02:57,330
This is an extremely important layer in this service and it's responsible for saving the handled messages

51
00:02:57,330 --> 00:02:58,560
into the data store.

52
00:02:58,590 --> 00:03:03,150
This is very relevant here and we will leave it as part of our layered architecture.

53
00:03:03,300 --> 00:03:08,730
And of course, let's add the logging engine, which similar to the one we used in the receiver, is

54
00:03:08,730 --> 00:03:11,310
vertical and accessible by all the layers.

55
00:03:11,520 --> 00:03:12,390
Great.

56
00:03:12,390 --> 00:03:15,660
So now we have the architecture for the handler service.

57
00:03:15,690 --> 00:03:17,970
Let's move on to the next service.

