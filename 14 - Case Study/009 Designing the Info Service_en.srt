1
00:00:00,290 --> 00:00:03,830
The last service in our system is the info service.

2
00:00:03,950 --> 00:00:07,550
As a refresher, let's remember what the service is supposed to do.

3
00:00:07,790 --> 00:00:13,700
The service allows end users to query the data stored in the data store and displays the data in various

4
00:00:13,700 --> 00:00:14,390
forms.

5
00:00:14,540 --> 00:00:18,200
Note that the service is responsible only for the data retrieval.

6
00:00:18,200 --> 00:00:23,960
It does not display the data that is the responsibility of the client, whatever client it is.

7
00:00:23,990 --> 00:00:27,320
So first, let's decide on the application type here.

8
00:00:27,350 --> 00:00:29,310
Well, that's actually an easy one.

9
00:00:29,330 --> 00:00:34,410
We have a service that should be accessed by various clients in order to perform some queries.

10
00:00:34,490 --> 00:00:37,130
That's a textbook for web API service.

11
00:00:37,130 --> 00:00:43,550
Since Web API is accessible for almost any type of client and it waits for a client request before sending

12
00:00:43,550 --> 00:00:44,350
the response.

13
00:00:44,360 --> 00:00:45,680
So that's settled.

14
00:00:45,710 --> 00:00:47,580
Now to the technology stack.

15
00:00:47,600 --> 00:00:49,880
Here too, the decision is quite easy.

16
00:00:49,910 --> 00:00:55,760
We already decided to use Dotnet core for the receiver service, which is also a web API and there is

17
00:00:55,760 --> 00:00:59,030
no real reason to pick other technology for the info service.

18
00:00:59,030 --> 00:01:02,490
So we are going to use Dotnet core for this one too.

19
00:01:02,940 --> 00:01:04,680
Now to the architecture.

20
00:01:04,920 --> 00:01:08,700
Looking at the classic layered architecture, it looks like a perfect fit.

21
00:01:08,730 --> 00:01:11,100
We need a service interface, obviously.

22
00:01:11,130 --> 00:01:14,610
We definitely need a business logic layer to validate the request.

23
00:01:14,610 --> 00:01:19,170
And of course, we need a data access layer to access the database and retrieve the data.

24
00:01:19,200 --> 00:01:21,180
And let's not forget the logging.

25
00:01:21,480 --> 00:01:23,280
So is that all?

26
00:01:23,370 --> 00:01:25,140
Well, not exactly.

27
00:01:25,140 --> 00:01:30,300
One of the important steps in the architecture phase is to define the exact methods of the API.

28
00:01:30,330 --> 00:01:36,000
Now, we didn't do it in the receiver service since the methods were dictated by the devices.

29
00:01:36,000 --> 00:01:41,100
But here we are in a different situation and we can decide what actions we want to expose as part of

30
00:01:41,100 --> 00:01:41,880
the API.

31
00:01:42,090 --> 00:01:48,030
So after discussing it with the client, it looks like what really interests the end users are two types

32
00:01:48,030 --> 00:01:53,280
of information current status of devices and past events.

33
00:01:54,090 --> 00:02:01,170
Also, end users want to see the status of a specific device as well as a high level view of all the

34
00:02:01,170 --> 00:02:03,300
devices in a specific smart home.

35
00:02:03,570 --> 00:02:07,290
So that means our API should have the following functionality.

36
00:02:07,320 --> 00:02:08,160
One.

37
00:02:08,190 --> 00:02:13,290
Get all the updates for a specific houses devices for a given time range.

38
00:02:13,860 --> 00:02:18,150
Get the updates for a specific device for a given time range.

39
00:02:18,870 --> 00:02:26,430
Get the current status of all the devices in a specific house and get the current status of a specific

40
00:02:26,430 --> 00:02:27,180
device.

41
00:02:27,570 --> 00:02:31,950
Now how would we translate this functionality to rest API actions?

42
00:02:32,370 --> 00:02:37,860
Since this is not a full blown API design course, I won't go through all the factors and considerations

43
00:02:37,860 --> 00:02:44,580
of designing the API, but suffice to say that what really matters are usually two main factors the

44
00:02:44,580 --> 00:02:48,030
API path and the return code and contents.

45
00:02:48,060 --> 00:02:52,020
Don't worry if you don't know exactly what it means, we will build it together.

46
00:02:52,920 --> 00:02:58,980
As you probably remember, Rest API defines the entity or entities to be retrieved with a path that

47
00:02:58,980 --> 00:03:02,750
is part of the URL and using the get http verb.

48
00:03:02,760 --> 00:03:08,970
So for example, if I want to retrieve device number 17, I can use something like this.

49
00:03:10,680 --> 00:03:17,310
And in return get a Json content with the response code 200, which signals that everything is okay

50
00:03:17,310 --> 00:03:19,020
and the query has been performed.

51
00:03:19,050 --> 00:03:23,490
Now how would we design the API to comply with the required functionality?

52
00:03:23,520 --> 00:03:26,130
Let's look again at what we want to retrieve.

53
00:03:26,310 --> 00:03:31,590
We want to get all the updates for a specific houses devices for a given time range.

54
00:03:32,010 --> 00:03:34,830
Let's build the important entities here.

55
00:03:35,100 --> 00:03:42,150
We want to get all the updates for a specific house's devices for a given time range.

56
00:03:42,330 --> 00:03:48,040
Now in Rest API, when we have nested entities, we always start from the outermost one.

57
00:03:48,060 --> 00:03:55,140
In this case this would be the house since it contains the devices which in turn contain the statuses.

58
00:03:55,350 --> 00:03:59,520
So it looks like this will be the right API for this requirement.

59
00:04:00,750 --> 00:04:02,760
Let's look at this URL.

60
00:04:03,240 --> 00:04:06,780
We first look for a house with an ID of house ID.

61
00:04:06,930 --> 00:04:10,750
The client will place here the ID of the house it wants the update for.

62
00:04:11,260 --> 00:04:18,279
Then we tell the API that for this house we want the devices and for the devices we want the updates

63
00:04:18,279 --> 00:04:22,390
and not, for example, the serial number or firmware version.

64
00:04:22,630 --> 00:04:24,580
And what about the time range?

65
00:04:24,610 --> 00:04:27,370
This is set using query string parameters.

66
00:04:27,670 --> 00:04:30,910
Now why are the date parameters not part of the URL?

67
00:04:30,940 --> 00:04:34,750
Why are we passing them as a separate parameters and not like this?

68
00:04:35,620 --> 00:04:37,570
The answer is quite simple.

69
00:04:37,720 --> 00:04:40,810
The URL contains references to actual entities.

70
00:04:40,840 --> 00:04:43,030
There is a house with a specified ID.

71
00:04:43,330 --> 00:04:48,940
There are devices inside this house and these devices have updates.

72
00:04:49,270 --> 00:04:53,950
These are all actual entities that have IDs, properties and functionality.

73
00:04:53,980 --> 00:04:57,010
The time range, on the other hand, is just a parameter.

74
00:04:57,010 --> 00:04:58,360
It's not entity.

75
00:04:58,390 --> 00:05:03,190
The from and to are merely values that help us retrieve the correct updates.

76
00:05:03,190 --> 00:05:05,770
And because of that they are not part of the URL.

77
00:05:05,800 --> 00:05:10,060
They are not entities but only parameters and therefore are passed as such.

78
00:05:10,450 --> 00:05:15,420
Okay, so we have the API path, but what should it return?

79
00:05:15,450 --> 00:05:20,550
Well, as we said before, it's extremely important to clearly define what would be the response code

80
00:05:20,550 --> 00:05:22,320
for every situation in the API.

81
00:05:22,560 --> 00:05:28,920
So for example, when there are actual updates to be returned, the response code should be 200, which

82
00:05:28,920 --> 00:05:29,910
is okay.

83
00:05:30,180 --> 00:05:32,940
But what should be returned when the house was not found?

84
00:05:32,970 --> 00:05:38,430
What should happen if the client made a mistake and instead of asking for House number 101, it asked

85
00:05:38,430 --> 00:05:41,430
for 102 and there is no such a house.

86
00:05:41,760 --> 00:05:46,950
Well, in this case the API should return 404, which is not found.

87
00:05:47,100 --> 00:05:51,750
When the client will get this response code, it will know something was wrong with the data it sent

88
00:05:51,750 --> 00:05:54,780
and perhaps try again, this time with the correct ID.

89
00:05:55,260 --> 00:06:01,260
So as you can see, response codes play a significant role in the API design and you should thoroughly

90
00:06:01,260 --> 00:06:02,190
think about them.

91
00:06:02,190 --> 00:06:07,620
Some junior architects do not understand the importance of response codes and always return 200.

92
00:06:07,620 --> 00:06:11,920
Okay from the API regardless of the actual outcome of the request.

93
00:06:11,950 --> 00:06:15,790
Be aware of that and always return the correct response code.

94
00:06:16,300 --> 00:06:17,440
Okay, great.

95
00:06:17,440 --> 00:06:20,740
So we know how the first API method should look like.

96
00:06:20,860 --> 00:06:22,060
In this table.

97
00:06:22,060 --> 00:06:26,860
You can see all the methods we discussed complete with their path and response code options.

98
00:06:26,890 --> 00:06:31,330
Take a good look at it and make sure you fully understand why they are designed like this.

99
00:06:31,360 --> 00:06:36,190
Now this table is extremely important in the architecture of the service and should be part of the architecture

100
00:06:36,190 --> 00:06:36,790
document.

101
00:06:36,820 --> 00:06:42,520
Be sure to include it there as it will guide the developers about the actual implementation of the service.

102
00:06:43,120 --> 00:06:43,900
Okay, great.

103
00:06:43,930 --> 00:06:47,770
We now have the architecture of this service in place and we can go on.

