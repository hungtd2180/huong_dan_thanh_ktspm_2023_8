1
00:00:00,290 --> 00:00:03,830
Dịch vụ cuối cùng trong hệ thống của chúng tôi là dịch vụ thông tin.

2
00:00:03,950 --> 00:00:07,550
Để ôn lại, chúng ta hãy cùng nhớ lại mục đích của dịch vụ này.

3
00:00:07,790 --> 00:00:13,700
Dịch vụ này cho phép người dùng cuối truy vấn dữ liệu được lưu trữ trong kho dữ liệu và hiển thị dữ liệu theo nhiều cách khác nhau

4
00:00:13,700 --> 00:00:14,390
hình thức.

5
00:00:14,540 --> 00:00:18,200
Xin lưu ý rằng dịch vụ chỉ chịu trách nhiệm truy xuất dữ liệu.

6
00:00:18,200 --> 00:00:23,960
Nó không hiển thị dữ liệu thuộc trách nhiệm của khách hàng, bất kể đó là khách hàng nào.

7
00:00:23,990 --> 00:00:27,320
Trước tiên, chúng ta hãy quyết định loại ứng dụng ở đây.

8
00:00:27,350 --> 00:00:29,310
Vâng, thực ra thì câu hỏi đó dễ thôi.

9
00:00:29,330 --> 00:00:34,410
Chúng tôi có một dịch vụ mà nhiều khách hàng có thể truy cập để giải đáp một số thắc mắc.

10
00:00:34,490 --> 00:00:37,130
Đó là sách giáo khoa về dịch vụ API web.

11
00:00:37,130 --> 00:00:43,550
Vì Web API có thể truy cập được đối với hầu hết mọi loại máy khách và nó chờ yêu cầu của máy khách trước khi gửi

12
00:00:43,550 --> 00:00:44,350
phản hồi.

13
00:00:44,360 --> 00:00:45,680
Vậy là xong.

14
00:00:45,710 --> 00:00:47,580
Bây giờ đến phần công nghệ.

15
00:00:47,600 --> 00:00:49,880
Ở đây, quyết định cũng khá dễ dàng.

16
00:00:49,910 --> 00:00:55,760
Chúng tôi đã quyết định sử dụng Dotnet core cho dịch vụ thu, đây cũng là một API web và có

17
00:00:55,760 --> 00:00:59,030
không có lý do thực sự nào để chọn công nghệ khác cho dịch vụ thông tin.

18
00:00:59,030 --> 00:01:02,490
Vì vậy, chúng ta cũng sẽ sử dụng Dotnet core cho mục đích này.

19
00:01:02,940 --> 00:01:04,680
Bây giờ đến phần kiến trúc.

20
00:01:04,920 --> 00:01:08,700
Nhìn vào kiến trúc nhiều lớp cổ điển, có vẻ như nó hoàn toàn phù hợp.

21
00:01:08,730 --> 00:01:11,100
Rõ ràng là chúng ta cần một giao diện dịch vụ.

22
00:01:11,130 --> 00:01:14,610
Chúng ta chắc chắn cần một lớp logic kinh doanh để xác thực yêu cầu.

23
00:01:14,610 --> 00:01:19,170
Và tất nhiên, chúng ta cần một lớp truy cập dữ liệu để truy cập cơ sở dữ liệu và lấy dữ liệu.

24
00:01:19,200 --> 00:01:21,180
Và chúng ta đừng quên việc ghi nhật ký.

25
00:01:21,480 --> 00:01:23,280
Vậy là hết rồi phải không?

26
00:01:23,370 --> 00:01:25,140
Thực ra không hẳn vậy.

27
00:01:25,140 --> 00:01:30,300
Một trong những bước quan trọng trong giai đoạn kiến trúc là xác định phương thức chính xác của API.

28
00:01:30,330 --> 00:01:36,000
Hiện tại, chúng tôi không thực hiện điều đó trong dịch vụ thu vì các phương pháp được thiết bị quyết định.

29
00:01:36,000 --> 00:01:41,100
Nhưng ở đây chúng ta đang ở trong một tình huống khác và chúng ta có thể quyết định những hành động nào chúng ta muốn phơi bày như một phần của

30
00:01:41,100 --> 00:01:41,880
API.

31
00:01:42,090 --> 00:01:48,030
Vì vậy, sau khi thảo luận với khách hàng, có vẻ như điều thực sự khiến người dùng cuối quan tâm là hai loại

32
00:01:48,030 --> 00:01:53,280
thông tin về trạng thái hiện tại của thiết bị và các sự kiện trong quá khứ.

33
00:01:54,090 --> 00:02:01,170
Ngoài ra, người dùng cuối muốn xem trạng thái của một thiết bị cụ thể cũng như chế độ xem cấp cao của tất cả

34
00:02:01,170 --> 00:02:03,300
các thiết bị trong một ngôi nhà thông minh cụ thể.

35
00:02:03,570 --> 00:02:07,290
Điều đó có nghĩa là API của chúng ta phải có chức năng sau.

36
00:02:07,320 --> 00:02:08,160
Một.

37
00:02:08,190 --> 00:02:13,290
Nhận tất cả các bản cập nhật cho các thiết bị nhà cụ thể trong một khoảng thời gian nhất định.

38
00:02:13,860 --> 00:02:18,150
Nhận bản cập nhật cho một thiết bị cụ thể trong một khoảng thời gian nhất định.

39
00:02:18,870 --> 00:02:26,430
Nhận trạng thái hiện tại của tất cả các thiết bị trong một ngôi nhà cụ thể và nhận trạng thái hiện tại của một

40
00:02:26,430 --> 00:02:27,180
thiết bị.

41
00:02:27,570 --> 00:02:31,950
Bây giờ chúng ta sẽ dịch chức năng này sang các hành động API còn lại như thế nào?

42
00:02:32,370 --> 00:02:37,860
Vì đây không phải là khóa học thiết kế API đầy đủ nên tôi sẽ không đề cập đến tất cả các yếu tố và cân nhắc

43
00:02:37,860 --> 00:02:44,580
của việc thiết kế API, nhưng đủ để nói rằng những gì thực sự quan trọng thường là hai yếu tố chính

44
00:02:44,580 --> 00:02:48,030
Đường dẫn API và mã trả về cùng nội dung.

45
00:02:48,060 --> 00:02:52,020
Đừng lo lắng nếu bạn không biết chính xác nó có nghĩa là gì, chúng ta sẽ cùng nhau giải thích.

46
00:02:52,920 --> 00:02:58,980
Như bạn có thể nhớ, Rest API định nghĩa thực thể hoặc các thực thể cần được truy xuất bằng đường dẫn

47
00:02:58,980 --> 00:03:02,750
là một phần của URL và sử dụng động từ get http.

48
00:03:02,760 --> 00:03:08,970
Ví dụ, nếu tôi muốn lấy thiết bị số 17, tôi có thể sử dụng lệnh như thế này.

49
00:03:10,680 --> 00:03:17,310
Và đổi lại nhận được nội dung Json có mã phản hồi là 200, báo hiệu rằng mọi thứ đều ổn

50
00:03:17,310 --> 00:03:19,020
và truy vấn đã được thực hiện.

51
00:03:19,050 --> 00:03:23,490
Bây giờ chúng ta sẽ thiết kế API như thế nào để tuân thủ các chức năng yêu cầu?

52
00:03:23,520 --> 00:03:26,130
Hãy cùng xem lại những gì chúng ta muốn lấy.

53
00:03:26,310 --> 00:03:31,590
Chúng tôi muốn nhận tất cả các bản cập nhật cho các thiết bị nhà cụ thể trong một khoảng thời gian nhất định.

54
00:03:32,010 --> 00:03:34,830
Chúng ta hãy xây dựng các thực thể quan trọng ở đây.

55
00:03:35,100 --> 00:03:42,150
Chúng tôi muốn nhận tất cả các bản cập nhật cho các thiết bị của một ngôi nhà cụ thể trong một khoảng thời gian nhất định.

56
00:03:42,330 --> 00:03:48,040
Bây giờ trong Rest API, khi chúng ta có các thực thể lồng nhau, chúng ta luôn bắt đầu từ thực thể ngoài cùng.

57
00:03:48,060 --> 00:03:55,140
Trong trường hợp này, đây sẽ là ngôi nhà vì nó chứa các thiết bị, các thiết bị này lại chứa các trạng thái.

58
00:03:55,350 --> 00:03:59,520
Vì vậy, có vẻ như đây sẽ là API phù hợp cho yêu cầu này.

59
00:04:00,750 --> 00:04:02,760
Hãy cùng xem URL này.

60
00:04:03,240 --> 00:04:06,780
Đầu tiên chúng ta tìm một ngôi nhà có mã số ID là mã số nhà.

61
00:04:06,930 --> 00:04:10,750
Khách hàng sẽ nhập ID của ngôi nhà mà họ muốn cập nhật vào đây.

62
00:04:11,260 --> 00:04:18,279
Sau đó, chúng tôi cho API biết rằng đối với ngôi nhà này, chúng tôi muốn các thiết bị và đối với các thiết bị, chúng tôi muốn các bản cập nhật

63
00:04:18,279 --> 00:04:22,390
chứ không phải số sê-ri hoặc phiên bản phần mềm chẳng hạn.

64
00:04:22,630 --> 00:04:24,580
Vậy còn phạm vi thời gian thì sao?

65
00:04:24,610 --> 00:04:27,370
Điều này được thiết lập bằng cách sử dụng các tham số chuỗi truy vấn.

66
00:04:27,670 --> 00:04:30,910
Vậy tại sao các tham số ngày tháng lại không phải là một phần của URL?

67
00:04:30,940 --> 00:04:34,750
Tại sao chúng ta lại truyền chúng như các tham số riêng biệt chứ không phải như thế này?

68
00:04:35,620 --> 00:04:37,570
Câu trả lời khá đơn giản.

69
00:04:37,720 --> 00:04:40,810
URL chứa các tham chiếu đến các thực thể thực tế.

70
00:04:40,840 --> 00:04:43,030
Có một ngôi nhà có ID được chỉ định.

71
00:04:43,330 --> 00:04:48,940
Có những thiết bị bên trong ngôi nhà này và những thiết bị này đã được cập nhật.

72
00:04:49,270 --> 00:04:53,950
Đây đều là những thực thể thực tế có ID, thuộc tính và chức năng.

73
00:04:53,980 --> 00:04:57,010
Mặt khác, phạm vi thời gian chỉ là một tham số.

74
00:04:57,010 --> 00:04:58,360
Đó không phải là thực thể.

75
00:04:58,390 --> 00:05:03,190
From và to chỉ là những giá trị giúp chúng ta lấy các bản cập nhật chính xác.

76
00:05:03,190 --> 00:05:05,770
Và vì thế chúng không phải là một phần của URL.

77
00:05:05,800 --> 00:05:10,060
Chúng không phải là các thực thể mà chỉ là các tham số và do đó được truyền như vậy.

78
00:05:10,450 --> 00:05:15,420
Được rồi, chúng ta đã có đường dẫn API, nhưng nó sẽ trả về kết quả gì?

79
00:05:15,450 --> 00:05:20,550
Vâng, như chúng tôi đã nói trước đó, việc xác định rõ ràng mã phản hồi sẽ là gì là cực kỳ quan trọng

80
00:05:20,550 --> 00:05:22,320
cho mọi tình huống trong API.

81
00:05:22,560 --> 00:05:28,920
Vì vậy, ví dụ, khi có các bản cập nhật thực tế cần được trả về, mã phản hồi phải là 200,

82
00:05:28,920 --> 00:05:29,910
được thôi.

83
00:05:30,180 --> 00:05:32,940
Nhưng phải trả lại gì khi không tìm thấy ngôi nhà?

84
00:05:32,970 --> 00:05:38,430
Điều gì sẽ xảy ra nếu khách hàng mắc lỗi và thay vì yêu cầu số nhà 101, họ lại yêu cầu

85
00:05:38,430 --> 00:05:41,430
với giá 102 đô la và không có ngôi nhà nào như vậy.

86
00:05:41,760 --> 00:05:46,950
Vâng, trong trường hợp này API sẽ trả về lỗi 404, lỗi này không được tìm thấy.

87
00:05:47,100 --> 00:05:51,750
Khi máy khách nhận được mã phản hồi này, nó sẽ biết có điều gì đó không ổn với dữ liệu mà nó đã gửi

88
00:05:51,750 --> 00:05:54,780
và có lẽ hãy thử lại, lần này với ID chính xác.

89
00:05:55,260 --> 00:06:01,260
Vì vậy, như bạn có thể thấy, mã phản hồi đóng vai trò quan trọng trong thiết kế API và bạn nên xem xét kỹ lưỡng

90
00:06:01,260 --> 00:06:02,190
hãy nghĩ về chúng.

91
00:06:02,190 --> 00:06:07,620
Một số kiến trúc sư mới vào nghề không hiểu được tầm quan trọng của mã phản hồi và luôn trả về 200.

92
00:06:07,620 --> 00:06:11,920
Được từ API bất kể kết quả thực tế của yêu cầu là gì.

93
00:06:11,950 --> 00:06:15,790
Hãy lưu ý điều đó và luôn trả về mã phản hồi chính xác.

94
00:06:16,300 --> 00:06:17,440
Được rồi, tốt lắm.

95
00:06:17,440 --> 00:06:20,740
Vì vậy, chúng ta biết phương thức API đầu tiên trông như thế nào.

96
00:06:20,860 --> 00:06:22,060
Trong bảng này.

97
00:06:22,060 --> 00:06:26,860
Bạn có thể thấy tất cả các phương pháp chúng ta đã thảo luận cùng với các tùy chọn đường dẫn và mã phản hồi.

98
00:06:26,890 --> 00:06:31,330
Hãy xem xét kỹ và đảm bảo rằng bạn hiểu rõ tại sao chúng được thiết kế như thế này.

99
00:06:31,360 --> 00:06:36,190
Bây giờ bảng này cực kỳ quan trọng trong kiến trúc của dịch vụ và phải là một phần của kiến trúc

100
00:06:36,190 --> 00:06:36,790
tài liệu.

101
00:06:36,820 --> 00:06:42,520
Hãy chắc chắn đưa thông tin này vào đây vì nó sẽ hướng dẫn các nhà phát triển về cách triển khai dịch vụ thực tế.

102
00:06:43,120 --> 00:06:43,900
Được rồi, tốt lắm.

103
00:06:43,930 --> 00:06:47,770
Bây giờ chúng ta đã có kiến trúc của dịch vụ này và có thể tiếp tục.

