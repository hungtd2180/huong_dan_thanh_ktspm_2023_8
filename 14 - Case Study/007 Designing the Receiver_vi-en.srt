00:00:00,200 --> 00:00:02,390
Our next service is a receiver.
Dịch vụ tiếp theo của chúng tôi là một máy thu.


00:00:02,480 --> 00:00:04,430
Let's have a quick refresher.
Chúng ta hãy cùng ôn lại một chút nhé.


00:00:04,730 --> 00:00:10,700
The receiver is a service that receives the messages from the Iot devices and sends them to the queue
Bộ thu là một dịch vụ nhận các tin nhắn từ các thiết bị IoT và gửi chúng đến hàng đợi


00:00:10,700 --> 00:00:12,260
to be handled by the handler.
được xử lý bởi người xử lý.


00:00:12,620 --> 00:00:15,860
So first, what kind of application is this service?
Vậy trước tiên, dịch vụ này là loại ứng dụng gì?


00:00:15,890 --> 00:00:17,400
Well, this is an easy one.
Vâng, đây là một câu hỏi dễ.


00:00:17,420 --> 00:00:21,980
We said the devices send their messages via Http using the rest protocol.
Chúng tôi đã nói rằng các thiết bị gửi tin nhắn của chúng qua Http bằng cách sử dụng giao thức rest.


00:00:21,980 --> 00:00:26,870
So the evident conclusion is that the service is a web API which exposes rest endpoints.
Vì vậy, kết luận hiển nhiên là dịch vụ này là một API web cung cấp các điểm cuối còn lại.


00:00:26,900 --> 00:00:27,470
Good.
Tốt.


00:00:27,650 --> 00:00:29,030
That was really easy.
Thật dễ dàng.


00:00:29,060 --> 00:00:33,020
Let's continue to the next step which is selecting the technology stack.
Chúng ta hãy tiếp tục bước tiếp theo là lựa chọn ngăn xếp công nghệ.


00:00:33,140 --> 00:00:36,180
Well, it turns out that this is also an easy decision.
Vâng, hóa ra đây cũng là một quyết định dễ dàng.


00:00:36,200 --> 00:00:41,420
We already decided that the first service is going to be based in Dotnet core and we will need a really
Chúng tôi đã quyết định rằng dịch vụ đầu tiên sẽ dựa trên Dotnet core và chúng tôi sẽ thực sự cần


00:00:41,420 --> 00:00:43,550
good reason to divert from this decision.
lý do chính đáng để thay đổi quyết định này.


00:00:43,550 --> 00:00:48,710
Using multiple technologies in a single application can create a lot of headaches if done for the wrong
Sử dụng nhiều công nghệ trong một ứng dụng có thể gây ra nhiều đau đầu nếu thực hiện sai cách


00:00:48,710 --> 00:00:49,300
reasons.
lý do.


00:00:49,310 --> 00:00:54,350
So let's see if there is any good reason not to continue with Dotnet core on this service.
Vậy hãy cùng xem có lý do chính đáng nào để không tiếp tục sử dụng Dotnet core trên dịch vụ này không.


00:00:54,470 --> 00:00:58,760
So does Dotnet Core has a good support for web API applications?
Vậy Dotnet Core có hỗ trợ tốt cho các ứng dụng API web không?


00:00:58,790 --> 00:01:01,440
The answer is a resounding yes.
Câu trả lời chắc chắn là có.


00:01:01,470 --> 00:01:06,210
It was built from the ground up to support web API applications using its ASP.
Nó được xây dựng từ đầu để hỗ trợ các ứng dụng API web bằng ASP.


00:01:06,360 --> 00:01:09,210
Net core libraries and has great support for it.
Thư viện Net core và có hỗ trợ tuyệt vời cho nó.


00:01:09,210 --> 00:01:12,240
In addition, its web API performance are great.
Ngoài ra, hiệu suất API web của nó rất tuyệt vời.


00:01:12,570 --> 00:01:20,190
Okay, so it looks like there is no reason not to use Dotnet core here and this is what we will do next.
Được rồi, có vẻ như không có lý do gì để không sử dụng Dotnet core ở đây và đây là những gì chúng ta sẽ làm tiếp theo.


00:01:20,220 --> 00:01:22,740
Let's look at the service architecture.
Hãy cùng xem xét kiến trúc dịch vụ.


00:01:22,770 --> 00:01:25,500
Remember the layered architecture we discussed earlier?
Bạn còn nhớ kiến trúc nhiều lớp mà chúng ta đã thảo luận trước đó không?


00:01:25,530 --> 00:01:28,230
Let's see if it's a good fit for this service.
Hãy xem liệu nó có phù hợp với dịch vụ này không.


00:01:28,350 --> 00:01:34,170
When looking at this diagram that shows the classic three layers architecture, it looks like it's going
Khi nhìn vào sơ đồ này cho thấy kiến trúc ba lớp cổ điển, có vẻ như nó đang tăng lên


00:01:34,170 --> 00:01:35,790
to fit exactly to our service.
để phù hợp chính xác với dịch vụ của chúng tôi.


00:01:35,790 --> 00:01:38,610
But a closer look reveals a problem here.
Nhưng nhìn kỹ hơn sẽ thấy có vấn đề ở đây.


00:01:38,850 --> 00:01:41,790
Take a look at the bottom layer, the data access layer.
Hãy xem lớp dưới cùng, lớp truy cập dữ liệu.


00:01:41,820 --> 00:01:44,520
Remember what our service is supposed to do with the messages.
Hãy nhớ dịch vụ của chúng tôi được cho là sẽ làm gì với các tin nhắn.


00:01:44,520 --> 00:01:46,350
It's going to put them in a queue.
Nó sẽ đưa họ vào hàng đợi.


00:01:46,380 --> 00:01:47,310
That's right.
Đúng vậy.


00:01:47,310 --> 00:01:49,800
There is no data store for this service.
Không có kho dữ liệu cho dịch vụ này.


00:01:49,830 --> 00:01:54,960
Well, you can argue that queue is some kind of data store, but in reality we don't treat it that way.
Vâng, bạn có thể lập luận rằng hàng đợi là một loại kho lưu trữ dữ liệu, nhưng trên thực tế chúng ta không xử lý nó theo cách đó.


00:01:54,960 --> 00:01:58,560
But as a method for passing messages from one point to another.
Nhưng như một phương pháp truyền tải thông điệp từ điểm này đến điểm khác.


00:01:58,590 --> 00:02:03,810
So while our service definitely needs service interface, which is what the devices will talk to and
Vì vậy, trong khi dịch vụ của chúng tôi chắc chắn cần giao diện dịch vụ, đó là những gì các thiết bị sẽ giao tiếp và


00:02:03,810 --> 00:02:08,490
the business logic layer, which will validate the messages, we need to substitute the data access
lớp logic kinh doanh, sẽ xác thực các thông điệp, chúng ta cần thay thế quyền truy cập dữ liệu


00:02:08,490 --> 00:02:10,050
layer with another layer.
lớp này với lớp khác.


00:02:10,410 --> 00:02:16,050
In this case, we will create a new layer called queue handling layer, which will take care of the
Trong trường hợp này, chúng ta sẽ tạo một lớp mới gọi là lớp xử lý hàng đợi, lớp này sẽ xử lý


00:02:16,050 --> 00:02:20,130
various tasks of working with the queue, mainly adding the message to the queue.
nhiều nhiệm vụ khác nhau khi làm việc với hàng đợi, chủ yếu là thêm tin nhắn vào hàng đợi.


00:02:20,130 --> 00:02:23,070
And this is how the updated diagram looks like.
Và đây là sơ đồ được cập nhật trông như thế nào.


00:02:24,300 --> 00:02:27,990
This is actually a great example of the strength of the layered architecture.
Đây thực sự là một ví dụ tuyệt vời về sức mạnh của kiến trúc phân lớp.


00:02:28,020 --> 00:02:33,420
We had to replace an entire functionality of the system using queue instead of data store, and only
Chúng tôi đã phải thay thế toàn bộ chức năng của hệ thống bằng cách sử dụng hàng đợi thay vì kho dữ liệu và chỉ có


00:02:33,420 --> 00:02:35,510
one layer was impacted by this.
một lớp đã bị ảnh hưởng bởi điều này.


00:02:35,520 --> 00:02:39,420
The service interface and business layer have no idea something has changed.
Giao diện dịch vụ và lớp kinh doanh không biết có điều gì đó đã thay đổi.


00:02:39,450 --> 00:02:44,760
The service interface still works with a business layer in the exact same way they worked before.
Giao diện dịch vụ vẫn hoạt động với lớp nghiệp vụ theo đúng cách chúng hoạt động trước đây.


00:02:44,760 --> 00:02:49,800
The change and the business layer will continue working with interfaces representing the data layer
Sự thay đổi và lớp kinh doanh sẽ tiếp tục hoạt động với các giao diện đại diện cho lớp dữ liệu


00:02:49,800 --> 00:02:52,860
and will have no idea the concrete implementation has changed.
và sẽ không biết việc thực hiện cụ thể đã thay đổi.


00:02:53,040 --> 00:02:56,840
So if you ask yourself why do I need a layer architecture?
Vậy nếu bạn tự hỏi tại sao tôi cần một kiến trúc lớp?


00:02:56,850 --> 00:02:58,590
I hope you've got your answer now.
Tôi hy vọng bây giờ bạn đã có câu trả lời.


00:02:59,010 --> 00:03:04,530
Last but not least, we will be adding a logging layer to allow the service to log everything that's
Cuối cùng nhưng không kém phần quan trọng, chúng tôi sẽ thêm một lớp ghi nhật ký để cho phép dịch vụ ghi lại mọi thứ là


00:03:04,530 --> 00:03:06,860
happening during the receiving of the message.
xảy ra trong quá trình nhận tin nhắn.


00:03:06,870 --> 00:03:10,440
Now look how the logging is represented in the diagram.
Bây giờ hãy xem cách ghi nhật ký được thể hiện trong sơ đồ.


00:03:10,440 --> 00:03:14,420
This is not a normal layer and it's not located between other layers.
Đây không phải là một lớp bình thường và nó không nằm giữa các lớp khác.


00:03:14,430 --> 00:03:20,280
It looks like a vertical layer or in more professional jargon, a cross cutting concern.
Nó trông giống như một lớp dọc hoặc theo thuật ngữ chuyên môn hơn, là mối quan tâm xuyên suốt.


00:03:20,460 --> 00:03:25,860
This kind of layer, which is not exactly a layer, is available to all the layers, which is logical
Loại lớp này, không hẳn là một lớp, có sẵn cho tất cả các lớp, điều này là hợp lý


00:03:25,860 --> 00:03:28,170
since all layers must be able to log.
vì tất cả các lớp phải có khả năng ghi nhật ký.


00:03:28,170 --> 00:03:30,540
What is going on with the messages are taking care of.
Những gì đang diễn ra với các tin nhắn đang được chăm sóc.


00:03:30,570 --> 00:03:36,450
So all the layers will have a reference to a logging mechanism and will enjoy this cross-cutting concern.
Vì vậy, tất cả các lớp sẽ có tham chiếu đến cơ chế ghi nhật ký và sẽ tận hưởng mối quan tâm xuyên suốt này.


00:03:37,260 --> 00:03:38,070
Okay.
Được.


00:03:38,310 --> 00:03:43,770
Now this is a good time to look back at the non-functional requirements defined for the system and make
Bây giờ là thời điểm tốt để xem lại các yêu cầu không chức năng được xác định cho hệ thống và đưa ra


00:03:43,770 --> 00:03:46,110
sure our architecture is compatible with them.
chắc chắn kiến trúc của chúng tôi tương thích với chúng.


00:03:46,230 --> 00:03:50,580
There are actually two non-functional requirements that are relevant for this service.
Trên thực tế có hai yêu cầu không chức năng có liên quan đến dịch vụ này.


00:03:50,730 --> 00:03:57,840
The load non-functional requirement, which is set for 540 concurrent requests, while 500 of them are
Yêu cầu tải không chức năng, được thiết lập cho 540 yêu cầu đồng thời, trong khi 500 trong số đó là


00:03:57,840 --> 00:04:04,800
from the devices and the message lost non-functional requirements that stands at 1% message loss allowed.
từ các thiết bị và tin nhắn bị mất các yêu cầu không chức năng được cho phép ở mức 1% tin nhắn bị mất.


00:04:05,070 --> 00:04:09,600
Let's begin with the load requirement at 500 concurrent requests.
Chúng ta hãy bắt đầu với yêu cầu tải ở mức 500 yêu cầu đồng thời.


00:04:09,630 --> 00:04:11,450
We are quite comfortable with our design.
Chúng tôi khá thoải mái với thiết kế của mình.


00:04:11,460 --> 00:04:14,760
The architecture is fully stateless and easily scaled out.
Kiến trúc hoàn toàn không có trạng thái và dễ dàng mở rộng quy mô.


00:04:14,790 --> 00:04:20,060
Adding to that, the fact that the service does not do much other than adding the message to a queue
Thêm vào đó, thực tế là dịch vụ không làm gì nhiều ngoài việc thêm tin nhắn vào hàng đợi


00:04:20,070 --> 00:04:24,870
for the sake of performance and it looks like this service will have no problem complying with this
vì mục đích hiệu suất và có vẻ như dịch vụ này sẽ không gặp vấn đề gì khi tuân thủ 72 điều này


00:04:24,870 --> 00:04:25,500
number.
số


00:04:25,650 --> 00:04:27,990
And what about the message loss requirement?
Và yêu cầu mất tin nhắn thì sao?


00:04:28,020 --> 00:04:34,080
Well, if you remember, we said earlier that the fact that the requirement is for 99% and not 100%
Vâng, nếu bạn còn nhớ, chúng tôi đã nói trước đó rằng thực tế là yêu cầu là 99% chứ không phải 100%


00:04:34,080 --> 00:04:35,070
is a big difference.
là một sự khác biệt lớn.


00:04:35,070 --> 00:04:42,420
And this is where we see that since 1% of the messages can be lost, a standard rest API is good enough.
Và đây là nơi chúng ta thấy rằng vì 1% tin nhắn có thể bị mất nên một API nghỉ ngơi tiêu chuẩn là đủ tốt.


00:04:42,510 --> 00:04:49,530
The chance for more than 1% of requests to be lost in such an API is extremely low and since again the
Xác suất để hơn 1% yêu cầu bị mất trong một API như vậy là cực kỳ thấp và vì một lần nữa


00:04:49,530 --> 00:04:54,060
service does not do much in the first place, we can be comfortable with this requirement.
dịch vụ không làm được nhiều ngay từ đầu, chúng ta có thể thoải mái với yêu cầu này.


00:04:54,150 --> 00:04:59,550
If we had to make sure that no matter what, no message will be lost, we would have been in a much
Nếu chúng ta phải đảm bảo rằng bất kể thế nào, không có tin nhắn nào bị mất, chúng ta sẽ ở trong một tình trạng tồi tệ hơn nhiều.


00:04:59,550 --> 00:04:59,940
more difficult.
khó hơn.


00:04:59,980 --> 00:05:03,940
Position and probably we'll have to implement complex failsafe mechanism to make.
Vị trí và có lẽ chúng ta sẽ phải triển khai cơ chế an toàn phức tạp để thực hiện.


00:05:03,970 --> 00:05:06,370
Sure the message will always be received.
Chắc chắn tin nhắn sẽ luôn được nhận.


00:05:06,910 --> 00:05:10,210
And that concludes our civil service architecture.
Và như vậy là kết thúc kiến trúc công vụ của chúng ta.


00:05:10,240 --> 00:05:14,950
We now have a complete architecture for this important service, which includes its application type
Bây giờ chúng ta có một kiến trúc hoàn chỉnh cho dịch vụ quan trọng này, bao gồm loại ứng dụng 85 của nó


00:05:14,950 --> 00:05:18,850
technology stack and internal architecture, including logging mechanism.
công nghệ và kiến trúc nội bộ, bao gồm cơ chế ghi nhật ký.


00:05:19,030 --> 00:05:19,990
That's great.
Thật tuyệt vời.


00:05:19,990 --> 00:05:22,750
And we can now continue to our next service.
Và bây giờ chúng ta có thể tiếp tục buổi lễ tiếp theo.


