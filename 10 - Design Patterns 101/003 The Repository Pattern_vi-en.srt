00:00:00,260 --> 00:00:06,530
The repository pattern is also one of the most known and widely used pattern, and it blends well into
Mẫu kho lưu trữ cũng là một trong những mẫu được biết đến và sử dụng rộng rãi nhất, và nó hòa trộn tốt vào


00:00:06,530 --> 00:00:08,660
a well-designed, layered architecture.
một kiến trúc được thiết kế tốt, nhiều lớp.


00:00:08,810 --> 00:00:14,810
The repository pattern states that the modules not handling the actual work with the data store should
Mẫu kho lưu trữ nêu rằng các mô-đun không xử lý công việc thực tế với kho dữ liệu phải


00:00:14,810 --> 00:00:17,270
be completely oblivious to the data store type.
hoàn toàn không biết gì về loại kho dữ liệu.


00:00:17,300 --> 00:00:20,120
It's querying language, connection and transaction handling.
Đó là ngôn ngữ truy vấn, kết nối và xử lý giao dịch.


00:00:20,120 --> 00:00:20,240
ET.
ET.


00:00:20,930 --> 00:00:27,320
For example, if the data store is a MySQL database, no SQL statement should be issued by code module.
Ví dụ, nếu kho dữ liệu là cơ sở dữ liệu MySQL, thì mô-đun mã không nên đưa ra câu lệnh SQL nào.


00:00:27,330 --> 00:00:29,700
That is not part of the data handling code.
Điều đó không phải là một phần của mã xử lý dữ liệu.


00:00:29,720 --> 00:00:35,480
In other words, the repository pattern describes a data abstraction technique that should be used in
Nói cách khác, mô hình kho lưu trữ mô tả một kỹ thuật trừu tượng hóa dữ liệu nên được sử dụng trong


00:00:35,480 --> 00:00:37,790
order to achieve the isolation we mentioned.
để đạt được sự cô lập mà chúng tôi đã đề cập.


00:00:37,820 --> 00:00:44,000
Now, that might sound familiar, as this definition is quite similar to the data access layer we discussed
Bây giờ, điều đó có thể nghe quen thuộc, vì định nghĩa này khá giống với lớp truy cập dữ liệu mà chúng ta đã thảo luận


00:00:44,000 --> 00:00:45,770
in the layered architecture lecture.
trong bài giảng về kiến trúc phân lớp.


00:00:45,770 --> 00:00:51,230
And it's no coincidence both the repository pattern and the layered architectural pattern stems from
Và không phải ngẫu nhiên mà cả mô hình kho lưu trữ và mô hình kiến trúc phân lớp đều bắt nguồn từ


00:00:51,230 --> 00:00:52,590
the same principles.
cùng một nguyên tắc.


00:00:52,610 --> 00:00:55,910
Making our software more flexible and easy to maintain.
Làm cho phần mềm của chúng tôi linh hoạt hơn và dễ bảo trì hơn.


00:00:55,940 --> 00:00:59,090
The main difference between them is with their audience.
Sự khác biệt chính giữa họ là đối tượng khán giả của họ.


00:00:59,120 --> 00:01:05,129
The layered architecture pattern is used mainly by architects, and design patterns are geared more
Mô hình kiến trúc nhiều lớp chủ yếu được sử dụng bởi các kiến trúc sư và các mẫu thiết kế hướng đến


00:01:05,129 --> 00:01:06,570
towards developers.
hướng tới các nhà phát triển.


00:01:06,690 --> 00:01:11,910
Nevertheless, as an architect, you will hear a lot about the repository pattern and you should definitely
Tuy nhiên, với tư cách là một kiến trúc sư, bạn sẽ nghe rất nhiều về mô hình kho lưu trữ và bạn chắc chắn nên


00:01:11,910 --> 00:01:13,860
know what all the fuss is about.
biết tất cả những ồn ào là về điều gì.


00:01:13,890 --> 00:01:16,280
So back to the repository pattern.
Quay lại với mô hình kho lưu trữ.


00:01:16,290 --> 00:01:19,860
We say this pattern provides abstraction layer above the data store.
Chúng tôi nói rằng mô hình này cung cấp lớp trừu tượng phía trên kho dữ liệu.


00:01:19,890 --> 00:01:21,900
How exactly does it do that?
Chính xác thì nó làm điều đó như thế nào?


00:01:21,930 --> 00:01:24,450
Again, let's start with an example.
Một lần nữa, chúng ta hãy bắt đầu với một ví dụ.


00:01:24,720 --> 00:01:28,470
Our application manages the human resource department of the company.
Ứng dụng của chúng tôi quản lý bộ phận nhân sự của công ty.


00:01:28,500 --> 00:01:34,860
The application needs to access the data store for the traditional Crud operations, create, read,
Ứng dụng cần truy cập kho dữ liệu cho các hoạt động Crud truyền thống, tạo, đọc,


00:01:34,950 --> 00:01:37,050
update and delete.
cập nhật và xóa.


00:01:37,170 --> 00:01:43,650
Now for the read operation, there are two requirements We need to retrieve an employee by her ID and
Bây giờ đối với hoạt động đọc, có hai yêu cầu Chúng ta cần lấy một nhân viên theo ID của cô ấy và


00:01:43,650 --> 00:01:46,740
also to retrieve a list of employees by department name.
cũng để lấy danh sách nhân viên theo tên phòng ban.


00:01:46,830 --> 00:01:51,370
In a naive system, the developers create a method that handles all the data access.
Trong một hệ thống đơn giản, các nhà phát triển tạo ra một phương pháp xử lý tất cả các quyền truy cập dữ liệu.


00:01:51,390 --> 00:01:57,090
This method is called by the UI or the service interface and does all the low level stuff of working
Phương pháp này được gọi bởi UI hoặc giao diện dịch vụ và thực hiện tất cả các công việc cấp thấp của


00:01:57,090 --> 00:01:58,170
with the database.
với cơ sở dữ liệu.


00:01:58,200 --> 00:02:04,500
In our example up the database is SQL Server, so the method issues standard SQL statements.
Trong ví dụ của chúng tôi, cơ sở dữ liệu là SQL Server, do đó phương pháp này đưa ra các câu lệnh SQL chuẩn.


00:02:04,860 --> 00:02:10,590
As you can see, the first method the developers created is a method for adding vacation days to a specific
Như bạn có thể thấy, phương pháp đầu tiên mà các nhà phát triển tạo ra là phương pháp thêm ngày nghỉ vào một ngày cụ thể là


00:02:10,590 --> 00:02:11,220
employee.
nhân viên.


00:02:11,250 --> 00:02:16,770
Now, naturally, there is more than one place where the app needs to retrieve employees data so the
Bây giờ, tất nhiên, có nhiều hơn một nơi mà ứng dụng cần lấy dữ liệu nhân viên nên


00:02:16,770 --> 00:02:19,770
developers create more and more methods.
các nhà phát triển tạo ra ngày càng nhiều phương pháp.


00:02:19,800 --> 00:02:25,740
All of them issues SQL statements directly to the database, basically doing the same, which is retrieve
Tất cả chúng đều phát lệnh SQL trực tiếp đến cơ sở dữ liệu, về cơ bản là thực hiện giống nhau, đó là truy xuất


00:02:25,740 --> 00:02:26,640
employee data.
dữ liệu nhân viên.


00:02:26,730 --> 00:02:30,360
The system goes on to production and everyone is happy.
Hệ thống được đưa vào sản xuất và mọi người đều hài lòng.


00:02:31,290 --> 00:02:33,820
Three months later, disaster strikes.
Ba tháng sau, thảm họa xảy ra.


00:02:33,840 --> 00:02:36,330
It appears a column name has to be changed.
Có vẻ như tên cột phải được thay đổi.


00:02:36,360 --> 00:02:39,390
Not a big change, just a typo that needs to be fixed.
Không có thay đổi lớn, chỉ là lỗi đánh máy cần phải sửa.


00:02:39,480 --> 00:02:44,370
Now, what is the effect of this tiny change in the current implementation?
Bây giờ, tác động của sự thay đổi nhỏ này trong việc triển khai hiện tại là gì?


00:02:44,370 --> 00:02:49,530
The developers have to sift through all the methods in the app, find all the places where the original
Các nhà phát triển phải sàng lọc tất cả các phương pháp trong ứng dụng, tìm tất cả các địa điểm mà 46 ban đầu


00:02:49,530 --> 00:02:51,510
name is used, and switch to the new one.
tên được sử dụng và chuyển sang tên mới.


00:02:51,540 --> 00:02:57,960
This is a tedious, boring, error prone task which will force the developers to modify a large chunk
Đây là một nhiệm vụ tẻ nhạt, nhàm chán, dễ xảy ra lỗi, buộc các nhà phát triển phải sửa đổi một phần lớn


00:02:57,960 --> 00:03:01,590
of the code, which in turn will force the team to run all the tests again.
của mã, điều này sẽ buộc nhóm phải chạy lại tất cả các bài kiểm tra.


00:03:02,010 --> 00:03:05,010
The repository pattern comes to the rescue in this case.
Mẫu kho lưu trữ sẽ giải quyết vấn đề trong trường hợp này.


00:03:05,760 --> 00:03:10,820
Using the repository pattern, these methods will never communicate directly with the database.
Khi sử dụng mô hình kho lưu trữ, các phương pháp này sẽ không bao giờ giao tiếp trực tiếp với cơ sở dữ liệu.


00:03:10,830 --> 00:03:16,530
Instead, it will call a factory method, which you should be familiar with now, and get an instance
Thay vào đó, nó sẽ gọi một phương thức nhà máy, mà bạn đã quen thuộc với nó rồi, và lấy một thể hiện


00:03:16,530 --> 00:03:17,610
of the repository.
của kho lưu trữ.


00:03:17,850 --> 00:03:22,810
The repository represents the data store and exposes the actions the application requires.
Kho lưu trữ đại diện cho kho dữ liệu và hiển thị các hành động mà ứng dụng yêu cầu.


00:03:22,830 --> 00:03:29,430
For example, our repository represented by an interface called I Employees repository exposes the following
Ví dụ, kho lưu trữ của chúng tôi được biểu diễn bằng một giao diện có tên là kho lưu trữ I Employees sẽ hiển thị 55 thông tin sau


00:03:29,460 --> 00:03:30,180
methods.
phương pháp.


00:03:30,420 --> 00:03:31,950
Get employee by ID.
Lấy nhân viên theo ID.


00:03:32,190 --> 00:03:34,350
Get employees by department.
Lấy nhân viên theo phòng ban.


00:03:34,380 --> 00:03:35,400
Update Employee.
Cập nhật nhân viên.


00:03:35,430 --> 00:03:38,100
Create Employee and delete employee.
Tạo nhân viên và xóa nhân viên.


00:03:38,310 --> 00:03:43,860
The factory method initializes a repository class, in this case a class that works against SQL Server
Phương pháp nhà máy khởi tạo một lớp kho lưu trữ, trong trường hợp này là một lớp hoạt động với SQL Server


00:03:43,860 --> 00:03:48,120
and issues the correct SQL statements and use it for the various methods.
và đưa ra các câu lệnh SQL chính xác và sử dụng chúng cho các phương pháp khác nhau.


00:03:48,150 --> 00:03:51,760
The calling code has no idea what's going on in the repository class.
Mã gọi không biết điều gì đang diễn ra trong lớp kho lưu trữ.


00:03:51,780 --> 00:03:55,660
The data may be stored in a database in a file sent to other systems.
Dữ liệu có thể được lưu trữ trong cơ sở dữ liệu trong một tệp được gửi đến các hệ thống khác.


00:03:55,680 --> 00:04:00,580
It simply doesn't care what will happen now when a single column is changed.
Nó chỉ đơn giản là không quan tâm đến việc điều gì sẽ xảy ra khi một cột duy nhất bị thay đổi.


00:04:00,600 --> 00:04:03,500
Simply only the repository class will be modified.
Chỉ có lớp kho lưu trữ sẽ được sửa đổi.


00:04:03,510 --> 00:04:05,340
No other code should be touched.
Không nên chạm vào bất kỳ mã nào khác.


00:04:05,370 --> 00:04:10,680
This makes the change much more simple and focused, which makes it flexible and much, much easier
Điều này làm cho sự thay đổi trở nên đơn giản và tập trung hơn nhiều, khiến nó linh hoạt và dễ dàng hơn nhiều


00:04:10,680 --> 00:04:11,580
to maintain.
để duy trì.


00:04:11,820 --> 00:04:18,149
And consider another, more extreme case What will happen if a decision is made to switch to another
Và hãy xem xét một trường hợp khác, cực đoan hơn. Điều gì sẽ xảy ra nếu quyết định chuyển sang 70 khác?


00:04:18,149 --> 00:04:21,240
type of data store, say, from SQL Server to MongoDB?
loại kho dữ liệu, ví dụ, từ SQL Server đến MongoDB?


00:04:21,720 --> 00:04:26,290
In this case, the effect of the change in a non repository system will be huge.
Trong trường hợp này, tác động của sự thay đổi trong hệ thống không lưu trữ sẽ rất lớn.


00:04:26,310 --> 00:04:30,120
The SQL statements should be rewritten, the connection mechanisms should be changed.
Các câu lệnh SQL cần được viết lại, các cơ chế kết nối cần được thay đổi.


00:04:30,150 --> 00:04:32,610
Transactions are a completely different beast.
Giao dịch là một thứ hoàn toàn khác.


00:04:32,640 --> 00:04:35,520
It's virtually a full rewrite of the whole system.
Về cơ bản, đây là bản viết lại toàn bộ hệ thống.


00:04:35,610 --> 00:04:38,640
But with the repository pattern, the change is subtler.
Nhưng với mô hình kho lưu trữ, sự thay đổi tinh tế hơn.


00:04:38,670 --> 00:04:44,610
We simply create a new class implementing the I Employees repository interface point the factory method
Chúng tôi chỉ cần tạo một lớp mới triển khai giao diện kho lưu trữ I Employees trỏ đến phương thức nhà máy


00:04:44,610 --> 00:04:46,470
to the new class and call it a day.
đến lớp mới và kết thúc một ngày.


00:04:46,890 --> 00:04:52,620
The other classes will not even know something has changed and that is the real strength of the repository
Các lớp khác thậm chí sẽ không biết có điều gì đó đã thay đổi và đó là sức mạnh thực sự của kho lưu trữ


00:04:52,620 --> 00:04:53,250
pattern.
mẫu.


00:04:53,550 --> 00:04:57,360
Now this is the most basic form of the repository pattern.
Đây là hình thức cơ bản nhất của mô hình kho lưu trữ.


00:04:57,360 --> 00:04:59,910
There are more advanced forms that include.
Có những hình thức nâng cao hơn bao gồm.


00:04:59,950 --> 00:05:05,350
Generic classes and inheritance and provide a better framework for extending the functionality.
Các lớp chung và kế thừa cung cấp một khuôn khổ tốt hơn để mở rộng chức năng.


00:05:05,350 --> 00:05:10,570
But even in its most basic form, the repository pattern is one of the most useful pattern you will
Nhưng ngay cả ở dạng cơ bản nhất, mẫu kho lưu trữ là một trong những mẫu hữu ích nhất mà bạn sẽ


00:05:10,570 --> 00:05:11,440
ever use.
từng sử dụng.


