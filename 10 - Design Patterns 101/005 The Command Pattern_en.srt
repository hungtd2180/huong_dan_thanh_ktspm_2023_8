1
00:00:00,260 --> 00:00:03,260
The last pattern we will discuss is a command pattern.

2
00:00:03,290 --> 00:00:07,850
The command pattern is less popular than the other patterns we discussed, but there are cases where

3
00:00:07,850 --> 00:00:12,080
using it can really help make our code more flexible and easier to maintain.

4
00:00:12,260 --> 00:00:18,320
Basically, the command pattern is a pattern in which all the action's information is encapsulated within

5
00:00:18,320 --> 00:00:23,780
an object, including the action name parameters and the object on which the action is executed.

6
00:00:23,960 --> 00:00:28,790
I know it sounds a bit complicated and as usual, let's explain it with an example.

7
00:00:29,240 --> 00:00:31,930
Let's say we develop an undo mechanism.

8
00:00:31,940 --> 00:00:33,140
I guess you know what it means.

9
00:00:33,140 --> 00:00:34,290
But in case not.

10
00:00:34,310 --> 00:00:39,800
Think of Microsoft Word, for example, where using the control Z keys, you can undo any actions you

11
00:00:39,800 --> 00:00:42,500
performed and return to a previous state of the document.

12
00:00:42,530 --> 00:00:48,050
This is definitely one of the most useful features of any software and writers as well as developers

13
00:00:48,050 --> 00:00:49,610
appreciate and use a lot.

14
00:00:49,790 --> 00:00:53,510
Now let's think how this mechanism can be implemented.

15
00:00:53,960 --> 00:00:59,060
The undo mechanism should be able to perform a huge amount of actions deleting characters, changing

16
00:00:59,060 --> 00:01:02,820
fonts, removing pages from the document and hundreds more.

17
00:01:03,030 --> 00:01:07,080
In a naive implementation, the undo mechanisms code will include methods.

18
00:01:07,080 --> 00:01:08,340
For all these actions.

19
00:01:08,340 --> 00:01:10,140
It will look something like this.

20
00:01:12,690 --> 00:01:16,050
As you can guess, this is not a good design.

21
00:01:16,080 --> 00:01:21,990
This design actually mirrors all the functionality of the word processor and almost doubles its code.

22
00:01:22,020 --> 00:01:27,150
In addition, when a new functionality is added to the software, a new code must be added to the undo

23
00:01:27,150 --> 00:01:27,930
mechanism.

24
00:01:28,050 --> 00:01:33,510
This will result in a huge code base which is difficult to maintain and is not really readable.

25
00:01:33,750 --> 00:01:37,860
The command pattern that comes to the rescue in the case using this pattern.

26
00:01:37,890 --> 00:01:41,160
The undo mechanism simply holds a list of commands to execute.

27
00:01:41,190 --> 00:01:43,560
It has no idea what those commands do.

28
00:01:43,590 --> 00:01:50,340
It only knows each command has a method named execute that will do whatever is needed, so the implementation

29
00:01:50,340 --> 00:01:51,690
now will look like this.

30
00:01:51,960 --> 00:01:54,390
First, we define an interface.

31
00:01:54,390 --> 00:01:55,920
Let's call it I command.

32
00:01:55,950 --> 00:01:59,610
This interface contains a single method execute.

33
00:01:59,880 --> 00:02:05,130
Next, we will define various classes, represent commands that should be executed.

34
00:02:05,130 --> 00:02:07,110
For example delete word.

35
00:02:07,140 --> 00:02:09,509
These classes implement the interface.

36
00:02:09,780 --> 00:02:13,750
These classes hold all the needed information required to execute the command.

37
00:02:13,770 --> 00:02:19,620
For example, in a class that deletes a word, we probably need a reference to the document containing

38
00:02:19,620 --> 00:02:22,740
the word and the word that needs to be deleted in it.

39
00:02:22,770 --> 00:02:28,050
Of course, in real life, the implementation will be much more complicated with reference to the console's

40
00:02:28,050 --> 00:02:29,220
location and more.

41
00:02:29,220 --> 00:02:32,070
But for the sake of simplicity, I'll keep it this way.

42
00:02:32,340 --> 00:02:35,170
Now the class should actually perform the deletion.

43
00:02:35,190 --> 00:02:39,930
For that we will create a method called delete which will do just that.

44
00:02:39,960 --> 00:02:44,310
The actual implementation is not very important, but suffice to say such method exists.

45
00:02:44,940 --> 00:02:48,090
Last the interface implementation.

46
00:02:48,090 --> 00:02:53,790
Remember this class implements the I command interface and therefore has to implement the execute method.

47
00:02:53,820 --> 00:02:58,650
This method simply calls the delete method in the command pattern.

48
00:02:58,680 --> 00:03:04,740
This class is called the command object and the document we are working on is called the Receiver.

49
00:03:05,740 --> 00:03:08,590
Now let's go back to the undo mechanism.

50
00:03:08,890 --> 00:03:13,840
This mechanism holds a queue of commands for any action performed on the document.

51
00:03:13,840 --> 00:03:16,240
A new command object is added to the queue.

52
00:03:16,270 --> 00:03:22,810
When an undo is requested, the undo mechanism simply pops a command from the queue and calls it execute

53
00:03:22,810 --> 00:03:24,910
method in the command pattern.

54
00:03:24,940 --> 00:03:27,090
The undo mechanism is a invoker.

55
00:03:27,100 --> 00:03:29,290
It invokes the execute method.

56
00:03:29,320 --> 00:03:34,330
Note that in no point has the undo mechanism any idea what the actual command is.

57
00:03:34,360 --> 00:03:39,700
All it knows is that there is a command object with an execute method that takes care of a specific

58
00:03:39,730 --> 00:03:43,270
undo action and that is the beauty of the command pattern.

59
00:03:43,300 --> 00:03:47,550
The complete separation between the invocation of the command and its actual function.

60
00:03:47,560 --> 00:03:50,440
The invoker has no idea what the command does.

61
00:03:50,470 --> 00:03:52,820
All it knows is that it should be invoked.

62
00:03:52,840 --> 00:03:57,220
All the components required for the command execution are stored within the command object.

63
00:03:57,250 --> 00:04:01,570
As we said before, the command pattern is less popular than the other patterns we discussed.

64
00:04:01,570 --> 00:04:06,350
But when it is relevant, it will make your life and the code much easier.

