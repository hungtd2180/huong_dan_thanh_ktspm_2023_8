1
00:00:00,260 --> 00:00:06,530
The repository pattern is also one of the most known and widely used pattern, and it blends well into

2
00:00:06,530 --> 00:00:08,660
a well-designed, layered architecture.

3
00:00:08,810 --> 00:00:14,810
The repository pattern states that the modules not handling the actual work with the data store should

4
00:00:14,810 --> 00:00:17,270
be completely oblivious to the data store type.

5
00:00:17,300 --> 00:00:20,120
It's querying language, connection and transaction handling.

6
00:00:20,120 --> 00:00:20,240
ET.

7
00:00:20,930 --> 00:00:27,320
For example, if the data store is a MySQL database, no SQL statement should be issued by code module.

8
00:00:27,330 --> 00:00:29,700
That is not part of the data handling code.

9
00:00:29,720 --> 00:00:35,480
In other words, the repository pattern describes a data abstraction technique that should be used in

10
00:00:35,480 --> 00:00:37,790
order to achieve the isolation we mentioned.

11
00:00:37,820 --> 00:00:44,000
Now, that might sound familiar, as this definition is quite similar to the data access layer we discussed

12
00:00:44,000 --> 00:00:45,770
in the layered architecture lecture.

13
00:00:45,770 --> 00:00:51,230
And it's no coincidence both the repository pattern and the layered architectural pattern stems from

14
00:00:51,230 --> 00:00:52,590
the same principles.

15
00:00:52,610 --> 00:00:55,910
Making our software more flexible and easy to maintain.

16
00:00:55,940 --> 00:00:59,090
The main difference between them is with their audience.

17
00:00:59,120 --> 00:01:05,129
The layered architecture pattern is used mainly by architects, and design patterns are geared more

18
00:01:05,129 --> 00:01:06,570
towards developers.

19
00:01:06,690 --> 00:01:11,910
Nevertheless, as an architect, you will hear a lot about the repository pattern and you should definitely

20
00:01:11,910 --> 00:01:13,860
know what all the fuss is about.

21
00:01:13,890 --> 00:01:16,280
So back to the repository pattern.

22
00:01:16,290 --> 00:01:19,860
We say this pattern provides abstraction layer above the data store.

23
00:01:19,890 --> 00:01:21,900
How exactly does it do that?

24
00:01:21,930 --> 00:01:24,450
Again, let's start with an example.

25
00:01:24,720 --> 00:01:28,470
Our application manages the human resource department of the company.

26
00:01:28,500 --> 00:01:34,860
The application needs to access the data store for the traditional Crud operations, create, read,

27
00:01:34,950 --> 00:01:37,050
update and delete.

28
00:01:37,170 --> 00:01:43,650
Now for the read operation, there are two requirements We need to retrieve an employee by her ID and

29
00:01:43,650 --> 00:01:46,740
also to retrieve a list of employees by department name.

30
00:01:46,830 --> 00:01:51,370
In a naive system, the developers create a method that handles all the data access.

31
00:01:51,390 --> 00:01:57,090
This method is called by the UI or the service interface and does all the low level stuff of working

32
00:01:57,090 --> 00:01:58,170
with the database.

33
00:01:58,200 --> 00:02:04,500
In our example up the database is SQL Server, so the method issues standard SQL statements.

34
00:02:04,860 --> 00:02:10,590
As you can see, the first method the developers created is a method for adding vacation days to a specific

35
00:02:10,590 --> 00:02:11,220
employee.

36
00:02:11,250 --> 00:02:16,770
Now, naturally, there is more than one place where the app needs to retrieve employees data so the

37
00:02:16,770 --> 00:02:19,770
developers create more and more methods.

38
00:02:19,800 --> 00:02:25,740
All of them issues SQL statements directly to the database, basically doing the same, which is retrieve

39
00:02:25,740 --> 00:02:26,640
employee data.

40
00:02:26,730 --> 00:02:30,360
The system goes on to production and everyone is happy.

41
00:02:31,290 --> 00:02:33,820
Three months later, disaster strikes.

42
00:02:33,840 --> 00:02:36,330
It appears a column name has to be changed.

43
00:02:36,360 --> 00:02:39,390
Not a big change, just a typo that needs to be fixed.

44
00:02:39,480 --> 00:02:44,370
Now, what is the effect of this tiny change in the current implementation?

45
00:02:44,370 --> 00:02:49,530
The developers have to sift through all the methods in the app, find all the places where the original

46
00:02:49,530 --> 00:02:51,510
name is used, and switch to the new one.

47
00:02:51,540 --> 00:02:57,960
This is a tedious, boring, error prone task which will force the developers to modify a large chunk

48
00:02:57,960 --> 00:03:01,590
of the code, which in turn will force the team to run all the tests again.

49
00:03:02,010 --> 00:03:05,010
The repository pattern comes to the rescue in this case.

50
00:03:05,760 --> 00:03:10,820
Using the repository pattern, these methods will never communicate directly with the database.

51
00:03:10,830 --> 00:03:16,530
Instead, it will call a factory method, which you should be familiar with now, and get an instance

52
00:03:16,530 --> 00:03:17,610
of the repository.

53
00:03:17,850 --> 00:03:22,810
The repository represents the data store and exposes the actions the application requires.

54
00:03:22,830 --> 00:03:29,430
For example, our repository represented by an interface called I Employees repository exposes the following

55
00:03:29,460 --> 00:03:30,180
methods.

56
00:03:30,420 --> 00:03:31,950
Get employee by ID.

57
00:03:32,190 --> 00:03:34,350
Get employees by department.

58
00:03:34,380 --> 00:03:35,400
Update Employee.

59
00:03:35,430 --> 00:03:38,100
Create Employee and delete employee.

60
00:03:38,310 --> 00:03:43,860
The factory method initializes a repository class, in this case a class that works against SQL Server

61
00:03:43,860 --> 00:03:48,120
and issues the correct SQL statements and use it for the various methods.

62
00:03:48,150 --> 00:03:51,760
The calling code has no idea what's going on in the repository class.

63
00:03:51,780 --> 00:03:55,660
The data may be stored in a database in a file sent to other systems.

64
00:03:55,680 --> 00:04:00,580
It simply doesn't care what will happen now when a single column is changed.

65
00:04:00,600 --> 00:04:03,500
Simply only the repository class will be modified.

66
00:04:03,510 --> 00:04:05,340
No other code should be touched.

67
00:04:05,370 --> 00:04:10,680
This makes the change much more simple and focused, which makes it flexible and much, much easier

68
00:04:10,680 --> 00:04:11,580
to maintain.

69
00:04:11,820 --> 00:04:18,149
And consider another, more extreme case What will happen if a decision is made to switch to another

70
00:04:18,149 --> 00:04:21,240
type of data store, say, from SQL Server to MongoDB?

71
00:04:21,720 --> 00:04:26,290
In this case, the effect of the change in a non repository system will be huge.

72
00:04:26,310 --> 00:04:30,120
The SQL statements should be rewritten, the connection mechanisms should be changed.

73
00:04:30,150 --> 00:04:32,610
Transactions are a completely different beast.

74
00:04:32,640 --> 00:04:35,520
It's virtually a full rewrite of the whole system.

75
00:04:35,610 --> 00:04:38,640
But with the repository pattern, the change is subtler.

76
00:04:38,670 --> 00:04:44,610
We simply create a new class implementing the I Employees repository interface point the factory method

77
00:04:44,610 --> 00:04:46,470
to the new class and call it a day.

78
00:04:46,890 --> 00:04:52,620
The other classes will not even know something has changed and that is the real strength of the repository

79
00:04:52,620 --> 00:04:53,250
pattern.

80
00:04:53,550 --> 00:04:57,360
Now this is the most basic form of the repository pattern.

81
00:04:57,360 --> 00:04:59,910
There are more advanced forms that include.

82
00:04:59,950 --> 00:05:05,350
Generic classes and inheritance and provide a better framework for extending the functionality.

83
00:05:05,350 --> 00:05:10,570
But even in its most basic form, the repository pattern is one of the most useful pattern you will

84
00:05:10,570 --> 00:05:11,440
ever use.

