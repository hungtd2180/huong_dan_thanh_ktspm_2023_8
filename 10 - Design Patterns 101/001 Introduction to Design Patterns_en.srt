1
00:00:00,380 --> 00:00:05,720
No discussion about coding and architecture will be complete without talking about design patterns.

2
00:00:05,870 --> 00:00:10,070
You might have heard about it before and perhaps you already know everything there is to know about

3
00:00:10,070 --> 00:00:10,460
it.

4
00:00:10,460 --> 00:00:15,890
But it's always a good idea to have a reminder about one of the most well known terms in the software

5
00:00:15,890 --> 00:00:16,620
industry.

6
00:00:16,640 --> 00:00:19,040
So what are design patterns?

7
00:00:19,130 --> 00:00:25,580
The basic definition is that design patterns are a collection of general reusable solutions to common

8
00:00:25,580 --> 00:00:27,350
problems in software design.

9
00:00:27,470 --> 00:00:33,490
When writing software, there are a lot of small problems that you will find yourself dealing with frequently.

10
00:00:33,500 --> 00:00:40,520
Questions like how to communicate between classes or how to initialize interface implementations, or

11
00:00:40,520 --> 00:00:41,990
how to access data stores.

12
00:00:41,990 --> 00:00:44,130
And lots more are questions.

13
00:00:44,150 --> 00:00:48,290
Almost every software developer has to answer somewhere along the lines.

14
00:00:48,380 --> 00:00:54,320
Design patterns are a set of solutions or patterns that strive to answer those questions and provide

15
00:00:54,320 --> 00:00:58,070
a well-defined pattern or template for those problems.

16
00:00:58,190 --> 00:01:01,500
Using design patterns, you will gain the following benefits.

17
00:01:01,890 --> 00:01:05,580
The pattern is already tested and used by a lot of developers.

18
00:01:05,580 --> 00:01:11,220
There is no need to reinvent the wheel and you can reuse solutions that were already formulated and

19
00:01:11,220 --> 00:01:13,830
implemented by the brightest minds in the industry.

20
00:01:14,370 --> 00:01:19,740
Design patterns will often make your code easier to read and modify, thus making the application more

21
00:01:19,740 --> 00:01:20,340
flexible.

22
00:01:20,340 --> 00:01:22,320
And this is always a good cause.

23
00:01:23,300 --> 00:01:29,480
Design patterns were first introduced on 1987, but became really famous when this book was published

24
00:01:29,480 --> 00:01:36,530
in 1994 by the Gang of Four, Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides.

25
00:01:36,890 --> 00:01:41,570
This book brought design patterns to the attention of the software industry and laid the foundation

26
00:01:41,570 --> 00:01:45,200
for the way of thinking we have today with patterns and practices.

27
00:01:45,230 --> 00:01:47,930
If you haven't read it already, you definitely should.

28
00:01:47,960 --> 00:01:52,910
You can find a link for purchasing the book in the accompanying resources document at the end of this

29
00:01:52,910 --> 00:01:53,630
section.

30
00:01:53,660 --> 00:01:58,280
Now, you might be thinking, why should an architect learn about design patterns?

31
00:01:58,310 --> 00:02:03,050
These patterns are used in the development process and they have nothing to do with the bigger picture.

32
00:02:03,260 --> 00:02:04,850
Well, you have a point.

33
00:02:04,880 --> 00:02:08,060
The design patterns are really geared more towards developers.

34
00:02:08,060 --> 00:02:13,430
But there are two important reasons that a software architect should be at least aware of them.

35
00:02:13,550 --> 00:02:16,430
First, the patterns have architectural aspects.

36
00:02:16,460 --> 00:02:21,980
Although small in scale, each pattern actually discusses a proposed architecture that solves a given

37
00:02:21,980 --> 00:02:22,640
problem.

38
00:02:22,640 --> 00:02:26,640
You might call it a micro architecture, but it's still an architecture.

39
00:02:26,670 --> 00:02:32,430
Remember the goal of the architecture to make the application fast, secure, reliable and easy to maintain

40
00:02:32,430 --> 00:02:37,620
while implementing the relevant design patterns will definitely help making the application more reliable

41
00:02:37,620 --> 00:02:41,730
and easier to maintain, which is definitely one of the goals of an architect.

42
00:02:41,790 --> 00:02:45,360
Second, we already talked about it and we will keep talking about it.

43
00:02:45,390 --> 00:02:49,670
The architect should always be familiar with what's going on in the applications code.

44
00:02:49,680 --> 00:02:54,420
He must be able to review the code, find problems in it, and even write some.

45
00:02:54,420 --> 00:02:59,310
Since design patterns are such an important tool for the developers, the architect must be familiar

46
00:02:59,310 --> 00:03:00,120
with them too.

47
00:03:00,390 --> 00:03:04,050
Now, as you might guess, there are a lot of design patterns.

48
00:03:04,170 --> 00:03:07,830
As you can see in this Wikipedia screenshot, there are dozens of them.

49
00:03:07,830 --> 00:03:12,630
We will focus on four of them, which I believe are very important and very common.

50
00:03:12,750 --> 00:03:17,520
You will almost certain you will find opportunities to implement those patterns in your application.

51
00:03:17,520 --> 00:03:22,740
And of course I encourage you to learn and implement the rest to the patterns we will discuss.

52
00:03:22,740 --> 00:03:27,450
Are factory repository, facade and command.

53
00:03:27,470 --> 00:03:30,530
So let's go and begin with the factory pattern.

