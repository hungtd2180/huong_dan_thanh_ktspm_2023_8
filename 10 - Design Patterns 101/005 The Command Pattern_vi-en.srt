00:00:00,260 --> 00:00:03,260
The last pattern we will discuss is a command pattern.
Mẫu cuối cùng chúng ta sẽ thảo luận là mẫu lệnh.


00:00:03,290 --> 00:00:07,850
The command pattern is less popular than the other patterns we discussed, but there are cases where
Mẫu lệnh ít phổ biến hơn các mẫu khác mà chúng ta đã thảo luận, nhưng có những trường hợp


00:00:07,850 --> 00:00:12,080
using it can really help make our code more flexible and easier to maintain.
sử dụng nó thực sự có thể giúp mã của chúng ta linh hoạt hơn và dễ bảo trì hơn.


00:00:12,260 --> 00:00:18,320
Basically, the command pattern is a pattern in which all the action's information is encapsulated within
Về cơ bản, mẫu lệnh là một mẫu trong đó tất cả thông tin của hành động được gói gọn trong


00:00:18,320 --> 00:00:23,780
an object, including the action name parameters and the object on which the action is executed.
một đối tượng, bao gồm các tham số tên hành động và đối tượng mà hành động được thực thi.


00:00:23,960 --> 00:00:28,790
I know it sounds a bit complicated and as usual, let's explain it with an example.
Tôi biết điều này nghe có vẻ hơi phức tạp và như thường lệ, chúng ta hãy giải thích bằng một ví dụ.


00:00:29,240 --> 00:00:31,930
Let's say we develop an undo mechanism.
Giả sử chúng ta phát triển một cơ chế hoàn tác.


00:00:31,940 --> 00:00:33,140
I guess you know what it means.
Tôi đoán là bạn biết nó có nghĩa là gì.


00:00:33,140 --> 00:00:34,290
But in case not.
Nhưng trong trường hợp không.


00:00:34,310 --> 00:00:39,800
Think of Microsoft Word, for example, where using the control Z keys, you can undo any actions you
Ví dụ, hãy nghĩ đến Microsoft Word, nơi bạn có thể sử dụng các phím điều khiển Z để hoàn tác bất kỳ hành động nào bạn đã thực hiện.


00:00:39,800 --> 00:00:42,500
performed and return to a previous state of the document.
được thực hiện và trở về trạng thái trước đó của tài liệu.


00:00:42,530 --> 00:00:48,050
This is definitely one of the most useful features of any software and writers as well as developers
Đây chắc chắn là một trong những tính năng hữu ích nhất của bất kỳ phần mềm nào và cả người viết cũng như nhà phát triển


00:00:48,050 --> 00:00:49,610
appreciate and use a lot.
đánh giá cao và sử dụng nhiều.


00:00:49,790 --> 00:00:53,510
Now let's think how this mechanism can be implemented.
Bây giờ chúng ta hãy nghĩ xem cơ chế này có thể được thực hiện như thế nào.


00:00:53,960 --> 00:00:59,060
The undo mechanism should be able to perform a huge amount of actions deleting characters, changing
Cơ chế hoàn tác phải có khả năng thực hiện một lượng lớn các hành động xóa ký tự, thay đổi


00:00:59,060 --> 00:01:02,820
fonts, removing pages from the document and hundreds more.
phông chữ, xóa trang khỏi tài liệu và hàng trăm thứ khác nữa.


00:01:03,030 --> 00:01:07,080
In a naive implementation, the undo mechanisms code will include methods.
Trong một triển khai đơn giản, mã cơ chế hoàn tác sẽ bao gồm các phương thức.


00:01:07,080 --> 00:01:08,340
For all these actions.
Đối với tất cả những hành động này.


00:01:08,340 --> 00:01:10,140
It will look something like this.
Nó sẽ trông giống như thế này.


00:01:12,690 --> 00:01:16,050
As you can guess, this is not a good design.
Như bạn có thể đoán, đây không phải là một thiết kế tốt.


00:01:16,080 --> 00:01:21,990
This design actually mirrors all the functionality of the word processor and almost doubles its code.
Thiết kế này thực sự phản ánh tất cả các chức năng của trình xử lý văn bản và gần như tăng gấp đôi mã của nó.


00:01:22,020 --> 00:01:27,150
In addition, when a new functionality is added to the software, a new code must be added to the undo
Ngoài ra, khi một chức năng mới được thêm vào phần mềm, một mã mới phải được thêm vào lệnh hoàn tác


00:01:27,150 --> 00:01:27,930
mechanism.
cơ chế.


00:01:28,050 --> 00:01:33,510
This will result in a huge code base which is difficult to maintain and is not really readable.
Điều này sẽ tạo ra một cơ sở mã khổng lồ, khó bảo trì và thực sự không dễ đọc.


00:01:33,750 --> 00:01:37,860
The command pattern that comes to the rescue in the case using this pattern.
Mẫu lệnh sẽ giải cứu trong trường hợp sử dụng mẫu này.


00:01:37,890 --> 00:01:41,160
The undo mechanism simply holds a list of commands to execute.
Cơ chế hoàn tác chỉ đơn giản là giữ một danh sách các lệnh để thực hiện.


00:01:41,190 --> 00:01:43,560
It has no idea what those commands do.
Nó không biết những lệnh đó có tác dụng gì.


00:01:43,590 --> 00:01:50,340
It only knows each command has a method named execute that will do whatever is needed, so the implementation
Nó chỉ biết mỗi lệnh có một phương thức có tên là execute sẽ thực hiện bất cứ điều gì cần thiết, vì vậy việc triển khai


00:01:50,340 --> 00:01:51,690
now will look like this.
bây giờ sẽ trông như thế này.


00:01:51,960 --> 00:01:54,390
First, we define an interface.
Đầu tiên, chúng ta định nghĩa một giao diện.


00:01:54,390 --> 00:01:55,920
Let's call it I command.
Chúng ta hãy gọi nó là Tôi ra lệnh.


00:01:55,950 --> 00:01:59,610
This interface contains a single method execute.
Giao diện này chứa một phương thức thực thi duy nhất.


00:01:59,880 --> 00:02:05,130
Next, we will define various classes, represent commands that should be executed.
Tiếp theo, chúng ta sẽ định nghĩa các lớp khác nhau, biểu diễn các lệnh cần được thực thi.


00:02:05,130 --> 00:02:07,110
For example delete word.
Ví dụ xóa từ.


00:02:07,140 --> 00:02:09,509
These classes implement the interface.
Các lớp này triển khai giao diện.


00:02:09,780 --> 00:02:13,750
These classes hold all the needed information required to execute the command.
Các lớp này chứa tất cả thông tin cần thiết để thực hiện lệnh.


00:02:13,770 --> 00:02:19,620
For example, in a class that deletes a word, we probably need a reference to the document containing
Ví dụ, trong một lớp xóa một từ, chúng ta có thể cần tham chiếu đến tài liệu chứa


00:02:19,620 --> 00:02:22,740
the word and the word that needs to be deleted in it.
từ và từ cần xóa trong đó.


00:02:22,770 --> 00:02:28,050
Of course, in real life, the implementation will be much more complicated with reference to the console's
Tất nhiên, trong thực tế, việc triển khai sẽ phức tạp hơn nhiều khi tham chiếu đến 40 của bảng điều khiển


00:02:28,050 --> 00:02:29,220
location and more.
vị trí và nhiều hơn nữa.


00:02:29,220 --> 00:02:32,070
But for the sake of simplicity, I'll keep it this way.
Nhưng vì sự đơn giản, tôi sẽ giữ nguyên như thế này.


00:02:32,340 --> 00:02:35,170
Now the class should actually perform the deletion.
Bây giờ lớp thực sự nên thực hiện việc xóa.


00:02:35,190 --> 00:02:39,930
For that we will create a method called delete which will do just that.
Để làm được điều đó, chúng ta sẽ tạo một phương thức có tên là delete để thực hiện điều đó.


00:02:39,960 --> 00:02:44,310
The actual implementation is not very important, but suffice to say such method exists.
Việc triển khai thực tế không quá quan trọng, nhưng đủ để nói rằng phương pháp đó tồn tại.


00:02:44,940 --> 00:02:48,090
Last the interface implementation.
Cuối cùng là việc triển khai giao diện.


00:02:48,090 --> 00:02:53,790
Remember this class implements the I command interface and therefore has to implement the execute method.
Hãy nhớ rằng lớp này triển khai giao diện lệnh I và do đó phải triển khai phương thức thực thi.


00:02:53,820 --> 00:02:58,650
This method simply calls the delete method in the command pattern.
Phương pháp này chỉ đơn giản gọi phương pháp xóa trong mẫu lệnh.


00:02:58,680 --> 00:03:04,740
This class is called the command object and the document we are working on is called the Receiver.
Lớp này được gọi là đối tượng lệnh và tài liệu chúng ta đang làm việc được gọi là Receiver.


00:03:05,740 --> 00:03:08,590
Now let's go back to the undo mechanism.
Bây giờ chúng ta hãy quay lại cơ chế hoàn tác.


00:03:08,890 --> 00:03:13,840
This mechanism holds a queue of commands for any action performed on the document.
Cơ chế này giữ một hàng lệnh cho bất kỳ hành động nào được thực hiện trên tài liệu.


00:03:13,840 --> 00:03:16,240
A new command object is added to the queue.
Một đối tượng lệnh mới được thêm vào hàng đợi.


00:03:16,270 --> 00:03:22,810
When an undo is requested, the undo mechanism simply pops a command from the queue and calls it execute
Khi yêu cầu hoàn tác, cơ chế hoàn tác chỉ cần bật lệnh từ hàng đợi và gọi lệnh đó là thực thi


00:03:22,810 --> 00:03:24,910
method in the command pattern.
phương pháp trong mẫu lệnh.


00:03:24,940 --> 00:03:27,090
The undo mechanism is a invoker.
Cơ chế hoàn tác là một trình kích hoạt.


00:03:27,100 --> 00:03:29,290
It invokes the execute method.
Nó gọi phương thức thực thi.


00:03:29,320 --> 00:03:34,330
Note that in no point has the undo mechanism any idea what the actual command is.
Lưu ý rằng không có điểm nào cơ chế hoàn tác có ý tưởng về lệnh thực tế là gì.


00:03:34,360 --> 00:03:39,700
All it knows is that there is a command object with an execute method that takes care of a specific
Tất cả những gì nó biết là có một đối tượng lệnh với phương thức thực thi xử lý một lệnh cụ thể


00:03:39,730 --> 00:03:43,270
undo action and that is the beauty of the command pattern.
hoàn tác hành động và đó là vẻ đẹp của mẫu lệnh.


00:03:43,300 --> 00:03:47,550
The complete separation between the invocation of the command and its actual function.
Sự tách biệt hoàn toàn giữa lệnh gọi và chức năng thực tế của nó.


00:03:47,560 --> 00:03:50,440
The invoker has no idea what the command does.
Người gọi không biết lệnh đó có tác dụng gì.


00:03:50,470 --> 00:03:52,820
All it knows is that it should be invoked.
Tất cả những gì nó biết là nó nên được triệu hồi.


00:03:52,840 --> 00:03:57,220
All the components required for the command execution are stored within the command object.
Tất cả các thành phần cần thiết cho việc thực hiện lệnh đều được lưu trữ trong đối tượng lệnh.


00:03:57,250 --> 00:04:01,570
As we said before, the command pattern is less popular than the other patterns we discussed.
Như chúng tôi đã nói trước đây, mẫu lệnh ít phổ biến hơn các mẫu khác mà chúng tôi đã thảo luận.


00:04:01,570 --> 00:04:06,350
But when it is relevant, it will make your life and the code much easier.
Nhưng khi nó có liên quan, nó sẽ giúp cuộc sống và việc viết mã của bạn dễ dàng hơn nhiều.


