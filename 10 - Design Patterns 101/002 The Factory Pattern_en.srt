1
00:00:01,380 --> 00:00:05,070
The name factory might sound familiar, and it really is.

2
00:00:05,100 --> 00:00:10,520
We already discussed factory methods in this course in previous lectures, mainly around layers.

3
00:00:10,530 --> 00:00:15,630
But now let's do a real deep dive into the factory pattern and provide the full motivation and explanation

4
00:00:15,630 --> 00:00:16,290
for it.

5
00:00:16,440 --> 00:00:18,780
So what is a factory pattern?

6
00:00:18,810 --> 00:00:25,230
Simply put, the factory pattern is a pattern that allows creating objects without specifying the exact

7
00:00:25,230 --> 00:00:26,640
class of the object.

8
00:00:26,760 --> 00:00:29,550
Now, why would we want to do that?

9
00:00:29,940 --> 00:00:35,880
As we already discussed, specifying the class in the creating code will create a strong coupling and

10
00:00:35,880 --> 00:00:37,590
will tie the code to the class.

11
00:00:37,680 --> 00:00:43,170
If later, we will need to use another class for implementing the same logic, we will have to modify

12
00:00:43,170 --> 00:00:47,610
all the code that creates the class which can be scattered all across the application.

13
00:00:47,610 --> 00:00:51,990
So the factory pattern allows us to avoid such strong coupling.

14
00:00:52,020 --> 00:00:53,550
How is it implemented?

15
00:00:53,610 --> 00:00:55,740
Well, let's look at an example.

16
00:00:55,770 --> 00:01:01,180
Say we have an application that needs to know the weather forecast in various cities around the world.

17
00:01:01,210 --> 00:01:06,700
Now, there are multiple providers of weather forecasts and the developers decided to go with a provider

18
00:01:06,700 --> 00:01:07,990
name, hot or not.

19
00:01:08,020 --> 00:01:16,120
Whether they created a class called Hon or hon weather with a method named get weather that accepts

20
00:01:16,120 --> 00:01:17,680
the city name and the date.

21
00:01:17,710 --> 00:01:23,290
The get weather method returns a number which represents the temperature in the given city on the given

22
00:01:23,290 --> 00:01:23,860
date.

23
00:01:24,010 --> 00:01:26,500
Here is an example of a code using this class.

24
00:01:26,530 --> 00:01:30,190
This is a straightforward implementation and it looks quite innocent.

25
00:01:30,520 --> 00:01:36,460
Six months after the site went on production, the hugely successful hot or not weather went out of

26
00:01:36,460 --> 00:01:39,750
business and the developers had to find a replacement.

27
00:01:39,760 --> 00:01:43,780
After a hurried search, they found one named either neither weather.

28
00:01:43,810 --> 00:01:50,470
They created another class named N weather with the same method signature get weather that accepts the

29
00:01:50,470 --> 00:01:55,120
same arguments city and date and returned the same value the temperature.

30
00:01:55,390 --> 00:01:56,440
Now what?

31
00:01:56,680 --> 00:02:03,160
Now since the previous class on weather was directly created by the code using the new keyword, the

32
00:02:03,160 --> 00:02:09,759
team has to find all the places this class is used and change the code to create an instance of the

33
00:02:10,030 --> 00:02:12,400
weather class instead of the hon.

34
00:02:12,400 --> 00:02:13,570
Weather Class.

35
00:02:13,600 --> 00:02:16,940
This is a tedious, boring and error prone job.

36
00:02:16,960 --> 00:02:20,230
What the team found out is that new is glue.

37
00:02:20,260 --> 00:02:26,440
This is a common thing among developers and architects, and it shows that whenever we use the new keyword,

38
00:02:26,440 --> 00:02:28,900
we glue the code and the class together.

39
00:02:28,930 --> 00:02:31,920
The factory pattern proposes a solution for this.

40
00:02:31,930 --> 00:02:33,460
Using the factory pattern.

41
00:02:33,460 --> 00:02:37,510
We would do this create an interface named weather provider.

42
00:02:37,540 --> 00:02:43,360
This interface has a single method named, you guessed it get weather accepting the city name and date

43
00:02:43,360 --> 00:02:51,370
and returning the temperature to make the weather and n weather class implements this interface.

44
00:02:51,850 --> 00:02:53,650
Create a factory method.

45
00:02:53,650 --> 00:02:59,110
Let's call this method get weather provider and it will return an implementation of the weather provider

46
00:02:59,110 --> 00:02:59,890
interface.

47
00:02:59,920 --> 00:03:03,460
This method will simply return an instance of the weather.

48
00:03:03,490 --> 00:03:08,260
That's all a one liner, but this one line changes everything.

49
00:03:08,950 --> 00:03:15,160
From now on when the code needed to access weather information instead of calling directly to weather

50
00:03:15,160 --> 00:03:18,790
it will cause a factory method, gets the instance and act on it.

51
00:03:18,820 --> 00:03:25,420
The code will have no idea what is a concrete class it's using, and that makes the change a very easy

52
00:03:25,420 --> 00:03:30,050
experience when the developers will need to switch from weather to weather.

53
00:03:30,070 --> 00:03:34,280
All they need to do is to modify the code in the factory method.

54
00:03:34,300 --> 00:03:35,290
That's it.

55
00:03:35,410 --> 00:03:36,850
See how easy it is?

56
00:03:37,030 --> 00:03:41,890
Using the factory method will definitely make your code easier to maintain, which is one of the major

57
00:03:41,890 --> 00:03:43,180
goals of the architect.

58
00:03:43,390 --> 00:03:47,390
Now there are some more complicated types of factory methods.

59
00:03:47,410 --> 00:03:52,960
For example, let's say we have two weather providers, one for Asia and one for Europe.

60
00:03:52,990 --> 00:03:56,860
We need the code to be indifferent to the location we want the weather forecast for.

61
00:03:56,860 --> 00:04:02,460
And so we use the factory method as a place to make a decision about which instance to return.

62
00:04:02,470 --> 00:04:09,040
For example, our weather classes are called, surprisingly enough, Europe Weather and Asia Weather,

63
00:04:09,040 --> 00:04:11,970
and they both implement the weather provider interface.

64
00:04:11,980 --> 00:04:14,350
Our factory will now look like this.

65
00:04:14,980 --> 00:04:19,930
As you can see, the factory method accepts the continent name of the required weather forecast and

66
00:04:19,930 --> 00:04:22,360
returns a different instance based on it.

67
00:04:22,390 --> 00:04:27,400
This is a quite common pattern in factories and there are a lot of examples of factories making a decision

68
00:04:27,400 --> 00:04:29,830
on a specific instance to be returned.

69
00:04:29,860 --> 00:04:35,500
Another common pattern is to use an external configuration file for deciding which instance to return.

70
00:04:36,250 --> 00:04:37,960
So that is a factory pattern.

71
00:04:37,960 --> 00:04:42,170
And as you probably already understood, it is hugely popular and rightly so.

72
00:04:42,190 --> 00:04:47,800
It will make your life much easier and the code will be more readable, flexible and easy to maintain.

73
00:04:47,830 --> 00:04:53,350
In addition, the factory pattern is often a base for other patterns, as we will see in the repository

74
00:04:53,350 --> 00:04:53,990
pattern.

75
00:04:54,010 --> 00:04:56,050
So the bottom line is simple.

76
00:04:56,080 --> 00:04:58,690
Always strive to use the factory pattern.

77
00:04:58,690 --> 00:05:00,970
Remember new is glue.

78
00:05:01,000 --> 00:05:03,610
Avoid strong coupling with the factory pattern.

