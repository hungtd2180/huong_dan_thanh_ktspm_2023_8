00:00:00,410 --> 00:00:02,850
Software systems are complex beasts.
Hệ thống phần mềm là những con quái vật phức tạp.


00:00:02,870 --> 00:00:07,400
There are a lot of moving parts and as a result, a lot of things that can go wrong.
Có rất nhiều bộ phận chuyển động và do đó, rất nhiều thứ có thể xảy ra sai sót.


00:00:07,520 --> 00:00:10,310
And let me assure you, things will go wrong.
Và tôi đảm bảo với bạn rằng mọi chuyện sẽ diễn ra không như mong đợi.


00:00:10,340 --> 00:00:13,190
This is one of the axioms of the software world.
Đây là một trong những tiên đề của thế giới phần mềm.


00:00:13,310 --> 00:00:17,270
The real question here is what happens when something goes wrong?
Câu hỏi thực sự ở đây là điều gì sẽ xảy ra khi có điều gì đó không ổn?


00:00:17,300 --> 00:00:21,920
Sometimes the answer for that is what makes the difference between a well architected, easy to maintain
Đôi khi câu trả lời cho điều đó là điều tạo nên sự khác biệt giữa một kiến trúc tốt, dễ bảo trì


00:00:21,920 --> 00:00:25,190
system and a system that lacks a big picture view.
hệ thống và một hệ thống thiếu cái nhìn tổng thể.


00:00:25,310 --> 00:00:29,090
A good architecture will always include logging and monitoring engines.
Một kiến trúc tốt sẽ luôn bao gồm các công cụ ghi nhật ký và giám sát.


00:00:29,120 --> 00:00:35,180
These are the cornerstone of maintainable systems and make finding and fixing problems much simpler
Đây là nền tảng của các hệ thống có thể bảo trì và giúp việc tìm kiếm và khắc phục sự cố trở nên đơn giản hơn nhiều


00:00:35,180 --> 00:00:36,020
and faster.
và nhanh hơn.


00:00:36,050 --> 00:00:42,080
The goal here is that when there is a problem, a quick glance at the system's logs will direct us immediately
Mục tiêu ở đây là khi có vấn đề, chỉ cần lướt qua nhật ký hệ thống là chúng ta có thể biết ngay


00:00:42,080 --> 00:00:46,970
to the source of the problem and will provide us with as much as possible information regarding the
nguồn gốc của vấn đề và sẽ cung cấp cho chúng tôi càng nhiều thông tin càng tốt liên quan đến


00:00:46,970 --> 00:00:47,590
problem.
vấn đề.


00:00:47,600 --> 00:00:53,180
In addition, monitoring will allow us to view the current status of the system and notice problematic
Ngoài ra, việc giám sát sẽ cho phép chúng ta xem trạng thái hiện tại của hệ thống và nhận thấy vấn đề


00:00:53,210 --> 00:00:57,650
trends such as high memory consumption or above average exceptions count.
xu hướng như mức tiêu thụ bộ nhớ cao hoặc ngoại lệ trên mức trung bình được tính.


00:00:57,830 --> 00:01:02,820
Now, we already talked a bit about logging and monitoring in the software components architecture section,
Bây giờ, chúng ta đã nói một chút về việc ghi nhật ký và giám sát trong phần kiến trúc thành phần phần mềm,


00:01:02,820 --> 00:01:07,920
and I want to add to that two topics that are very important in a full blown system.
và tôi muốn bổ sung thêm vào đó hai chủ đề rất quan trọng trong một hệ thống hoàn chỉnh.


00:01:08,160 --> 00:01:10,860
The first is central logging service.
Đầu tiên là dịch vụ ghi nhật ký trung tâm.


00:01:10,920 --> 00:01:16,740
Since most systems comprised of more than one service which are developed by separate teams, often
Vì hầu hết các hệ thống bao gồm nhiều hơn một dịch vụ được phát triển bởi các nhóm riêng biệt, thường là


00:01:16,740 --> 00:01:19,440
each team uses its own logging mechanism.
mỗi đội sử dụng cơ chế ghi nhật ký riêng của mình.


00:01:19,440 --> 00:01:25,500
What happens is that every service has its own log format, its own log data and its own log location.
Điều xảy ra là mỗi dịch vụ đều có định dạng nhật ký riêng, dữ liệu nhật ký riêng và vị trí nhật ký riêng.


00:01:25,530 --> 00:01:29,830
One service might keep its log in the file system as a fixed format file.
Một dịch vụ có thể lưu nhật ký của mình trong hệ thống tệp dưới dạng tệp có định dạng cố định.


00:01:29,850 --> 00:01:35,100
The other will store log records in a relational database, while the third service will store Json
Dịch vụ còn lại sẽ lưu trữ các bản ghi nhật ký trong cơ sở dữ liệu quan hệ, trong khi dịch vụ thứ ba sẽ lưu trữ Json


00:01:35,100 --> 00:01:37,050
documents in a NoSQL database.
tài liệu trong cơ sở dữ liệu NoSQL.


00:01:37,080 --> 00:01:42,030
Each one is a legitimate approach, but it's extremely difficult to understand what the hell is going
Mỗi cách đều là một cách tiếp cận hợp lý, nhưng rất khó để hiểu được chuyện quái quỷ gì đang xảy ra ở


00:01:42,030 --> 00:01:46,950
on with the system when the developers should look at many sources with many formats in order to read
trên hệ thống khi các nhà phát triển phải xem xét nhiều nguồn với nhiều định dạng để đọc


00:01:46,950 --> 00:01:47,640
the logs.
các khúc gỗ.


00:01:48,060 --> 00:01:54,000
The preferred approach is to create a central logging service that all the other services write to it.
Cách tiếp cận được ưa chuộng là tạo một dịch vụ ghi nhật ký trung tâm mà tất cả các dịch vụ khác đều ghi vào đó.


00:01:54,030 --> 00:01:59,400
This central service will store the logs in a central repository, preferably a database to improve
Dịch vụ trung tâm này sẽ lưu trữ nhật ký trong kho lưu trữ trung tâm, tốt nhất là cơ sở dữ liệu để cải thiện


00:01:59,400 --> 00:02:04,740
querying and analytics, thus creating a single point of viewing for the logs data.
truy vấn và phân tích, do đó tạo ra một điểm xem duy nhất cho dữ liệu nhật ký.


00:02:05,040 --> 00:02:10,949
There are various methods the service can get, the logs, it can expose an API for the other services
Có nhiều phương pháp khác nhau mà dịch vụ có thể nhận được, nhật ký, nó có thể hiển thị API cho các dịch vụ khác


00:02:10,949 --> 00:02:16,050
to use, or it can watch specific folders for log files and then collect them.
để sử dụng hoặc nó có thể theo dõi các thư mục cụ thể để tìm tệp nhật ký và sau đó thu thập chúng.


00:02:16,080 --> 00:02:18,930
Tools like Logstash do just that.
Các công cụ như Logstash thực hiện chính xác điều đó.


00:02:18,960 --> 00:02:25,050
It watches a folder and when a file is added or modified, it collects it and stores it in a data store.
Nó theo dõi một thư mục và khi một tập tin được thêm vào hoặc sửa đổi, nó sẽ thu thập và lưu trữ trong kho dữ liệu.


00:02:25,260 --> 00:02:27,570
It doesn't really matter which approach you will take.
Thực ra, cách tiếp cận nào bạn áp dụng cũng không quan trọng.


00:02:27,600 --> 00:02:29,220
The bottom line must be the same.
Dòng cuối cùng phải giống nhau.


00:02:29,220 --> 00:02:35,340
The logs of the entire system must be accessible from a central point and must be present as a single
Nhật ký của toàn bộ hệ thống phải có thể truy cập được từ một điểm trung tâm và phải có mặt dưới dạng một


00:02:35,340 --> 00:02:36,120
format.
định dạng.


00:02:36,990 --> 00:02:39,450
The second topic is correlation ID.
Chủ đề thứ hai là ID tương quan.


00:02:41,250 --> 00:02:46,830
When our system has many services, we will have a lot of business flows that include more than one
Khi hệ thống của chúng tôi có nhiều dịch vụ, chúng tôi sẽ có rất nhiều luồng kinh doanh bao gồm nhiều hơn một


00:02:46,830 --> 00:02:47,550
service.
dịch vụ.


00:02:47,820 --> 00:02:53,490
We saw some examples previously during this course, for example, an investment recommendation service
Chúng ta đã thấy một số ví dụ trước đây trong khóa học này, ví dụ, một dịch vụ tư vấn đầu tư


00:02:53,490 --> 00:02:55,830
that calls the stock, quote, service.
gọi là cổ phiếu, báo giá, dịch vụ.


00:02:56,040 --> 00:02:59,370
Here we have two services participating in a single flow.
Ở đây chúng ta có hai dịch vụ tham gia vào một luồng duy nhất.


00:02:59,400 --> 00:03:05,700
One of the challenges in such a flow is to be able to understand which log record belongs to which flow.
Một trong những thách thức trong luồng như vậy là phải có khả năng hiểu được bản ghi nhật ký nào thuộc về luồng nào.


00:03:06,000 --> 00:03:10,770
For example, say user one asks for a recommendation.
Ví dụ, giả sử người dùng thứ nhất yêu cầu một lời giới thiệu.


00:03:10,890 --> 00:03:17,640
The recommendation service calls the stock service for data and then an error occurs in the stock service.
Dịch vụ đề xuất gọi dịch vụ chứng khoán để lấy dữ liệu và sau đó xảy ra lỗi trong dịch vụ chứng khoán.


00:03:17,910 --> 00:03:22,740
Both the services implement logging, so we have a good documentation of what exactly happened.
Cả hai dịch vụ đều thực hiện ghi nhật ký, do đó chúng tôi có tài liệu tốt về những gì thực sự đã xảy ra.


00:03:22,740 --> 00:03:28,740
In this case, we have a log written by the recommendation service indicates what the user asked for
Trong trường hợp này, chúng tôi có một bản ghi được viết bởi dịch vụ đề xuất cho biết người dùng đã yêu cầu


00:03:28,740 --> 00:03:31,800
and a log in the stock service documenting the error.
và một bản ghi trong dịch vụ chứng khoán ghi lại lỗi.


00:03:31,830 --> 00:03:33,540
So far so good.
Cho đến nay thì tốt.


00:03:33,690 --> 00:03:40,440
But what will happen if in parallel with user one request we have another request initialized by user
Nhưng điều gì sẽ xảy ra nếu song song với yêu cầu của người dùng thứ nhất, chúng ta có một yêu cầu khác được khởi tạo bởi người dùng thứ


00:03:40,440 --> 00:03:40,980
two.
hai.


00:03:41,010 --> 00:03:44,970
Let's say in this case, no error was thrown in the stock service.
Giả sử trong trường hợp này không có lỗi nào được đưa vào dịch vụ chứng khoán.


00:03:45,000 --> 00:03:51,240
We now have four log records, two of the recommendation services and the two of the stocks.
Bây giờ chúng ta có bốn bản ghi nhật ký, hai bản ghi dịch vụ khuyến nghị và hai bản ghi cổ phiếu.


00:03:51,270 --> 00:03:53,160
One of them documents an error.
Một trong số chúng ghi lại lỗi.


00:03:53,190 --> 00:03:56,730
How can we find out which record belongs to which flow?
Làm thế nào chúng ta có thể tìm ra bản ghi nào thuộc về luồng nào?


00:03:57,060 --> 00:03:59,650
It's not clear that the error belongs to user one.
Không rõ lỗi này có phải do người dùng số 1 gây ra không.


00:03:59,650 --> 00:04:04,980
S request, since there is nothing in the data that attributes the error to a specific request of the
Yêu cầu S, vì không có gì trong dữ liệu quy lỗi cho một yêu cầu cụ thể của


00:04:04,980 --> 00:04:06,390
recommendation service.
dịch vụ giới thiệu.


00:04:06,630 --> 00:04:09,330
The solution to this problem is correlation ID.
Giải pháp cho vấn đề này là ID tương quan.


00:04:09,990 --> 00:04:15,930
Correlation ID is an identifier that is assigned to a flow at the beginning of it and is passed from
ID tương quan là một mã định danh được gán cho một luồng ở đầu luồng đó và được truyền từ


00:04:15,930 --> 00:04:16,920
service to service.
dịch vụ đến dịch vụ.


00:04:16,950 --> 00:04:22,200
It is included in every log record and enable us to track the flow from start to end.
Nó được bao gồm trong mọi bản ghi nhật ký và cho phép chúng tôi theo dõi luồng từ đầu đến cuối.


00:04:22,350 --> 00:04:26,520
The correlation ID itself can be whatever identifier you will want to use.
Bản thân ID tương quan có thể là bất kỳ mã định danh nào bạn muốn sử dụng.


00:04:26,550 --> 00:04:28,350
Good is a popular choice.
Tốt là sự lựa chọn phổ biến.


00:04:28,380 --> 00:04:33,390
The only important thing is to make sure it is created at the beginning of the flow and is included
Điều quan trọng duy nhất là đảm bảo nó được tạo ra ở đầu luồng và được bao gồm


00:04:33,390 --> 00:04:35,010
in every log record.
trong mỗi bản ghi nhật ký.


00:04:35,190 --> 00:04:41,130
Using correlation ID, we can easily track a complete flow and understand what exactly happened in the
Sử dụng ID tương quan, chúng ta có thể dễ dàng theo dõi toàn bộ luồng và hiểu chính xác những gì đã xảy ra trong


00:04:41,130 --> 00:04:43,530
flow and more important, why.
dòng chảy và quan trọng hơn, tại sao.


00:04:44,010 --> 00:04:49,650
So to summarize, use central logging and correlation ID to make the system easy to maintain, especially
Tóm lại, hãy sử dụng nhật ký trung tâm và ID tương quan để giúp hệ thống dễ bảo trì, đặc biệt là


00:04:49,650 --> 00:04:53,430
when the system has many services that are used by different business flows.
khi hệ thống có nhiều dịch vụ được sử dụng bởi nhiều luồng kinh doanh khác nhau.


