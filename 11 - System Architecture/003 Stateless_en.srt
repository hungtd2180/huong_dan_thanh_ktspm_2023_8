1
00:00:00,780 --> 00:00:05,590
The state's architectural pattern is probably one of the most important patterns in software architecture.

2
00:00:05,910 --> 00:00:11,730
In fact, if I had to single out one pattern as the one you must implement, it probably will be the

3
00:00:11,730 --> 00:00:12,480
Stickles pattern.

4
00:00:13,080 --> 00:00:14,610
So what is this little thing?

5
00:00:15,300 --> 00:00:16,530
Instead is architecture.

6
00:00:16,860 --> 00:00:22,440
The application state is told in only two places, the data store and the user interface, if there

7
00:00:22,440 --> 00:00:22,920
is any.

8
00:00:23,280 --> 00:00:25,780
No state is told in the application code.

9
00:00:26,310 --> 00:00:32,790
Now, if you are not sure what state is, you can think of it simply as the applications data is a temporary

10
00:00:32,790 --> 00:00:35,520
or persistent to make it clearer.

11
00:00:35,700 --> 00:00:38,190
Let's use an example in our example.

12
00:00:38,190 --> 00:00:42,490
Our application has a look in mechanism similar to almost any other application out there.

13
00:00:43,020 --> 00:00:47,520
The application consists of user interface, login service and a database.

14
00:00:48,270 --> 00:00:50,760
The user enters his username and password.

15
00:00:51,030 --> 00:00:57,350
They are sent to the lock in service, which checks with the database whether such a user exists.

16
00:00:57,360 --> 00:01:03,840
If so, the user data is retrieved from the database and are stored in a variable in the service so

17
00:01:03,840 --> 00:01:07,010
that in future requests the application will be able to identify him.

18
00:01:08,010 --> 00:01:13,980
In this example, the state which in this case the user details, is stored in the application code,

19
00:01:14,280 --> 00:01:17,500
thus making it stateful rather than stateless.

20
00:01:18,150 --> 00:01:22,470
Now, what is the problem with why you stateful called considered a bad thing?

21
00:01:23,220 --> 00:01:27,930
To understand that, we should discuss two other concepts that we already mentioned before but are worth

22
00:01:27,930 --> 00:01:28,710
mentioning again.

23
00:01:29,400 --> 00:01:31,140
The first is scalability.

24
00:01:31,650 --> 00:01:37,440
As you probably remember, scalability is a capability of the system to grow and shrink as needed when

25
00:01:37,440 --> 00:01:43,710
there is a peak in the load of the system is scalable system can simply add more resources and we are

26
00:01:43,710 --> 00:01:44,640
not needed anymore.

27
00:01:44,790 --> 00:01:46,440
These resources are removed.

28
00:01:46,470 --> 00:01:49,080
All this without any interruption to the systems activity.

29
00:01:49,710 --> 00:01:55,560
As you probably remember, we discussed the difference between scale up and scale out and concluded

30
00:01:55,560 --> 00:01:59,130
that scaling out is almost always preferred over scaling up.

31
00:02:00,450 --> 00:02:02,250
The second concept is redundancy.

32
00:02:02,790 --> 00:02:08,550
Redundancy means that when resource of the system stops functioning is because of a system problem or

33
00:02:08,550 --> 00:02:09,810
because of a hardware glitch.

34
00:02:10,199 --> 00:02:15,720
The system will continue functioning using additional identical resources it has and can also perform

35
00:02:15,720 --> 00:02:22,770
automatic scaling to other resources instead of the malfunctioning resource, for example, with a system

36
00:02:22,770 --> 00:02:24,230
with more than one server.

37
00:02:24,540 --> 00:02:30,540
If one of our servers experiences electricity problems and shuts down, the system will be able to continue

38
00:02:30,540 --> 00:02:36,240
functioning with additional servers and perhaps even create a new server and add it to the existing

39
00:02:36,240 --> 00:02:36,600
ones.

40
00:02:37,290 --> 00:02:42,510
Those two concepts are the cornerstone of any good architecture and must be taken into account when

41
00:02:42,510 --> 00:02:46,170
designing the system now to implement its concept.

42
00:02:46,230 --> 00:02:48,330
Architecture must look like this.

43
00:02:51,020 --> 00:02:56,150
As you can see, we have more than one service instance, the exact number doesn't really matter, but

44
00:02:56,150 --> 00:03:00,600
the best practice is to use at least three instances in front of the service.

45
00:03:00,830 --> 00:03:06,650
There is a load balancing the robot and there is an appliance or a software that has two roles in the

46
00:03:06,650 --> 00:03:07,280
architecture.

47
00:03:07,910 --> 00:03:11,080
First, it distributes the load between the servers.

48
00:03:11,360 --> 00:03:16,490
If one of the servers is very busy, the balance will you out requests to another server.

49
00:03:16,760 --> 00:03:19,930
It will make sure no server will crash under the load.

50
00:03:20,480 --> 00:03:26,810
This capability supports the scalability we need using the robot until we can add more servers as needed

51
00:03:26,810 --> 00:03:29,960
and just notify the balance of the new servers.

52
00:03:30,530 --> 00:03:36,560
Second, it checks for the status of the servers enough to stop routing requests to malfunctioning ones.

53
00:03:37,190 --> 00:03:43,100
The way it works is that the load balancing center periodically requests to its servers called is a

54
00:03:43,360 --> 00:03:46,910
requests and expects to get a response with a positive answer.

55
00:03:47,210 --> 00:03:53,060
Any other response or no response at all will indicate there is a problem with the server and they will

56
00:03:53,060 --> 00:03:55,120
stop routing requests to the server.

57
00:03:55,610 --> 00:04:01,160
As you can see, the strong support, the redundancy we talked about, the robot also allows the application

58
00:04:01,160 --> 00:04:04,810
to continue walking even if one or more of the servers are down.

59
00:04:05,330 --> 00:04:08,240
This is exactly what we want to achieve with redundancy.

60
00:04:09,170 --> 00:04:13,050
There are a lot of balancing algorithms, but the basics are always the same.

61
00:04:13,370 --> 00:04:16,579
Distribute the load and stop routing to nonfunctioning servers.

62
00:04:17,300 --> 00:04:22,430
OK, so we have learned about scalability, redundancy and load balances, but what does it have to

63
00:04:22,430 --> 00:04:23,640
do with Tetris architecture?

64
00:04:24,230 --> 00:04:26,840
Well, actually, these are tied to each other.

65
00:04:27,230 --> 00:04:33,110
Stateful node status application will have a very hard time with scalability and redundancy.

66
00:04:33,710 --> 00:04:34,490
Lizzi Way.

67
00:04:36,250 --> 00:04:41,800
Remember the Logan scenario, let's look at it again, but now from a point of view of a full blown

68
00:04:41,800 --> 00:04:48,490
system with multiple servers and a load balancing, so the user logs in the quest containing the username

69
00:04:48,490 --> 00:04:53,770
and password is sent and reaches the load balancer, which routed to server number one.

70
00:04:54,400 --> 00:05:01,330
The server performs the login process and keeps a variable for verifying the user in future requests.

71
00:05:02,290 --> 00:05:04,710
Now the user performs another request.

72
00:05:04,870 --> 00:05:07,500
Let's say he wants to add item to a shopping cart.

73
00:05:08,050 --> 00:05:11,440
The request containing the item to be added is sent which to the.

74
00:05:12,100 --> 00:05:15,610
But this time the balance allows it to server number two.

75
00:05:16,450 --> 00:05:17,650
Now look what happens.

76
00:05:17,980 --> 00:05:22,660
The request arrives at several Oberto, but this server has no idea who the user is.

77
00:05:22,930 --> 00:05:25,690
The data containing the user data is on server number one.

78
00:05:26,560 --> 00:05:31,810
What will happen in this case is that the user will get an error message saying he should log into the

79
00:05:31,810 --> 00:05:35,290
system, which will leave him confused since he just did exactly that.

80
00:05:35,830 --> 00:05:39,120
And the one thing you don't want to do to your users is to confuse the.

81
00:05:40,230 --> 00:05:45,780
The reason for that, Evo, is that the court is stateful, the application code contains state or data,

82
00:05:46,110 --> 00:05:51,780
which is the user details in this case, additional resources or servers that are used for scalability

83
00:05:51,780 --> 00:05:57,330
or redundancy simply have no idea about the data in the code and behaves as if it does not exist.

84
00:05:57,940 --> 00:06:02,880
The state fullness of the code makes the application harder to scale and damage the user experience.

85
00:06:03,690 --> 00:06:09,570
Now, what would have happened in a stateless architecture in this case as user data will be saved in

86
00:06:09,570 --> 00:06:10,790
some kind of data store?

87
00:06:11,040 --> 00:06:16,290
It could be a relational database and logical database, a distributed cache, anything that can be

88
00:06:16,290 --> 00:06:17,870
accessed from all the servers.

89
00:06:18,360 --> 00:06:24,660
Then when the request arrives to the server, it could release the data stored for the user details

90
00:06:24,930 --> 00:06:30,480
and immediately knows exactly who the user is, regardless of the server that performs the actual login.

91
00:06:31,200 --> 00:06:33,780
Note that this goes the same for redundancy.

92
00:06:34,260 --> 00:06:40,500
If the server that performs login was shut down for whatever reason, subsequent request would be routed

93
00:06:40,500 --> 00:06:40,880
to it.

94
00:06:41,040 --> 00:06:44,820
And again, the server accepting the request will have no idea who the user is.

95
00:06:45,630 --> 00:06:48,510
So this is the reason why this architecture is so important.

96
00:06:48,750 --> 00:06:53,490
It fully supports scalability and redundancy, which make your application much more reliable.

97
00:06:54,660 --> 00:07:01,230
To conclude, always make you architecture stateless, there are almost no scenarios which justifies

98
00:07:01,440 --> 00:07:04,350
stateful architecture and you probably will never encounter them.

99
00:07:05,340 --> 00:07:10,500
This is the best way to support scalability and redundancy in your system, and you should definitely

100
00:07:10,500 --> 00:07:10,920
use it.

