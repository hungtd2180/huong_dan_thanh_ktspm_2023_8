00:00:00,780 --> 00:00:05,590
The state's architectural pattern is probably one of the most important patterns in software architecture.
Mô hình kiến trúc của tiểu bang có lẽ là một trong những mô hình quan trọng nhất trong kiến trúc phần mềm.


00:00:05,910 --> 00:00:11,730
In fact, if I had to single out one pattern as the one you must implement, it probably will be the
Trên thực tế, nếu tôi phải chỉ ra một mô hình mà bạn phải triển khai, thì có lẽ đó sẽ là mô hình


00:00:11,730 --> 00:00:12,480
Stickles pattern.
Mẫu Stickles.


00:00:13,080 --> 00:00:14,610
So what is this little thing?
Vậy thứ nhỏ bé này là gì?


00:00:15,300 --> 00:00:16,530
Instead is architecture.
Thay vào đó là kiến trúc.


00:00:16,860 --> 00:00:22,440
The application state is told in only two places, the data store and the user interface, if there
Trạng thái ứng dụng chỉ được thông báo ở hai nơi, kho dữ liệu và giao diện người dùng, nếu có


00:00:22,440 --> 00:00:22,920
is any.
là bất kỳ.


00:00:23,280 --> 00:00:25,780
No state is told in the application code.
Không có trạng thái nào được nêu trong mã ứng dụng.


00:00:26,310 --> 00:00:32,790
Now, if you are not sure what state is, you can think of it simply as the applications data is a temporary
Bây giờ, nếu bạn không chắc trạng thái là gì, bạn có thể nghĩ đơn giản là dữ liệu ứng dụng là tạm thời


00:00:32,790 --> 00:00:35,520
or persistent to make it clearer.
hoặc liên tục để làm cho nó rõ ràng hơn.


00:00:35,700 --> 00:00:38,190
Let's use an example in our example.
Chúng ta hãy sử dụng một ví dụ trong ví dụ của chúng ta.


00:00:38,190 --> 00:00:42,490
Our application has a look in mechanism similar to almost any other application out there.
Ứng dụng của chúng tôi có cơ chế giao diện tương tự như hầu hết các ứng dụng khác hiện có.


00:00:43,020 --> 00:00:47,520
The application consists of user interface, login service and a database.
Ứng dụng bao gồm giao diện người dùng, dịch vụ đăng nhập và cơ sở dữ liệu.


00:00:48,270 --> 00:00:50,760
The user enters his username and password.
Người dùng nhập tên người dùng và mật khẩu của mình.


00:00:51,030 --> 00:00:57,350
They are sent to the lock in service, which checks with the database whether such a user exists.
Chúng được gửi đến bộ phận khóa để kiểm tra xem người dùng đó có tồn tại trong cơ sở dữ liệu hay không.


00:00:57,360 --> 00:01:03,840
If so, the user data is retrieved from the database and are stored in a variable in the service so
Nếu vậy, dữ liệu người dùng được lấy từ cơ sở dữ liệu và được lưu trữ trong một biến trong dịch vụ để


00:01:03,840 --> 00:01:07,010
that in future requests the application will be able to identify him.
rằng trong tương lai yêu cầu ứng dụng sẽ có thể xác định được anh ta.


00:01:08,010 --> 00:01:13,980
In this example, the state which in this case the user details, is stored in the application code,
Trong ví dụ này, trạng thái mà trong trường hợp này là thông tin chi tiết của người dùng được lưu trữ trong mã ứng dụng,


00:01:14,280 --> 00:01:17,500
thus making it stateful rather than stateless.
do đó làm cho nó có trạng thái thay vì không có trạng thái.


00:01:18,150 --> 00:01:22,470
Now, what is the problem with why you stateful called considered a bad thing?
Vậy thì vấn đề tại sao trạng thái của bạn được coi là một điều tồi tệ là gì?


00:01:23,220 --> 00:01:27,930
To understand that, we should discuss two other concepts that we already mentioned before but are worth
Để hiểu điều đó, chúng ta nên thảo luận hai khái niệm khác mà chúng ta đã đề cập trước đó nhưng đáng giá


00:01:27,930 --> 00:01:28,710
mentioning again.
nhắc lại lần nữa.


00:01:29,400 --> 00:01:31,140
The first is scalability.
Đầu tiên là khả năng mở rộng.


00:01:31,650 --> 00:01:37,440
As you probably remember, scalability is a capability of the system to grow and shrink as needed when
Như bạn có thể nhớ, khả năng mở rộng là khả năng của hệ thống để phát triển và thu hẹp khi cần thiết khi


00:01:37,440 --> 00:01:43,710
there is a peak in the load of the system is scalable system can simply add more resources and we are
có một đỉnh trong tải của hệ thống là hệ thống có thể mở rộng có thể chỉ cần thêm nhiều tài nguyên hơn và chúng tôi là


00:01:43,710 --> 00:01:44,640
not needed anymore.
không cần thiết nữa.


00:01:44,790 --> 00:01:46,440
These resources are removed.
Những tài nguyên này đã bị xóa.


00:01:46,470 --> 00:01:49,080
All this without any interruption to the systems activity.
Tất cả những điều này không làm gián đoạn hoạt động của hệ thống.


00:01:49,710 --> 00:01:55,560
As you probably remember, we discussed the difference between scale up and scale out and concluded
Như bạn có thể nhớ, chúng tôi đã thảo luận về sự khác biệt giữa mở rộng quy mô và thu hẹp quy mô và kết luận


00:01:55,560 --> 00:01:59,130
that scaling out is almost always preferred over scaling up.
rằng việc mở rộng quy mô gần như luôn được ưu tiên hơn việc mở rộng quy mô.


00:02:00,450 --> 00:02:02,250
The second concept is redundancy.
Khái niệm thứ hai là sự dự phòng.


00:02:02,790 --> 00:02:08,550
Redundancy means that when resource of the system stops functioning is because of a system problem or
Dự phòng có nghĩa là khi tài nguyên của hệ thống ngừng hoạt động là do sự cố hệ thống hoặc


00:02:08,550 --> 00:02:09,810
because of a hardware glitch.
vì lỗi phần cứng.


00:02:10,199 --> 00:02:15,720
The system will continue functioning using additional identical resources it has and can also perform
Hệ thống sẽ tiếp tục hoạt động bằng cách sử dụng các tài nguyên giống hệt nhau mà nó có và cũng có thể thực hiện


00:02:15,720 --> 00:02:22,770
automatic scaling to other resources instead of the malfunctioning resource, for example, with a system
tự động mở rộng sang các tài nguyên khác thay vì tài nguyên bị trục trặc, ví dụ, với hệ thống


00:02:22,770 --> 00:02:24,230
with more than one server.
với nhiều hơn một máy chủ.


00:02:24,540 --> 00:02:30,540
If one of our servers experiences electricity problems and shuts down, the system will be able to continue
Nếu một trong các máy chủ của chúng tôi gặp sự cố về điện và tắt, hệ thống sẽ có thể tiếp tục


00:02:30,540 --> 00:02:36,240
functioning with additional servers and perhaps even create a new server and add it to the existing
hoạt động với các máy chủ bổ sung và thậm chí có thể tạo một máy chủ mới và thêm nó vào máy chủ hiện có


00:02:36,240 --> 00:02:36,600
ones.
những cái.


00:02:37,290 --> 00:02:42,510
Those two concepts are the cornerstone of any good architecture and must be taken into account when
Hai khái niệm đó là nền tảng của bất kỳ kiến trúc tốt nào và phải được tính đến khi


00:02:42,510 --> 00:02:46,170
designing the system now to implement its concept.
thiết kế hệ thống ngay bây giờ để thực hiện khái niệm của nó.


00:02:46,230 --> 00:02:48,330
Architecture must look like this.
Kiến trúc phải trông như thế này.


00:02:51,020 --> 00:02:56,150
As you can see, we have more than one service instance, the exact number doesn't really matter, but
Như bạn có thể thấy, chúng ta có nhiều hơn một phiên bản dịch vụ, con số chính xác không thực sự quan trọng, nhưng


00:02:56,150 --> 00:03:00,600
the best practice is to use at least three instances in front of the service.
cách thực hành tốt nhất là sử dụng ít nhất ba trường hợp trước dịch vụ.


00:03:00,830 --> 00:03:06,650
There is a load balancing the robot and there is an appliance or a software that has two roles in the
Có một robot cân bằng tải và có một thiết bị hoặc phần mềm có hai vai trò trong


00:03:06,650 --> 00:03:07,280
architecture.
kiến trúc.


00:03:07,910 --> 00:03:11,080
First, it distributes the load between the servers.
Đầu tiên, nó phân phối tải giữa các máy chủ.


00:03:11,360 --> 00:03:16,490
If one of the servers is very busy, the balance will you out requests to another server.
Nếu một trong các máy chủ quá bận, số dư sẽ chuyển các yêu cầu của bạn đến một máy chủ khác.


00:03:16,760 --> 00:03:19,930
It will make sure no server will crash under the load.
Nó sẽ đảm bảo không có máy chủ nào bị sập khi tải.


00:03:20,480 --> 00:03:26,810
This capability supports the scalability we need using the robot until we can add more servers as needed
Khả năng này hỗ trợ khả năng mở rộng mà chúng ta cần khi sử dụng robot cho đến khi chúng ta có thể thêm nhiều máy chủ hơn khi cần


00:03:26,810 --> 00:03:29,960
and just notify the balance of the new servers.
và chỉ thông báo số dư của các máy chủ mới.


00:03:30,530 --> 00:03:36,560
Second, it checks for the status of the servers enough to stop routing requests to malfunctioning ones.
Thứ hai, nó kiểm tra trạng thái của máy chủ đủ để dừng việc chuyển hướng các yêu cầu đến những máy chủ không hoạt động.


00:03:37,190 --> 00:03:43,100
The way it works is that the load balancing center periodically requests to its servers called is a
Cách thức hoạt động của nó là trung tâm cân bằng tải định kỳ yêu cầu đến các máy chủ của nó được gọi là


00:03:43,360 --> 00:03:46,910
requests and expects to get a response with a positive answer.
yêu cầu và mong đợi nhận được phản hồi tích cực.


00:03:47,210 --> 00:03:53,060
Any other response or no response at all will indicate there is a problem with the server and they will
Bất kỳ phản hồi nào khác hoặc không có phản hồi nào cả sẽ chỉ ra rằng có sự cố với máy chủ và họ sẽ


00:03:53,060 --> 00:03:55,120
stop routing requests to the server.
dừng việc định tuyến yêu cầu đến máy chủ.


00:03:55,610 --> 00:04:01,160
As you can see, the strong support, the redundancy we talked about, the robot also allows the application
Như bạn có thể thấy, sự hỗ trợ mạnh mẽ, sự dự phòng mà chúng ta đã nói đến, robot cũng cho phép ứng dụng


00:04:01,160 --> 00:04:04,810
to continue walking even if one or more of the servers are down.
tiếp tục đi bộ ngay cả khi một hoặc nhiều máy chủ ngừng hoạt động.


00:04:05,330 --> 00:04:08,240
This is exactly what we want to achieve with redundancy.
Đây chính xác là những gì chúng ta muốn đạt được với sự dự phòng.


00:04:09,170 --> 00:04:13,050
There are a lot of balancing algorithms, but the basics are always the same.
Có rất nhiều thuật toán cân bằng, nhưng về cơ bản thì luôn giống nhau.


00:04:13,370 --> 00:04:16,579
Distribute the load and stop routing to nonfunctioning servers.
Phân phối tải và dừng định tuyến đến các máy chủ không hoạt động.


00:04:17,300 --> 00:04:22,430
OK, so we have learned about scalability, redundancy and load balances, but what does it have to
Được rồi, vì vậy chúng ta đã tìm hiểu về khả năng mở rộng, dự phòng và cân bằng tải, nhưng nó có liên quan gì đến


00:04:22,430 --> 00:04:23,640
do with Tetris architecture?
làm gì với kiến trúc Tetris?


00:04:24,230 --> 00:04:26,840
Well, actually, these are tied to each other.
Vâng, thực ra, chúng có liên quan với nhau.


00:04:27,230 --> 00:04:33,110
Stateful node status application will have a very hard time with scalability and redundancy.
Ứng dụng trạng thái nút có trạng thái sẽ gặp rất nhiều khó khăn về khả năng mở rộng và dự phòng.


00:04:33,710 --> 00:04:34,490
Lizzi Way.
Đường Lizzi.


00:04:36,250 --> 00:04:41,800
Remember the Logan scenario, let's look at it again, but now from a point of view of a full blown
Hãy nhớ lại kịch bản Logan, chúng ta hãy xem lại nó một lần nữa, nhưng bây giờ từ góc nhìn của một 68 đầy đủ


00:04:41,800 --> 00:04:48,490
system with multiple servers and a load balancing, so the user logs in the quest containing the username
hệ thống có nhiều máy chủ và cân bằng tải, do đó người dùng đăng nhập vào nhiệm vụ có chứa tên người dùng


00:04:48,490 --> 00:04:53,770
and password is sent and reaches the load balancer, which routed to server number one.
và mật khẩu được gửi và đến bộ cân bằng tải, được định tuyến đến máy chủ số một.


00:04:54,400 --> 00:05:01,330
The server performs the login process and keeps a variable for verifying the user in future requests.
Máy chủ thực hiện quy trình đăng nhập và giữ một biến để xác minh người dùng trong các yêu cầu trong tương lai.


00:05:02,290 --> 00:05:04,710
Now the user performs another request.
Bây giờ người dùng thực hiện một yêu cầu khác.


00:05:04,870 --> 00:05:07,500
Let's say he wants to add item to a shopping cart.
Giả sử anh ta muốn thêm sản phẩm vào giỏ hàng.


00:05:08,050 --> 00:05:11,440
The request containing the item to be added is sent which to the.
Yêu cầu chứa mục cần thêm được gửi đến.


00:05:12,100 --> 00:05:15,610
But this time the balance allows it to server number two.
Nhưng lần này sự cân bằng cho phép nó đạt đến vị trí thứ hai.


00:05:16,450 --> 00:05:17,650
Now look what happens.
Bây giờ hãy xem điều gì xảy ra.


00:05:17,980 --> 00:05:22,660
The request arrives at several Oberto, but this server has no idea who the user is.
Yêu cầu được gửi đến một số Oberto, nhưng máy chủ này không biết người dùng là ai.


00:05:22,930 --> 00:05:25,690
The data containing the user data is on server number one.
Dữ liệu chứa dữ liệu người dùng nằm trên máy chủ số một.


00:05:26,560 --> 00:05:31,810
What will happen in this case is that the user will get an error message saying he should log into the
Điều sẽ xảy ra trong trường hợp này là người dùng sẽ nhận được thông báo lỗi yêu cầu họ phải đăng nhập vào


00:05:31,810 --> 00:05:35,290
system, which will leave him confused since he just did exactly that.
hệ thống, điều này sẽ khiến anh ấy bối rối vì anh ấy vừa làm chính xác điều đó.


00:05:35,830 --> 00:05:39,120
And the one thing you don't want to do to your users is to confuse the.
Và một điều bạn không muốn làm với người dùng của mình là gây nhầm lẫn.


00:05:40,230 --> 00:05:45,780
The reason for that, Evo, is that the court is stateful, the application code contains state or data,
Lý do cho điều đó, Evo, là tòa án có trạng thái, mã ứng dụng chứa trạng thái hoặc dữ liệu,


00:05:46,110 --> 00:05:51,780
which is the user details in this case, additional resources or servers that are used for scalability
trong trường hợp này là thông tin chi tiết của người dùng, các tài nguyên bổ sung hoặc máy chủ được sử dụng để mở rộng quy mô


00:05:51,780 --> 00:05:57,330
or redundancy simply have no idea about the data in the code and behaves as if it does not exist.
hoặc sự dư thừa chỉ đơn giản là không có ý tưởng về dữ liệu trong mã và hoạt động như thể nó không tồn tại.


00:05:57,940 --> 00:06:02,880
The state fullness of the code makes the application harder to scale and damage the user experience.
Trạng thái đầy đủ của mã khiến ứng dụng khó mở rộng quy mô hơn và làm giảm trải nghiệm của người dùng.


00:06:03,690 --> 00:06:09,570
Now, what would have happened in a stateless architecture in this case as user data will be saved in
Bây giờ, điều gì sẽ xảy ra trong kiến trúc không trạng thái trong trường hợp này khi dữ liệu người dùng sẽ được lưu trong


00:06:09,570 --> 00:06:10,790
some kind of data store?
một số loại kho dữ liệu?


00:06:11,040 --> 00:06:16,290
It could be a relational database and logical database, a distributed cache, anything that can be
Nó có thể là cơ sở dữ liệu quan hệ và cơ sở dữ liệu logic, bộ nhớ đệm phân tán, bất kỳ thứ gì có thể là


00:06:16,290 --> 00:06:17,870
accessed from all the servers.
được truy cập từ tất cả các máy chủ.


00:06:18,360 --> 00:06:24,660
Then when the request arrives to the server, it could release the data stored for the user details
Sau đó, khi yêu cầu đến máy chủ, nó có thể giải phóng dữ liệu được lưu trữ cho thông tin chi tiết của người dùng


00:06:24,930 --> 00:06:30,480
and immediately knows exactly who the user is, regardless of the server that performs the actual login.
và ngay lập tức biết chính xác người dùng là ai, bất kể máy chủ nào thực hiện việc đăng nhập thực tế.


00:06:31,200 --> 00:06:33,780
Note that this goes the same for redundancy.
Lưu ý rằng điều này cũng tương tự đối với sự dự phòng.


00:06:34,260 --> 00:06:40,500
If the server that performs login was shut down for whatever reason, subsequent request would be routed
Nếu máy chủ thực hiện đăng nhập bị tắt vì bất kỳ lý do gì, yêu cầu tiếp theo sẽ được định tuyến


00:06:40,500 --> 00:06:40,880
to it.
với nó.


00:06:41,040 --> 00:06:44,820
And again, the server accepting the request will have no idea who the user is.
Và một lần nữa, máy chủ chấp nhận yêu cầu sẽ không biết người dùng là ai.


00:06:45,630 --> 00:06:48,510
So this is the reason why this architecture is so important.
Vậy đây chính là lý do tại sao kiến trúc này lại quan trọng đến vậy.


00:06:48,750 --> 00:06:53,490
It fully supports scalability and redundancy, which make your application much more reliable.
Nó hỗ trợ đầy đủ khả năng mở rộng và dự phòng, giúp ứng dụng của bạn đáng tin cậy hơn nhiều.


00:06:54,660 --> 00:07:01,230
To conclude, always make you architecture stateless, there are almost no scenarios which justifies
Để kết luận, hãy luôn làm cho kiến trúc của bạn không có trạng thái, hầu như không có kịch bản nào biện minh cho


00:07:01,440 --> 00:07:04,350
stateful architecture and you probably will never encounter them.
kiến trúc có trạng thái và bạn có thể sẽ không bao giờ gặp chúng.


00:07:05,340 --> 00:07:10,500
This is the best way to support scalability and redundancy in your system, and you should definitely
Đây là cách tốt nhất để hỗ trợ khả năng mở rộng và dự phòng trong hệ thống của bạn và bạn chắc chắn nên 100%


00:07:10,500 --> 00:07:10,920
use it.
sử dụng nó.


