1
00:00:00,200 --> 00:00:06,980
Those of you remember the first Shrek movie, probably remember the layers in Shrek tries to explain

2
00:00:06,980 --> 00:00:12,980
to Donkey that ogres like every other living creature have layers and they are not one dimensional evil

3
00:00:12,980 --> 00:00:13,760
creatures.

4
00:00:13,790 --> 00:00:19,010
This is one of the funniest scenes in the movie, and it makes me laugh every time I watch it and I

5
00:00:19,010 --> 00:00:20,030
watch it a lot.

6
00:00:20,120 --> 00:00:25,790
And it also holds true for software architecture because a good software component, just like evil

7
00:00:25,820 --> 00:00:28,310
ogres, will always have layers.

8
00:00:28,340 --> 00:00:32,450
The role of the layer, though, is quite different in software than in monsters.

9
00:00:32,479 --> 00:00:37,460
The layers in software component represent the horizontal functionality of the code in the layers.

10
00:00:37,490 --> 00:00:39,050
Now what does it mean?

11
00:00:39,260 --> 00:00:43,310
Traditionally, software components perform three basic actions.

12
00:00:43,880 --> 00:00:48,350
One, expose the software functionality through some kind of interface.

13
00:00:48,350 --> 00:00:51,740
This is usually done via API or user interface.

14
00:00:51,740 --> 00:00:58,400
Depends on the type of the application to execute logic on the data that is received from the user.

15
00:00:58,400 --> 00:01:01,380
Again via API or user interface.

16
00:01:01,410 --> 00:01:06,750
This logic often includes validation processing, additional calculations, enrichment and more.

17
00:01:07,560 --> 00:01:12,640
And three Save the data into the data store and retrieve data from the data store.

18
00:01:12,660 --> 00:01:19,440
Now these three actions are usually represented as layers when every layer has its own name in software

19
00:01:19,440 --> 00:01:20,470
components architecture.

20
00:01:20,490 --> 00:01:24,180
These layers are called user interface or UI.

21
00:01:24,210 --> 00:01:31,770
If the component has user interface or service interface or see if the component exposes API business

22
00:01:31,770 --> 00:01:36,870
logic or BLE and data access layer or dull.

23
00:01:37,350 --> 00:01:41,810
Each layer consists of various classes that handles the layers designated task.

24
00:01:41,820 --> 00:01:47,430
For example, the dull layer will have classes that handle opening connection to the data store, querying

25
00:01:47,430 --> 00:01:51,510
data saving data handling transactions and more.

26
00:01:51,540 --> 00:01:57,840
The layer will have classes that performs validation, enrichment and computations.

27
00:01:58,590 --> 00:02:06,570
The C layer will have classes that exposes API, translate Json documents to concrete objects, handle

28
00:02:06,570 --> 00:02:09,090
authentication and authorization and more.

29
00:02:09,120 --> 00:02:12,870
Now you might be asking what is the purpose of the layer?

30
00:02:13,110 --> 00:02:16,350
Why would I want to separate the code to these layers?

31
00:02:16,380 --> 00:02:18,810
Well, there are some very good reasons for that.

32
00:02:18,840 --> 00:02:22,860
First, it forces you to write code that is well formed and focused.

33
00:02:22,890 --> 00:02:28,410
It's generally a bad idea to write a method that performs multiple tasks, and we will discuss it later

34
00:02:28,410 --> 00:02:29,280
in this section.

35
00:02:29,280 --> 00:02:34,800
And by splitting the code to well defined layers, the code will deal only with its layers goal.

36
00:02:34,860 --> 00:02:38,250
Second layer component is a modular component.

37
00:02:38,280 --> 00:02:43,470
As you might recall, we discussed modularity as one of the most important quality attribute of a software,

38
00:02:43,500 --> 00:02:47,880
and by implementing layers our component becomes just this modular.

39
00:02:48,060 --> 00:02:50,760
Assuming the communication between the layer is done correctly.

40
00:02:50,760 --> 00:02:52,410
And we will touch on this in a minute.

41
00:02:52,440 --> 00:02:54,990
It's extremely easy to substitute layers.

42
00:02:54,990 --> 00:03:01,260
For example, if the current implementation works against SQL Server and you want to switch to MongoDB

43
00:03:01,370 --> 00:03:06,470
in a well layered component, you will only need to replace the dull layer and no other layers will

44
00:03:06,470 --> 00:03:09,550
be affected, which makes your code really modular.

45
00:03:09,560 --> 00:03:14,660
In order to develop a good layered architecture, there are some concepts that must be followed.

46
00:03:14,660 --> 00:03:22,190
One code flow, which means a layer can call only a layer that is directly beneath it in the code.

47
00:03:22,190 --> 00:03:28,790
What this means is that, for example, the code in the C layer can call only a code in the B layer,

48
00:03:28,820 --> 00:03:31,370
never a code in the dull layer.

49
00:03:31,550 --> 00:03:35,780
In addition, a code can never call a code in a layer above it.

50
00:03:35,780 --> 00:03:41,000
For example, the dull code will never call a code in the blue layer.

51
00:03:41,030 --> 00:03:45,230
The idea here is to keep the separation between the layers as strict as possible.

52
00:03:45,230 --> 00:03:50,750
If you will enable skipping layers, that will mean that the C layer, for example, knows about the

53
00:03:50,750 --> 00:03:51,680
dull layer.

54
00:03:51,680 --> 00:03:58,220
And that means that if you will change the dull layer, it will necessarily affect the C layer, making

55
00:03:58,220 --> 00:04:00,320
the whole component much less modular.

56
00:04:01,570 --> 00:04:04,180
Second loose coupling.

57
00:04:04,360 --> 00:04:08,950
We will talk about this concept much more in the next lecture, but suffice to say that we need this

58
00:04:08,950 --> 00:04:14,090
layer to communicate with each other in a way that will have the minimum impact when there is a change.

59
00:04:14,110 --> 00:04:17,290
Let's see an example for this which will explain this concept.

60
00:04:17,890 --> 00:04:21,820
Let's say this is a code in the layer that calls to the doll.

61
00:04:22,660 --> 00:04:26,770
The specific code is written in Dotnet, but it holds true for any other language too.

62
00:04:26,980 --> 00:04:32,410
As you can see, the code references directly the doll classes using the new keyword.

63
00:04:32,650 --> 00:04:38,080
Although easy to implement, having a direct reference between layers will render them strongly coupled.

64
00:04:38,110 --> 00:04:43,270
What this means is that if you will try to switch to other doll, we will have to touch all the code

65
00:04:43,270 --> 00:04:45,240
that references it from XBL.

66
00:04:45,280 --> 00:04:46,720
And that's bad.

67
00:04:47,290 --> 00:04:53,050
The correct way of referencing layers is via dependency injection when the calling layer references

68
00:04:53,050 --> 00:04:58,760
only an interface representing the desired functionality but not the concrete class itself.

69
00:04:58,780 --> 00:05:04,970
Later, when we switch to other implementation, the code will not be affected since it wasn't referencing

70
00:05:04,970 --> 00:05:06,770
the doll in the first place.

71
00:05:07,100 --> 00:05:12,230
This concept is called dependency injection and we will discuss it later in this section.

72
00:05:13,880 --> 00:05:16,910
The third concept is exception handling between layers.

73
00:05:16,940 --> 00:05:22,490
Now, while the first two concepts are quite known, this one is more obscure and not all architects

74
00:05:22,490 --> 00:05:23,660
are familiar with it.

75
00:05:23,690 --> 00:05:29,660
The exception handling concept states that each layer must hide its inner exceptions and not let the

76
00:05:29,660 --> 00:05:35,470
layers above it to know about it, but rather let them add generic non specific error message.

77
00:05:35,480 --> 00:05:39,530
For example, let's say our doll works with MySQL database.

78
00:05:39,530 --> 00:05:45,230
Now database exceptions tend to be very specific, which is good since it helps us pinpoint the problems

79
00:05:45,230 --> 00:05:46,220
and fix them.

80
00:05:46,730 --> 00:05:52,790
The problem is that this exception is thrown as a MySQL exception class and it contains data about the

81
00:05:52,790 --> 00:05:54,530
inner workings of the database.

82
00:05:54,560 --> 00:05:59,930
One of the most important concepts of the layer architecture is that each layer is encapsulated and

83
00:05:59,930 --> 00:06:02,990
does not expose info about its inner workings.

84
00:06:03,110 --> 00:06:09,290
If the doll will throw this exception, that means the bee will know the doll is using MySQL, while

85
00:06:09,290 --> 00:06:11,630
it should be completely oblivious to its inner working.

86
00:06:11,630 --> 00:06:18,470
So the correct pattern here is for the doll to analyze the exception, write it to a log and create

87
00:06:18,470 --> 00:06:24,590
another exception called, for example, data exception with a generic error message that there was

88
00:06:24,590 --> 00:06:26,510
a problem accessing the data store.

89
00:06:26,840 --> 00:06:32,540
This way the only thing the bell knows is that the doll has some problems with the data actions, which

90
00:06:32,540 --> 00:06:35,360
is fine because that all it has to know about the doll.

91
00:06:36,170 --> 00:06:39,920
So these were the three concepts that make a good layered component.

92
00:06:40,430 --> 00:06:43,280
Now, there is an additional point I would like to cover.

93
00:06:44,870 --> 00:06:50,900
You might have heard about a concept called an entered application or a three tiered application and

94
00:06:50,900 --> 00:06:55,190
wondered what it is and what is the difference between tier and layer?

95
00:06:55,400 --> 00:07:00,410
Well, it looks like those terms, tier and layer are often interchangeable, but they shouldn't, and

96
00:07:00,410 --> 00:07:02,690
there is actually a big difference between them.

97
00:07:03,050 --> 00:07:06,930
A layer is what we talked about, a piece of code that is part of a component.

98
00:07:06,950 --> 00:07:11,770
A component, let us all remind ourselves, is a code collection that runs in a single process.

99
00:07:11,780 --> 00:07:16,280
There is no networking involved when the various classes in the component communicate with each other

100
00:07:16,280 --> 00:07:19,850
and they all share the same computing resource tier.

101
00:07:19,880 --> 00:07:22,540
On the other hand, is a distributed piece of code.

102
00:07:22,550 --> 00:07:28,760
It's deployed independently and communicates with other tools via network protocols such as Http.

103
00:07:29,120 --> 00:07:34,070
So when talking about a three tier application, what we actually mean is that the application has three

104
00:07:34,070 --> 00:07:40,010
independent components deployed across the network that communicate using the network, which is completely

105
00:07:40,010 --> 00:07:42,890
different from layers which are part of the same process.

106
00:07:43,730 --> 00:07:46,770
Okay, so that concludes our discussion around layers.

107
00:07:46,790 --> 00:07:51,890
Keep in mind that layers are almost always a good idea and it should be your default pattern for implementing

108
00:07:51,890 --> 00:07:52,760
components.

