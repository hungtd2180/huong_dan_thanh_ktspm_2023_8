1
00:00:00,200 --> 00:00:05,900
Nếu bạn đang phát triển trên nền tảng hướng đối tượng như Java hoặc Dotnet, có lẽ bạn đã quen thuộc

2
00:00:05,900 --> 00:00:06,980
với giao diện.

3
00:00:07,010 --> 00:00:12,290
Nếu không, thì có lẽ có một số khái niệm tương tự như giao diện trong ngôn ngữ bạn thích, chẳng hạn như

4
00:00:12,290 --> 00:00:14,270
như các lớp trừu tượng trong Python.

5
00:00:14,510 --> 00:00:17,900
Vậy thì, chúng ta hãy cùng tìm hiểu về giao diện nhé.

6
00:00:17,990 --> 00:00:23,540
Về cơ bản, giao diện là một hợp đồng khai báo chữ ký của một triển khai.

7
00:00:23,630 --> 00:00:30,110
Giao diện nêu rằng với một đoạn mã được đưa ra để thực hiện một nhiệm vụ cụ thể, các phương thức của nó sẽ trông giống như

8
00:00:30,140 --> 00:00:31,520
theo một cách cụ thể.

9
00:00:32,060 --> 00:00:36,900
Ví dụ, hãy nghĩ về một đoạn mã thực hiện một số phép tính toán học cơ bản.

10
00:00:36,920 --> 00:00:42,320
Để đơn giản, chúng ta hãy giả sử nó chỉ xử lý những phép toán cơ bản.

11
00:00:42,350 --> 00:00:45,800
Chúng ta mong đợi chữ ký phương thức mã sẽ trông như thế nào?

12
00:00:45,830 --> 00:00:47,750
Có lẽ là như thế.

13
00:00:48,110 --> 00:00:52,970
Lưu ý rằng tôi sử dụng Dotnet để trình bày mã, nhưng nó sẽ trông tương tự trong các ngôn ngữ khác.

14
00:00:53,060 --> 00:00:58,790
Như bạn có thể thấy, giao diện định nghĩa các phương thức và chữ ký, nhưng không bao gồm bất kỳ định nghĩa nào.

15
00:00:59,030 --> 00:01:03,120
Vậy mục đích của giao diện là gì và tại sao chúng lại quan trọng đến vậy?

16
00:01:03,150 --> 00:01:09,840
Câu trả lời rất đơn giản. Sử dụng giao diện cho phép chúng ta làm cho mã của mình được kết nối lỏng lẻo, nghĩa là chúng ta không

17
00:01:09,870 --> 00:01:11,940
liên kết một lớp với lớp khác.

18
00:01:11,970 --> 00:01:14,220
Chúng ta hãy dùng một ví dụ để làm rõ hơn.

19
00:01:14,370 --> 00:01:19,980
Tiếp tục với ví dụ về máy tính của chúng ta, hãy giả sử chúng ta có một lớp có tên là máy tính và một lớp chính

20
00:01:19,980 --> 00:01:23,340
tham chiếu và sử dụng mà không cần sử dụng giao diện.

21
00:01:23,370 --> 00:01:25,470
Mã của chúng ta sẽ trông như thế này.

22
00:01:27,360 --> 00:01:31,040
Như bạn thấy, lớp chính phải quen thuộc với lớp máy tính.

23
00:01:31,050 --> 00:01:32,580
Nó xuất hiện trong mã của nó.

24
00:01:32,610 --> 00:01:37,740
Điều gì sẽ xảy ra nếu bạn muốn thay thế lớp máy tính bằng một lớp khác tốt hơn?

25
00:01:37,740 --> 00:01:41,250
Ví dụ như với máy tính tiên tiến.

26
00:01:41,280 --> 00:01:45,620
Chúng ta sẽ phải thay đổi mã trong lớp chính và biên dịch lại.

27
00:01:45,630 --> 00:01:49,590
Và điều đó có nghĩa là các lớp học có mối liên hệ chặt chẽ và gắn kết chặt chẽ.

28
00:01:49,800 --> 00:01:53,970
Có một câu nói trong lĩnh vực kiến trúc phần mềm như thế này.

29
00:01:55,190 --> 00:01:56,630
Mới là keo.

30
00:01:56,660 --> 00:02:02,540
Điều đó có nghĩa là bất cứ khi nào bạn nhìn thấy một từ khóa mới, như trong mã của chúng tôi ở đây, bạn biết đấy, có một từ khóa đóng

31
00:02:02,570 --> 00:02:05,750
mối liên kết chặt chẽ giữa hai lớp đó.

32
00:02:05,750 --> 00:02:08,210
Và đây là điều bạn muốn tránh.

33
00:02:08,419 --> 00:02:14,390
Các lớp liên kết mạnh thường là một ý tưởng tồi và sẽ làm cho mã của bạn kém tính mô-đun và kém linh hoạt hơn nhiều.

34
00:02:15,510 --> 00:02:18,710
Hãy cùng xem điều gì sẽ xảy ra nếu chúng ta sử dụng giao diện trong mã của mình.

35
00:02:18,720 --> 00:02:24,600
Trong trường hợp này, lớp chính không biết lớp máy tính mà chỉ biết làm việc với giao diện.

36
00:02:24,630 --> 00:02:29,940
Giao diện xác định những gì máy tính có thể làm nhưng không đưa ra gợi ý về việc triển khai cụ thể

37
00:02:29,940 --> 00:02:31,320
của máy tính là.

38
00:02:31,440 --> 00:02:37,170
Máy tính có thể được thực hiện bởi lớp máy tính mà chúng ta đã thấy trước đó hoặc bởi một lớp hoàn toàn khác

39
00:02:37,170 --> 00:02:37,710
lớp học.

40
00:02:37,740 --> 00:02:44,220
Lớp chính sẽ không biết gì về nó và điều đó cho phép chúng ta tạo mã thực sự có tính mô-đun.

41
00:02:44,220 --> 00:02:49,830
Chúng ta có thể chuyển đổi các triển khai mà không cần các khối mã khác nhận biết, và đó chính là sức mạnh thực sự

42
00:02:49,830 --> 00:02:50,940
của giao diện.

43
00:02:51,210 --> 00:02:54,510
Vậy việc thực hiện đến từ đâu?

44
00:02:54,510 --> 00:02:56,940
Rốt cuộc thì cũng có một số triển khai ở đây.

45
00:02:56,970 --> 00:02:59,430
Mã chạy và đưa ra kết quả.

46
00:02:59,520 --> 00:03:04,140
Vâng, như bạn có thể thấy, phần triển khai được trả về từ phương thức Getinstance.

47
00:03:04,170 --> 00:03:10,740
Phương pháp này sử dụng một mẫu gọi là dependency injection để inject một thể hiện, một triển khai cụ thể

48
00:03:10,740 --> 00:03:11,760
đến một giao diện.

49
00:03:11,760 --> 00:03:13,950
Và đây là chủ đề của bài giảng tiếp theo.

50
00:03:13,950 --> 00:03:21,370
Và cho đến lúc đó, hãy nhớ rằng mới là keo dán luôn thích sử dụng giao diện thay vì tham chiếu trực tiếp giữa

51
00:03:21,370 --> 00:03:21,940
lớp học.

52
00:03:21,940 --> 00:03:25,840
Nó sẽ làm cho mã của bạn có tính mô-đun hơn và dễ sửa đổi và bảo trì hơn.

