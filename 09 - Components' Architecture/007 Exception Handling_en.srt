1
00:00:00,260 --> 00:00:05,060
One of the most important aspects of a well written component is its exception handling.

2
00:00:05,090 --> 00:00:09,950
We have already covered exception handling as a part of the layered pattern, but there are some best

3
00:00:09,950 --> 00:00:13,790
practices to employ when handling exceptions that weren't mentioned before.

4
00:00:13,940 --> 00:00:18,320
First, only catch exception if you have something to do with it.

5
00:00:18,470 --> 00:00:24,260
I often see code that catches exceptions and then simply writes the exception to a log and does nothing

6
00:00:24,260 --> 00:00:25,040
else with it.

7
00:00:25,070 --> 00:00:30,320
This is usually not a good way to handle exceptions as this behavior can be achieved using a central

8
00:00:30,320 --> 00:00:36,980
exception handling mechanism such as filters in ASP.Net and does not require to have a try catch in

9
00:00:36,980 --> 00:00:38,270
every piece of code.

10
00:00:38,390 --> 00:00:44,510
If there is a specific action to be taken, if an exception is thrown, such as rolling back a transaction

11
00:00:44,510 --> 00:00:50,990
or implementing some kind of victory algorithm or wrapping the exception in a different one, then it's

12
00:00:50,990 --> 00:00:51,980
a good idea to catch it.

13
00:00:51,980 --> 00:00:54,860
But other than that, it's better to avoid it.

14
00:00:55,280 --> 00:01:02,340
Second, always catch a specific exception when catching an exception, you should be aware of what

15
00:01:02,340 --> 00:01:06,510
kind of exception to look for, for example, when working with databases.

16
00:01:06,540 --> 00:01:12,930
Try to catch an exception and handle it correctly when you don't specify a specific exception to catch.

17
00:01:12,960 --> 00:01:17,160
You don't really know what you will get and may handle the exception in the wrong way.

18
00:01:17,190 --> 00:01:22,860
For example, if you work with a database and don't specify the exception type and simply assume that

19
00:01:22,860 --> 00:01:28,500
the exception is database related, you might encounter a different exception, say division by zero

20
00:01:28,500 --> 00:01:29,220
exception.

21
00:01:29,220 --> 00:01:34,620
That has nothing to do with a database action and rolling back the transaction might not be a good idea.

22
00:01:35,070 --> 00:01:40,290
Third use try catch on the smallest code fragment possible.

23
00:01:41,010 --> 00:01:47,880
More than once a saw methods that began with try and ended with catch and the developer thinking this

24
00:01:47,880 --> 00:01:49,500
is the right way to handle exceptions.

25
00:01:49,500 --> 00:01:51,060
Well, this is wrong.

26
00:01:51,090 --> 00:01:55,850
Always use the try catch mechanism on the smallest code fragment possible.

27
00:01:55,860 --> 00:02:02,440
If you have a line of code that accesses the database, surround it and only it with try catch.

28
00:02:02,460 --> 00:02:08,020
If you have a line that divides a number with another one, try to catch a divide by zero exception.

29
00:02:08,039 --> 00:02:13,440
Always look at specific lines of code and examine what exceptions might be thrown from them and catch

30
00:02:13,440 --> 00:02:14,340
those exceptions.

31
00:02:14,370 --> 00:02:18,660
Never surround large chunks of code with general unneeded exception handling.

