1
00:00:00,530 --> 00:00:05,450
It's now time to meet one of the most important acronyms in the software development and architecture

2
00:00:05,450 --> 00:00:07,190
world, the Solid.

3
00:00:07,400 --> 00:00:14,120
This acronym, coined by Bob Martin in the year 2000, represents five code design principles that,

4
00:00:14,120 --> 00:00:19,220
when implemented, make the code easy to understand, flexible and maintainable.

5
00:00:19,430 --> 00:00:25,820
Solid stands for Single Responsibility Principle Open Closed Principle.

6
00:00:25,850 --> 00:00:32,420
Liskov Substitution Principle Interface Segregation Principle and Dependency.

7
00:00:32,420 --> 00:00:33,710
Inversion Principle.

8
00:00:34,910 --> 00:00:39,680
As we will see in a minute, all these principles are actually quite common sense, and you won't find

9
00:00:39,680 --> 00:00:41,300
any huge surprises here.

10
00:00:41,330 --> 00:00:46,580
However, we sometimes tend to forget the obvious, and it's good to have a solid reminder.

11
00:00:46,610 --> 00:00:50,560
See what I did here to make sure we will still implementing them.

12
00:00:50,570 --> 00:00:53,060
So let's dive into these five principles.

13
00:00:53,720 --> 00:00:57,500
The single responsibility principle states something quite simple.

14
00:00:57,680 --> 00:01:03,290
Each class, module, or even method should have one and only one responsibility.

15
00:01:03,320 --> 00:01:07,170
Or in other words, a single well defined functionality.

16
00:01:07,190 --> 00:01:12,050
And this functionality should be fully encapsulated within this class or module.

17
00:01:12,080 --> 00:01:13,790
Let's look at an example.

18
00:01:14,000 --> 00:01:17,420
Let's say we have a system that logs all its activity.

19
00:01:17,450 --> 00:01:22,040
Now, when writing to the log, there are two main questions that should be answered.

20
00:01:22,040 --> 00:01:27,290
First, what should be written, including the content of the log message and its format, which is

21
00:01:27,290 --> 00:01:28,890
usually Json or XML.

22
00:01:28,970 --> 00:01:31,950
And second, where should it be written?

23
00:01:31,970 --> 00:01:36,000
Log records are usually sent to a file, a database, an event log.

24
00:01:36,000 --> 00:01:36,630
ET cetera.

25
00:01:36,630 --> 00:01:40,560
And this should be determined and handled as part of the logging process.

26
00:01:40,650 --> 00:01:46,260
The Single Responsibility Principle states that these two questions should be answered by two separate

27
00:01:46,260 --> 00:01:46,950
classes.

28
00:01:46,950 --> 00:01:52,500
One is responsible for composing the message and the other will handle the actual writing.

29
00:01:52,530 --> 00:01:57,600
So instead of a single method that performs the two tasks, we will have two classes.

30
00:01:57,600 --> 00:02:00,150
Each performs those tasks separately.

31
00:02:00,510 --> 00:02:06,060
The reason behind the single responsibility principle is that when a change is required, it will affect

32
00:02:06,060 --> 00:02:12,120
only a well defined code module and we won't need to look for other obscure places in the code that

33
00:02:12,120 --> 00:02:13,860
might be affected by the change.

34
00:02:14,010 --> 00:02:18,900
This encapsulation will make our code very easy to maintain and quite flexible.

35
00:02:19,360 --> 00:02:21,970
Next, the open close principle.

36
00:02:22,860 --> 00:02:28,730
The open closed principle states that a software entity should be open for extension but closed for

37
00:02:28,730 --> 00:02:29,810
modification.

38
00:02:29,930 --> 00:02:36,500
What this means is that in order to change behaviour of a software entity, for example class, we won't

39
00:02:36,500 --> 00:02:40,010
need to modify its code and then recompile and redeploy it.

40
00:02:40,010 --> 00:02:44,120
But we will have means to extend its functionality without touching the code.

41
00:02:44,300 --> 00:02:49,400
This principle is closely related to the extensibility quality attribute we talked about in the previous

42
00:02:49,400 --> 00:02:50,060
section.

43
00:02:50,660 --> 00:02:53,520
There are multiple ways to implement this principle.

44
00:02:53,540 --> 00:02:59,840
The most common of them is the inheritance capability in object oriented languages, either inheriting

45
00:02:59,840 --> 00:03:02,240
a concrete class or an abstract class.

46
00:03:02,270 --> 00:03:06,620
We achieve the same goal extending functionality without modifying the code.

47
00:03:06,650 --> 00:03:13,010
Of course, other types of extensions, such as plug ins, are also widely used and fulfill the open

48
00:03:13,010 --> 00:03:14,030
close principle.

49
00:03:15,080 --> 00:03:21,320
The reason behind this principle is quite clear We want our code to be as flexible as possible and enable

50
00:03:21,320 --> 00:03:25,800
us to make changes quickly without modifying and compiling existing code.

51
00:03:26,920 --> 00:03:30,610
The next principle is the liskov substitution principle.

52
00:03:30,730 --> 00:03:35,320
This principle might sound a bit more complex than the other principles, but don't worry, we will

53
00:03:35,320 --> 00:03:36,160
explain it.

54
00:03:36,400 --> 00:03:44,680
The principle states that if s is a subtype of T, then objects of type T may be replaced with objects

55
00:03:44,680 --> 00:03:49,870
of type S without altering any of the desired properties of the program.

56
00:03:50,920 --> 00:03:55,770
On first look, this might look similar to polymorphism definition in object oriented languages.

57
00:03:55,780 --> 00:04:02,080
Remember that polymorphism basically states that type can be replaced by its subtype without breaking

58
00:04:02,080 --> 00:04:02,660
the code.

59
00:04:02,680 --> 00:04:05,800
But there is a fundamental difference between the two.

60
00:04:05,830 --> 00:04:11,830
The Liskov substitution principle does not talk about coding or compiling, but on something called

61
00:04:11,830 --> 00:04:13,780
behavioral subtyping.

62
00:04:13,990 --> 00:04:16,180
Let's explain it through an example.

63
00:04:16,360 --> 00:04:19,420
Say we have a code that needs to send mail.

64
00:04:19,450 --> 00:04:25,540
The code calls a class named mail sender and calls its send method, which, as you probably guessed,

65
00:04:25,540 --> 00:04:26,900
sends the mail.

66
00:04:26,960 --> 00:04:33,020
A few months later, the developers come up with a better mail, sending class called Advanced Sender,

67
00:04:33,020 --> 00:04:35,630
which inherits from the original mail sender.

68
00:04:36,020 --> 00:04:41,090
The developers want to substitute mail sender with advanced sender in their code.

69
00:04:41,630 --> 00:04:47,600
The Liskov substitution principle says that when doing this substitution, the behavior of the send

70
00:04:47,600 --> 00:04:49,550
method should not be changed.

71
00:04:49,580 --> 00:04:54,020
If the original method only sent the mail, the new one should do the same.

72
00:04:54,050 --> 00:04:59,750
There should be no new functionality that is unexpected by the calling code, such as throwing new exceptions

73
00:04:59,750 --> 00:05:01,550
as a result of the substitution.

74
00:05:01,580 --> 00:05:07,760
For example, if the new method not only sends the mail but also automatically sends a copy of the mail

75
00:05:07,790 --> 00:05:13,790
to a central archive inbox that will break the principle and should be avoided since it breaks the behavior

76
00:05:13,790 --> 00:05:14,960
of the original type.

77
00:05:15,230 --> 00:05:19,940
The reason behind this principle is to avoid hidden behaviors that were not intended by the calling

78
00:05:19,940 --> 00:05:24,140
code, thus making the code much more difficult to debug and to maintain.

79
00:05:26,340 --> 00:05:29,550
The next principle is the interface segregation principle.

80
00:05:29,580 --> 00:05:36,180
This principle states that many client specific interfaces are better than one general purpose interface.

81
00:05:36,210 --> 00:05:38,730
Again, let's look at an example.

82
00:05:39,310 --> 00:05:42,160
Let's say we have a class that handles data processing.

83
00:05:42,190 --> 00:05:47,200
The class begins small with two methods read data and validate data.

84
00:05:47,770 --> 00:05:52,180
An interface named data processor was created that defines those two methods.

85
00:05:52,450 --> 00:05:57,790
While working with the class, additional methods were added to it that handle more tasks such as decoded

86
00:05:57,790 --> 00:06:01,330
data, encoded data and send data to external system.

87
00:06:01,900 --> 00:06:04,450
This method were added to the interface too.

88
00:06:04,750 --> 00:06:05,590
Now what?

89
00:06:05,590 --> 00:06:10,930
We've got a bloated interface with five methods that must be implemented by a single class.

90
00:06:11,140 --> 00:06:13,700
Remember the single responsibility principle.

91
00:06:13,720 --> 00:06:18,130
If you take a look at the class, you can see clearly that the class breaks this principle.

92
00:06:18,130 --> 00:06:23,860
It now handles three tasks handling data, decoding encoding it and sending it.

93
00:06:23,890 --> 00:06:28,390
The developers saw it too, and decided to split the class to three separate classes.

94
00:06:28,390 --> 00:06:30,590
However, they now have a problem.

95
00:06:30,610 --> 00:06:35,500
The interface forces them to implement all those methods using a single class.

96
00:06:35,860 --> 00:06:42,110
The interface segregation principle says we better create multiple thin and well-defined interfaces

97
00:06:42,110 --> 00:06:44,090
than a single general purpose one.

98
00:06:44,090 --> 00:06:49,550
So in our case, instead of a single interface with five methods, we would be better off with three

99
00:06:49,550 --> 00:06:51,890
interfaces with 1 or 2 methods.

100
00:06:51,920 --> 00:06:57,110
This way our code can be modular and flexible and keep the single responsibility principle.

101
00:06:58,670 --> 00:07:02,060
The last principle is one we have already talked about in the previous lecture.

102
00:07:02,060 --> 00:07:06,100
The dependency inversion principle, also called dependency injection.

103
00:07:06,110 --> 00:07:07,430
If you don't remember.

104
00:07:07,460 --> 00:07:10,040
Head back to the previous lecture and watch it again.

105
00:07:10,580 --> 00:07:12,680
And that's all about solid acronym.

106
00:07:12,740 --> 00:07:17,570
Again, the principles here are all common sense, but it's a good reminder and will help you keep the

107
00:07:17,570 --> 00:07:20,390
code clear, flexible and easy to maintain.

