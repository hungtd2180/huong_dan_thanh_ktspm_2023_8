1
00:00:00,320 --> 00:00:06,860
Naming conventions are a set of rules that define how do we name various code elements such as classes,

2
00:00:06,860 --> 00:00:10,280
methods, variables, constants and more.

3
00:00:10,310 --> 00:00:15,410
The role of naming conventions is to make our code more readable and easy to understand.

4
00:00:15,440 --> 00:00:21,380
When we agree on a convention, every code segment becomes clearer with the various elements easily

5
00:00:21,380 --> 00:00:23,090
distinguished from the others.

6
00:00:23,120 --> 00:00:29,000
Note that naming conventions are not enforced by compilers, and the code will work perfectly without

7
00:00:29,000 --> 00:00:30,410
using any convention.

8
00:00:30,410 --> 00:00:34,340
But a code without conventions will be messy and hard to work with.

9
00:00:35,290 --> 00:00:39,130
Naming conventions usually deal with two types of rules.

10
00:00:39,430 --> 00:00:45,880
One structure of the name casing underscores et cetera and content of the name.

11
00:00:45,880 --> 00:00:48,880
What kind of words can be used in the name?

12
00:00:49,840 --> 00:00:54,500
There are many types of code conventions, and I'll cover here the most common ones.

13
00:00:54,520 --> 00:00:57,100
First, let's talk about camel case.

14
00:00:57,790 --> 00:01:04,030
The camel case notation basically states that if a name contains more than one word, then the first

15
00:01:04,030 --> 00:01:07,180
letter of the second word onward should be capitalized.

16
00:01:07,210 --> 00:01:13,030
For example, if a class is named car engine in camel case, it will look like this.

17
00:01:13,360 --> 00:01:18,760
There are two variants of camel case, upper camel case and lower camel case.

18
00:01:18,790 --> 00:01:23,170
The difference between them is the casing of the first letter of the first word.

19
00:01:23,230 --> 00:01:28,090
As you can guess, with upper camel case, it will be capitalized while in lower camel case, it will

20
00:01:28,090 --> 00:01:28,720
not.

21
00:01:29,440 --> 00:01:36,020
The Camelcase convention is very popular in Java, C-sharp, JavaScript and Swift and is also recommended

22
00:01:36,020 --> 00:01:38,450
for class names in Python and Ruby.

23
00:01:39,390 --> 00:01:43,410
Next is the lowercase separated by underscores convention.

24
00:01:43,950 --> 00:01:50,490
As its name implies in this convention, the name contains only lowercase letters and the words are

25
00:01:50,490 --> 00:01:52,450
separated by an underscore.

26
00:01:52,470 --> 00:01:57,510
For example, a variable named num of parts will look like this.

27
00:01:58,290 --> 00:02:02,610
This convention is mainly used in Python and Ruby for naming variables.

28
00:02:03,930 --> 00:02:07,890
Another similar convention is capitalized with underscores.

29
00:02:08,039 --> 00:02:10,410
The difference between this one and the lowercase.

30
00:02:10,410 --> 00:02:14,610
Separated by underscores is that while in the former we use only lowercase letters.

31
00:02:14,610 --> 00:02:17,250
In the latter we use only capitalized letters.

32
00:02:17,340 --> 00:02:24,270
For example, the variable days in week will look like this in the capitalized with underscores.

33
00:02:24,810 --> 00:02:29,310
This convention is often used in Java, Python and Ruby for naming constants.

34
00:02:31,600 --> 00:02:34,820
The last convention we will talk about is a Hungarian notation.

35
00:02:34,840 --> 00:02:40,540
The Hungarian notation was very popular in the 90s and there are some developers still using it today.

36
00:02:40,750 --> 00:02:45,730
The Hungarian notation basically states that the type information should be part of the name of the

37
00:02:45,730 --> 00:02:46,360
variable.

38
00:02:46,390 --> 00:02:52,420
For example, if you have a variable of type string that contains a first name, the variable name will

39
00:02:52,420 --> 00:02:53,410
look like this.

40
00:02:53,920 --> 00:02:58,010
As you can see, the name has a prefix that represents the type name.

41
00:02:58,030 --> 00:03:00,820
It's not a full type name, but a short version of it.

42
00:03:00,850 --> 00:03:04,000
Usually an abbreviation of three letters is used.

43
00:03:04,030 --> 00:03:08,530
Again, this is not a widely used notation and should generally be avoided.

44
00:03:10,560 --> 00:03:14,010
The second part of the naming convention deals with the contents of the name.

45
00:03:14,010 --> 00:03:16,290
And there is an important distinction to make here.

46
00:03:16,320 --> 00:03:21,840
As a rule of thumb, class names should always be nouns, and method names should always be imperative

47
00:03:21,840 --> 00:03:22,500
verbs.

48
00:03:22,530 --> 00:03:28,890
For example, a class that handles data retrieval should be called data retrieval or simply data.

49
00:03:28,890 --> 00:03:34,080
And the method in this class that actually retrieves the data will be called retrieve data.

50
00:03:34,470 --> 00:03:39,360
The reason for this is that a class should always represent an entity which is described as a noun,

51
00:03:39,360 --> 00:03:44,160
while a method should represent an action on this entity and should be named accordingly.

52
00:03:44,460 --> 00:03:49,290
So to summarize this lecture, always work with a specific naming convention.

53
00:03:49,290 --> 00:03:53,880
It doesn't really matter which convention you will work with, although it's a good idea to stick to

54
00:03:53,880 --> 00:03:58,230
a common standard, but make sure to make this decision as soon as possible.

55
00:03:58,230 --> 00:04:02,220
And even more important, always follow the convention.

56
00:04:02,520 --> 00:04:06,570
You will see the code will be much more readable and easy to understand.

