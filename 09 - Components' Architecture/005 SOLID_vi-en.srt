00:00:00,530 --> 00:00:05,450
It's now time to meet one of the most important acronyms in the software development and architecture
Bây giờ là lúc để làm quen với một trong những từ viết tắt quan trọng nhất trong phát triển phần mềm và kiến trúc


00:00:05,450 --> 00:00:07,190
world, the Solid.
thế giới, Rắn.


00:00:07,400 --> 00:00:14,120
This acronym, coined by Bob Martin in the year 2000, represents five code design principles that,
Từ viết tắt này, được Bob Martin đặt ra vào năm 2000, đại diện cho năm nguyên tắc thiết kế mã,


00:00:14,120 --> 00:00:19,220
when implemented, make the code easy to understand, flexible and maintainable.
khi triển khai, hãy làm cho mã dễ hiểu, linh hoạt và dễ bảo trì.


00:00:19,430 --> 00:00:25,820
Solid stands for Single Responsibility Principle Open Closed Principle.
Solid là viết tắt của Nguyên tắc trách nhiệm đơn lẻ Nguyên tắc đóng mở


00:00:25,850 --> 00:00:32,420
Liskov Substitution Principle Interface Segregation Principle and Dependency.
Nguyên lý thay thế Liskov Nguyên lý phân tách giao diện và sự phụ thuộc.


00:00:32,420 --> 00:00:33,710
Inversion Principle.
Nguyên lý đảo ngược.


00:00:34,910 --> 00:00:39,680
As we will see in a minute, all these principles are actually quite common sense, and you won't find
Như chúng ta sẽ thấy trong một phút, tất cả những nguyên tắc này thực sự là lẽ thường tình, và bạn sẽ không tìm thấy


00:00:39,680 --> 00:00:41,300
any huge surprises here.
có bất kỳ bất ngờ lớn nào ở đây không.


00:00:41,330 --> 00:00:46,580
However, we sometimes tend to forget the obvious, and it's good to have a solid reminder.
Tuy nhiên, đôi khi chúng ta có xu hướng quên đi điều hiển nhiên và tốt hơn hết là nên có một lời nhắc nhở chắc chắn.


00:00:46,610 --> 00:00:50,560
See what I did here to make sure we will still implementing them.
Xem những gì tôi đã làm ở đây để đảm bảo chúng tôi vẫn sẽ triển khai chúng.


00:00:50,570 --> 00:00:53,060
So let's dive into these five principles.
Vậy chúng ta hãy cùng tìm hiểu sâu hơn về năm nguyên tắc này.


00:00:53,720 --> 00:00:57,500
The single responsibility principle states something quite simple.
Nguyên tắc trách nhiệm duy nhất nêu ra một điều khá đơn giản.


00:00:57,680 --> 00:01:03,290
Each class, module, or even method should have one and only one responsibility.
Mỗi lớp, mô-đun hoặc thậm chí phương thức chỉ nên có một và chỉ một trách nhiệm.


00:01:03,320 --> 00:01:07,170
Or in other words, a single well defined functionality.
Hay nói cách khác, một chức năng duy nhất được xác định rõ ràng.


00:01:07,190 --> 00:01:12,050
And this functionality should be fully encapsulated within this class or module.
Và chức năng này phải được đóng gói đầy đủ trong lớp hoặc mô-đun này.


00:01:12,080 --> 00:01:13,790
Let's look at an example.
Chúng ta hãy xem một ví dụ.


00:01:14,000 --> 00:01:17,420
Let's say we have a system that logs all its activity.
Giả sử chúng ta có một hệ thống ghi lại mọi hoạt động của nó.


00:01:17,450 --> 00:01:22,040
Now, when writing to the log, there are two main questions that should be answered.
Bây giờ, khi ghi vào nhật ký, có hai câu hỏi chính cần được trả lời.


00:01:22,040 --> 00:01:27,290
First, what should be written, including the content of the log message and its format, which is
Đầu tiên, những gì cần được viết, bao gồm nội dung của tin nhắn nhật ký và định dạng của nó, đó là


00:01:27,290 --> 00:01:28,890
usually Json or XML.
thường là Json hoặc XML.


00:01:28,970 --> 00:01:31,950
And second, where should it be written?
Và thứ hai, nó nên được viết ở đâu?


00:01:31,970 --> 00:01:36,000
Log records are usually sent to a file, a database, an event log.
Bản ghi nhật ký thường được gửi đến một tệp, một cơ sở dữ liệu, một nhật ký sự kiện.


00:01:36,000 --> 00:01:36,630
ET cetera.
ET ctera.


00:01:36,630 --> 00:01:40,560
And this should be determined and handled as part of the logging process.
Và điều này cần được xác định và xử lý như một phần của quá trình ghi nhật ký.


00:01:40,650 --> 00:01:46,260
The Single Responsibility Principle states that these two questions should be answered by two separate
Nguyên tắc trách nhiệm duy nhất nêu rằng hai câu hỏi này phải được trả lời bằng hai 27 riêng biệt


00:01:46,260 --> 00:01:46,950
classes.
lớp học.


00:01:46,950 --> 00:01:52,500
One is responsible for composing the message and the other will handle the actual writing.
Một người chịu trách nhiệm soạn thảo tin nhắn và người kia sẽ xử lý việc viết thực tế.


00:01:52,530 --> 00:01:57,600
So instead of a single method that performs the two tasks, we will have two classes.
Vì vậy, thay vì một phương thức duy nhất thực hiện hai nhiệm vụ, chúng ta sẽ có hai lớp.


00:01:57,600 --> 00:02:00,150
Each performs those tasks separately.
Mỗi người thực hiện những nhiệm vụ đó một cách riêng biệt.


00:02:00,510 --> 00:02:06,060
The reason behind the single responsibility principle is that when a change is required, it will affect
Lý do đằng sau nguyên tắc trách nhiệm duy nhất là khi cần thay đổi, nó sẽ ảnh hưởng đến


00:02:06,060 --> 00:02:12,120
only a well defined code module and we won't need to look for other obscure places in the code that
chỉ một mô-đun mã được xác định rõ ràng và chúng ta sẽ không cần phải tìm kiếm những nơi tối nghĩa khác trong mã đó


00:02:12,120 --> 00:02:13,860
might be affected by the change.
có thể bị ảnh hưởng bởi sự thay đổi.


00:02:14,010 --> 00:02:18,900
This encapsulation will make our code very easy to maintain and quite flexible.
Việc đóng gói này sẽ làm cho mã của chúng ta rất dễ bảo trì và khá linh hoạt.


00:02:19,360 --> 00:02:21,970
Next, the open close principle.
Tiếp theo là nguyên lý đóng mở.


00:02:22,860 --> 00:02:28,730
The open closed principle states that a software entity should be open for extension but closed for
Nguyên tắc đóng mở nêu rằng một thực thể phần mềm phải mở để mở rộng nhưng đóng trong


00:02:28,730 --> 00:02:29,810
modification.
sửa đổi.


00:02:29,930 --> 00:02:36,500
What this means is that in order to change behaviour of a software entity, for example class, we won't
Điều này có nghĩa là để thay đổi hành vi của một thực thể phần mềm, ví dụ như lớp, chúng ta sẽ không


00:02:36,500 --> 00:02:40,010
need to modify its code and then recompile and redeploy it.
cần phải sửa đổi mã của nó và sau đó biên dịch lại và triển khai lại nó.


00:02:40,010 --> 00:02:44,120
But we will have means to extend its functionality without touching the code.
Nhưng chúng ta sẽ có phương tiện để mở rộng chức năng của nó mà không cần động đến mã.


00:02:44,300 --> 00:02:49,400
This principle is closely related to the extensibility quality attribute we talked about in the previous
Nguyên tắc này có liên quan chặt chẽ đến thuộc tính chất lượng khả năng mở rộng mà chúng ta đã nói đến trong 42 trước


00:02:49,400 --> 00:02:50,060
section.
phần


00:02:50,660 --> 00:02:53,520
There are multiple ways to implement this principle.
Có nhiều cách để thực hiện nguyên tắc này.


00:02:53,540 --> 00:02:59,840
The most common of them is the inheritance capability in object oriented languages, either inheriting
Phổ biến nhất trong số chúng là khả năng kế thừa trong các ngôn ngữ hướng đối tượng, hoặc kế thừa


00:02:59,840 --> 00:03:02,240
a concrete class or an abstract class.
một lớp cụ thể hoặc một lớp trừu tượng.


00:03:02,270 --> 00:03:06,620
We achieve the same goal extending functionality without modifying the code.
Chúng tôi đạt được mục tiêu tương tự là mở rộng chức năng mà không cần sửa đổi mã.


00:03:06,650 --> 00:03:13,010
Of course, other types of extensions, such as plug ins, are also widely used and fulfill the open
Tất nhiên, các loại tiện ích mở rộng khác, chẳng hạn như plug-in, cũng được sử dụng rộng rãi và đáp ứng nhu cầu mở


00:03:13,010 --> 00:03:14,030
close principle.
nguyên tắc đóng.


00:03:15,080 --> 00:03:21,320
The reason behind this principle is quite clear We want our code to be as flexible as possible and enable
Lý do đằng sau nguyên tắc này khá rõ ràng. Chúng tôi muốn mã của mình linh hoạt nhất có thể và cho phép


00:03:21,320 --> 00:03:25,800
us to make changes quickly without modifying and compiling existing code.
cho phép chúng tôi thực hiện các thay đổi nhanh chóng mà không cần sửa đổi và biên dịch mã hiện có.


00:03:26,920 --> 00:03:30,610
The next principle is the liskov substitution principle.
Nguyên lý tiếp theo là nguyên lý thay thế Liskov.


00:03:30,730 --> 00:03:35,320
This principle might sound a bit more complex than the other principles, but don't worry, we will
Nguyên tắc này có vẻ phức tạp hơn một chút so với các nguyên tắc khác, nhưng đừng lo lắng, chúng tôi sẽ


00:03:35,320 --> 00:03:36,160
explain it.
giải thích nó.


00:03:36,400 --> 00:03:44,680
The principle states that if s is a subtype of T, then objects of type T may be replaced with objects
Nguyên tắc này nêu rằng nếu s là một kiểu con của T, thì các đối tượng của kiểu T có thể được thay thế bằng các đối tượng


00:03:44,680 --> 00:03:49,870
of type S without altering any of the desired properties of the program.
của loại S mà không làm thay đổi bất kỳ thuộc tính mong muốn nào của chương trình.


00:03:50,920 --> 00:03:55,770
On first look, this might look similar to polymorphism definition in object oriented languages.
Thoạt nhìn, điều này có vẻ giống với định nghĩa đa hình trong ngôn ngữ hướng đối tượng.


00:03:55,780 --> 00:04:02,080
Remember that polymorphism basically states that type can be replaced by its subtype without breaking
Hãy nhớ rằng đa hình về cơ bản nêu rằng kiểu có thể được thay thế bằng kiểu con của nó mà không làm hỏng


00:04:02,080 --> 00:04:02,660
the code.
mã.


00:04:02,680 --> 00:04:05,800
But there is a fundamental difference between the two.
Nhưng có một sự khác biệt cơ bản giữa hai điều này.


00:04:05,830 --> 00:04:11,830
The Liskov substitution principle does not talk about coding or compiling, but on something called
Nguyên lý thay thế Liskov không nói về mã hóa hay biên dịch, mà nói về cái gọi là


00:04:11,830 --> 00:04:13,780
behavioral subtyping.
phân loại hành vi.


00:04:13,990 --> 00:04:16,180
Let's explain it through an example.
Chúng ta hãy giải thích nó thông qua một ví dụ.


00:04:16,360 --> 00:04:19,420
Say we have a code that needs to send mail.
Giả sử chúng ta có một mã cần gửi thư.


00:04:19,450 --> 00:04:25,540
The code calls a class named mail sender and calls its send method, which, as you probably guessed,
Mã này gọi một lớp có tên là mail sender và gọi phương thức send của nó, mà như bạn có thể đoán,


00:04:25,540 --> 00:04:26,900
sends the mail.
gửi thư.


00:04:26,960 --> 00:04:33,020
A few months later, the developers come up with a better mail, sending class called Advanced Sender,
Vài tháng sau, các nhà phát triển đưa ra một lớp gửi thư tốt hơn có tên là Advanced Sender,


00:04:33,020 --> 00:04:35,630
which inherits from the original mail sender.
được kế thừa từ người gửi thư gốc.


00:04:36,020 --> 00:04:41,090
The developers want to substitute mail sender with advanced sender in their code.
Các nhà phát triển muốn thay thế người gửi thư bằng người gửi nâng cao trong mã của họ.


00:04:41,630 --> 00:04:47,600
The Liskov substitution principle says that when doing this substitution, the behavior of the send
Nguyên lý thay thế Liskov nói rằng khi thực hiện sự thay thế này, hành vi của gửi


00:04:47,600 --> 00:04:49,550
method should not be changed.
phương pháp không nên thay đổi.


00:04:49,580 --> 00:04:54,020
If the original method only sent the mail, the new one should do the same.
Nếu phương pháp ban đầu chỉ gửi thư, phương pháp mới cũng sẽ làm như vậy.


00:04:54,050 --> 00:04:59,750
There should be no new functionality that is unexpected by the calling code, such as throwing new exceptions
Không nên có chức năng mới nào mà mã gọi không mong đợi, chẳng hạn như đưa ra các ngoại lệ mới


00:04:59,750 --> 00:05:01,550
as a result of the substitution.
là kết quả của sự thay thế.


00:05:01,580 --> 00:05:07,760
For example, if the new method not only sends the mail but also automatically sends a copy of the mail
Ví dụ, nếu phương pháp mới không chỉ gửi thư mà còn tự động gửi một bản sao của thư


00:05:07,790 --> 00:05:13,790
to a central archive inbox that will break the principle and should be avoided since it breaks the behavior
đến hộp thư lưu trữ trung tâm sẽ phá vỡ nguyên tắc và nên tránh vì nó phá vỡ hành vi


00:05:13,790 --> 00:05:14,960
of the original type.
của loại ban đầu.


00:05:15,230 --> 00:05:19,940
The reason behind this principle is to avoid hidden behaviors that were not intended by the calling
Lý do đằng sau nguyên tắc này là để tránh những hành vi ẩn giấu không nằm trong ý định của người gọi


00:05:19,940 --> 00:05:24,140
code, thus making the code much more difficult to debug and to maintain.
mã, do đó làm cho mã khó gỡ lỗi và bảo trì hơn nhiều.


00:05:26,340 --> 00:05:29,550
The next principle is the interface segregation principle.
Nguyên tắc tiếp theo là nguyên tắc phân tách giao diện.


00:05:29,580 --> 00:05:36,180
This principle states that many client specific interfaces are better than one general purpose interface.
Nguyên tắc này nêu rằng nhiều giao diện dành riêng cho khách hàng tốt hơn một giao diện chung.


00:05:36,210 --> 00:05:38,730
Again, let's look at an example.
Một lần nữa, chúng ta hãy xem một ví dụ.


00:05:39,310 --> 00:05:42,160
Let's say we have a class that handles data processing.
Giả sử chúng ta có một lớp xử lý dữ liệu.


00:05:42,190 --> 00:05:47,200
The class begins small with two methods read data and validate data.
Lớp học bắt đầu với hai phương pháp nhỏ là đọc dữ liệu và xác thực dữ liệu.


00:05:47,770 --> 00:05:52,180
An interface named data processor was created that defines those two methods.
Một giao diện có tên là bộ xử lý dữ liệu đã được tạo ra để xác định hai phương pháp đó.


00:05:52,450 --> 00:05:57,790
While working with the class, additional methods were added to it that handle more tasks such as decoded
Trong khi làm việc với lớp, các phương pháp bổ sung đã được thêm vào để xử lý nhiều tác vụ hơn như giải mã


00:05:57,790 --> 00:06:01,330
data, encoded data and send data to external system.
dữ liệu, dữ liệu được mã hóa và gửi dữ liệu đến hệ thống bên ngoài.


00:06:01,900 --> 00:06:04,450
This method were added to the interface too.
Phương pháp này cũng được thêm vào giao diện.


00:06:04,750 --> 00:06:05,590
Now what?
Bây giờ thì sao?


00:06:05,590 --> 00:06:10,930
We've got a bloated interface with five methods that must be implemented by a single class.
Chúng ta có một giao diện cồng kềnh với năm phương thức phải được triển khai bởi một lớp duy nhất.


00:06:11,140 --> 00:06:13,700
Remember the single responsibility principle.
Hãy nhớ nguyên tắc trách nhiệm duy nhất.


00:06:13,720 --> 00:06:18,130
If you take a look at the class, you can see clearly that the class breaks this principle.
Nếu bạn xem xét lớp học, bạn có thể thấy rõ ràng rằng lớp học đã phá vỡ nguyên tắc này.


00:06:18,130 --> 00:06:23,860
It now handles three tasks handling data, decoding encoding it and sending it.
Hiện tại nó xử lý ba nhiệm vụ: xử lý dữ liệu, giải mã, mã hóa và gửi dữ liệu.


00:06:23,890 --> 00:06:28,390
The developers saw it too, and decided to split the class to three separate classes.
Các nhà phát triển cũng thấy điều đó và quyết định chia lớp thành ba lớp riêng biệt.


00:06:28,390 --> 00:06:30,590
However, they now have a problem.
Tuy nhiên, bây giờ họ có một vấn đề.


00:06:30,610 --> 00:06:35,500
The interface forces them to implement all those methods using a single class.
Giao diện buộc họ phải triển khai tất cả các phương thức đó bằng một lớp duy nhất.


00:06:35,860 --> 00:06:42,110
The interface segregation principle says we better create multiple thin and well-defined interfaces
Nguyên tắc phân tách giao diện cho biết chúng ta nên tạo nhiều giao diện mỏng và được xác định rõ ràng


00:06:42,110 --> 00:06:44,090
than a single general purpose one.
hơn một mục đích chung duy nhất.


00:06:44,090 --> 00:06:49,550
So in our case, instead of a single interface with five methods, we would be better off with three
Vì vậy, trong trường hợp của chúng tôi, thay vì một giao diện duy nhất với năm phương pháp, chúng tôi sẽ tốt hơn với ba phương pháp


00:06:49,550 --> 00:06:51,890
interfaces with 1 or 2 methods.
giao diện với 1 hoặc 2 phương pháp.


00:06:51,920 --> 00:06:57,110
This way our code can be modular and flexible and keep the single responsibility principle.
Theo cách này, mã của chúng ta có thể được mô-đun hóa và linh hoạt và duy trì nguyên tắc trách nhiệm duy nhất.


00:06:58,670 --> 00:07:02,060
The last principle is one we have already talked about in the previous lecture.
Nguyên tắc cuối cùng là nguyên tắc mà chúng ta đã nói đến trong bài giảng trước.


00:07:02,060 --> 00:07:06,100
The dependency inversion principle, also called dependency injection.
Nguyên lý đảo ngược phụ thuộc, còn gọi là tiêm phụ thuộc.


00:07:06,110 --> 00:07:07,430
If you don't remember.
Nếu bạn không nhớ.


00:07:07,460 --> 00:07:10,040
Head back to the previous lecture and watch it again.
Quay lại bài giảng trước và xem lại.


00:07:10,580 --> 00:07:12,680
And that's all about solid acronym.
Và đó là tất cả về từ viết tắt chắc chắn.


00:07:12,740 --> 00:07:17,570
Again, the principles here are all common sense, but it's a good reminder and will help you keep the
Một lần nữa, các nguyên tắc ở đây đều là lẽ thường tình, nhưng đây là lời nhắc nhở hữu ích và sẽ giúp bạn giữ nguyên


00:07:17,570 --> 00:07:20,390
code clear, flexible and easy to maintain.
Mã rõ ràng, linh hoạt và dễ bảo trì.


